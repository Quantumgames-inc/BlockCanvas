/** Declaration file generated by dts-gen */

export class ASTNode {
    constructor(a: any, b: any, c: any);

    findFirstFieldOrInput_(a: any): any;

    findNextForField_(): any;

    findNextForInput_(): any;

    findPrevForField_(): any;

    findPrevForInput_(): any;

    findTopASTNodeForBlock_(a: any): any;

    getLocation(): any;

    getOutAstNodeForBlock_(a: any): any;

    getSourceBlock(): any;

    getType(): any;

    getWsCoordinate(): any;

    in(): any;

    isConnection(): any;

    navigateBetweenStacks_(a: any): any;

    next(): any;

    out(): any;

    prev(): any;

    processParams_(a: any): void;

    static DEFAULT_OFFSET_Y: number;

    static NAVIGATE_ALL_FIELDS: boolean;

    static createBlockNode(a: any): any;

    static createConnectionNode(a: any): any;

    static createFieldNode(a: any): any;

    static createInputNode(a: any): any;

    static createStackNode(a: any): any;

    static createWorkspaceNode(a: any, b: any): any;

    static isConnectionType_(a: any): any;

    static types: {
        BLOCK: string;
        FIELD: string;
        INPUT: string;
        NEXT: string;
        OUTPUT: string;
        PREVIOUS: string;
        STACK: string;
        WORKSPACE: string;
    };

}

export class BasicCursor {
    constructor();

    findSiblingOrParent_(a: any): any;

    getNextNode_(a: any, b: any): any;

    getPreviousNode_(a: any, b: any): any;

    getRightMostChild_(a: any): any;

    in(): any;

    next(): any;

    out(): any;

    prev(): any;

    validNode_(a: any): any;

}

export class Block {
    constructor(a: any, b: any, c: any);

    allInputsFilled(a: any): any;

    appendDummyInput(a: any): any;

    appendInput_(a: any, b: any): any;

    appendStatementInput(a: any): any;

    appendValueInput(a: any): any;

    bumpNeighbours(): void;

    dispose(a: any): void;

    getChildren(a: any): any;

    getColour(): any;

    getCommentText(): any;

    getConnections_(a: any): any;

    getDescendants(a: any): any;

    getField(a: any): any;

    getFieldValue(a: any): any;

    getFirstStatementConnection(): any;

    getHue(): any;

    getInheritedDisabled(): any;

    getInput(a: any): any;

    getInputTargetBlock(a: any): any;

    getInputWithBlock(a: any): any;

    getInputsInline(): any;

    getMatchingConnection(a: any, b: any): any;

    getNextBlock(): any;

    getOnlyValueConnection_(): any;

    getOutputShape(): any;

    getParent(): any;

    getPreviousBlock(): any;

    getRelativeToSurfaceXY(): any;

    getRootBlock(): any;

    getStyleName(): any;

    getSurroundParent(): any;

    getTopStackBlock(): any;

    getVarModels(): any;

    getVars(): any;

    initModel(): void;

    interpolate_(a: any, b: any, c: any, d: any): void;

    isCollapsed(): any;

    isDeletable(): any;

    isDisposed(): any;

    isDuplicatable(): any;

    isEditable(): any;

    isEnabled(): any;

    isInsertionMarker(): any;

    isMovable(): any;

    isShadow(): any;

    jsonInit(a: any): void;

    jsonInitColour_(a: any, b: any): void;

    jsonInitStyle_(a: any, b: any): void;

    lastConnectionInStack(): any;

    makeConnection_(a: any): any;

    mixin(a: any, b: any): void;

    moveBy(a: any, b: any): void;

    moveInputBefore(a: any, b: any): void;

    moveNumberedInputBefore(a: any, b: any): void;

    removeInput(a: any, b: any): void;

    renameVarById(a: any, b: any): void;

    setCollapsed(a: any): void;

    setColour(a: any): void;

    setCommentText(a: any): void;

    setDeletable(a: any): void;

    setDisabled(a: any): void;

    setEditable(a: any): void;

    setEnabled(a: any): void;

    setFieldValue(a: any, b: any): void;

    setHelpUrl(a: any): void;

    setInputsInline(a: any): void;

    setInsertionMarker(a: any): void;

    setMovable(a: any): void;

    setMutator(a: any): void;

    setNextStatement(a: any, b: any): void;

    setOnChange(a: any): void;

    setOutput(a: any, b: any): void;

    setOutputShape(a: any): void;

    setParent(a: any): void;

    setPreviousStatement(a: any, b: any): void;

    setShadow(a: any): void;

    setStyle(a: any): void;

    setTooltip(a: any): void;

    setWarningText(a: any, b: any): void;

    toDevString(): any;

    toString(a: any, b: any): any;

    unplug(a: any): void;

    unplugFromRow_(a: any): void;

    unplugFromStack_(a: any): void;

    updateVarName(a: any): void;

}

export class BlockDragSurfaceSvg {
    constructor(a: any);

    clearAndHide(a: any): void;

    createDom(): void;

    getCurrentBlock(): any;

    getGroup(): any;

    getSurfaceTranslation(): any;

    setBlocksAndShow(a: any): void;

    translateAndScaleGroup(a: any, b: any, c: any): void;

    translateSurface(a: any, b: any): void;

    translateSurfaceInternal_(): void;

}

export class BlockDragger {
    constructor(a: any, b: any);

    dispose(): void;

    dragBlock(a: any, b: any): void;

    dragIcons_(a: any): void;

    endBlockDrag(a: any, b: any): void;

    fireDragEndEvent_(): void;

    fireDragStartEvent_(): void;

    fireMoveEvent_(): void;

    getInsertionMarkers(): any;

    maybeDeleteBlock_(): any;

    pixelsToWorkspaceUnits_(a: any): any;

    startBlockDrag(a: any, b: any): void;

    updateCursorDuringBlockDrag_(): void;

    static initIconData_(a: any): any;

}

export class BlockSvg {
    constructor(a: any, b: any, c: any);

    addSelect(): void;

    appendInput_(a: any, b: any): any;

    applyColour(): void;

    bringToFront(): void;

    bumpNeighbours(): void;

    clearTransformAttributes_(): void;

    dispose(a: any, b: any): void;

    generateContextMenu(): any;

    getBoundingRectangle(): any;

    getColour(): any;

    getColourBorder(): any;

    getColourSecondary(): any;

    getColourShadow(): any;

    getColourTertiary(): any;

    getCommentIcon(): any;

    getConnections_(a: any): any;

    getHeightWidth(): any;

    getIcons(): any;

    getMatchingConnection(a: any, b: any): any;

    getParent(): any;

    getRelativeToSurfaceXY(): any;

    getRootBlock(): any;

    getSvgRoot(): any;

    highlightForReplacement(a: any): void;

    highlightShapeForInput(a: any, b: any): void;

    initSvg(): void;

    lastConnectionInStack(): any;

    makeConnection_(a: any): any;

    markDirty(): void;

    moveBy(a: any, b: any): void;

    moveConnections(a: any, b: any): void;

    moveDuringDrag(a: any): void;

    moveNumberedInputBefore(a: any, b: any): void;

    moveOffDragSurface(a: any): void;

    moveTo(a: any): void;

    moveToDragSurface(): void;

    onMouseDown_(a: any): void;

    positionNearConnection(a: any, b: any): void;

    removeInput(a: any, b: any): void;

    removeSelect(): void;

    render(a: any): void;

    scheduleSnapAndBump(): void;

    select(): void;

    setCollapsed(a: any): void;

    setColour(a: any): void;

    setCommentText(a: any): void;

    setConnectionTracking(a: any): void;

    setCursorSvg(a: any): void;

    setDeleteStyle(a: any): void;

    setDisabled(a: any): void;

    setDragging(a: any): void;

    setEditable(a: any): void;

    setEnabled(a: any): void;

    setHighlighted(a: any): void;

    setInputsInline(a: any): void;

    setInsertionMarker(a: any): void;

    setMarkerSvg(a: any): void;

    setMovable(a: any): void;

    setMutator(a: any): void;

    setNextStatement(a: any, b: any): void;

    setOutput(a: any, b: any): void;

    setParent(a: any): void;

    setPreviousStatement(a: any, b: any): void;

    setShadow(a: any): void;

    setStyle(a: any): void;

    setWarningText(a: any, b: any): void;

    showContextMenu(a: any): void;

    showHelp(): void;

    snapToGrid(): void;

    tab(a: any, b: any): void;

    translate(a: any, b: any): void;

    unselect(): void;

    updateConnectionLocations_(): void;

    updateDisabled(): void;

    static COLLAPSED_WARNING_ID: string;

    static INLINE: number;

}

export class Bubble {
    constructor(a: any, b: any, c: any, d: any, e: any, f: any);

    bubbleMouseDown_(a: any): void;

    createDom_(a: any, b: any): any;

    dispose(): void;

    getBubbleSize(): any;

    getOptimalRelativeLeft_(a: any): any;

    getOptimalRelativeTop_(a: any): any;

    getOverlap_(a: any, b: any): any;

    getRelativeToSurfaceXY(): any;

    getSvgRoot(): any;

    isDeletable(): any;

    layoutBubble_(): void;

    moveDuringDrag(a: any, b: any): void;

    moveTo(a: any, b: any): void;

    positionBubble_(): void;

    promote(): any;

    registerMoveEvent(a: any): void;

    registerResizeEvent(a: any): void;

    renderArrow_(): void;

    resizeMouseDown_(a: any): void;

    resizeMouseMove_(a: any): void;

    setAnchorLocation(a: any): void;

    setAutoLayout(a: any): void;

    setBubbleSize(a: any, b: any): void;

    setColour(a: any): void;

    setDragging(a: any): void;

    setSvgId(a: any): void;

    showContextMenu(a: any): void;

    static ANCHOR_RADIUS: number;

    static ARROW_ANGLE: number;

    static ARROW_BEND: number;

    static ARROW_THICKNESS: number;

    static BORDER_WIDTH: number;

    static bubbleMouseUp_(a: any): void;

    static onMouseMoveWrapper_: any;

    static onMouseUpWrapper_: any;

    static unbindDragEvents_(): void;

}

export class BubbleDragger {
    constructor(a: any, b: any);

    dispose(): void;

    dragBubble(a: any, b: any): void;

    endBubbleDrag(a: any, b: any): void;

    fireMoveEvent_(): void;

    maybeDeleteBubble_(): any;

    moveToDragSurface_(): void;

    pixelsToWorkspaceUnits_(a: any): any;

    startBubbleDrag(): void;

    updateCursorDuringBubbleDrag_(): void;

}

export class Comment {
    constructor(a: any);

    createBubble_(): void;

    createEditableBubble_(): void;

    createEditor_(): any;

    createNonEditableBubble_(): void;

    dispose(): void;

    disposeBubble_(): void;

    drawIcon_(a: any): void;

    getBubbleSize(): any;

    getText(): any;

    onBubbleResize_(): void;

    resizeTextarea_(): void;

    setBubbleSize(a: any, b: any): void;

    setText(a: any): void;

    setVisible(a: any): void;

    startEdit_(a: any): void;

    updateEditable(): void;

    updateText(): void;

}

export class Component {
    constructor();

    addChild(a: any, b: any): void;

    addChildAt(a: any, b: any, c: any): void;

    createDom(): void;

    dispose(): void;

    disposeInternal(): void;

    enterDocument(): void;

    exitDocument(): void;

    forEachChild(a: any, b: any): void;

    getChild(a: any): any;

    getChildAt(a: any): any;

    getChildCount(): any;

    getContentElement(): any;

    getElement(): any;

    getId(): any;

    getParent(): any;

    hasChildren(): any;

    indexOfChild(a: any): any;

    isInDocument(): any;

    isRightToLeft(): any;

    render(a: any): void;

    renderBefore(a: any): void;

    render_(a: any, b: any): void;

    setElementInternal(a: any): void;

    setParent(a: any): void;

    setRightToLeft(a: any): void;

    static Error: {
        ALREADY_RENDERED: string;
        CHILD_INDEX_OUT_OF_BOUNDS: string;
        PARENT_UNABLE_TO_BE_SET: string;
    };

    static defaultRightToLeft: boolean;

}

export class Connection {
    constructor(a: any, b: any);

    canConnectToPrevious_(a: any): any;

    canConnectWithReason(a: any): any;

    checkConnection(a: any): void;

    checkType(a: any): any;

    checkType_(a: any): any;

    connect(a: any): void;

    connect_(a: any): void;

    disconnect(): void;

    disconnectInternal_(a: any, b: any): void;

    dispose(): void;

    getCheck(): any;

    getParentInput(): any;

    getShadowDom(): any;

    getSourceBlock(): any;

    isConnected(): any;

    isConnectionAllowed(a: any): any;

    isSuperior(): any;

    neighbours(a: any): any;

    onCheckChanged_(): void;

    onFailedConnect(a: any): void;

    respawnShadow_(): void;

    setCheck(a: any): any;

    setShadowDom(a: any): void;

    targetBlock(): any;

    toString(): any;

    static CAN_CONNECT: number;

    static REASON_CHECKS_FAILED: number;

    static REASON_DIFFERENT_WORKSPACES: number;

    static REASON_SELF_CONNECTION: number;

    static REASON_SHADOW_PARENT: number;

    static REASON_TARGET_NULL: number;

    static REASON_WRONG_TYPE: number;

    static connectReciprocally_(a: any, b: any): void;

    static lastConnectionInRow(a: any, b: any): any;

    static singleConnection_(a: any, b: any): any;

}

export class ConnectionDB {
    constructor();

    addConnection(a: any, b: any): void;

    calculateIndexForYPos_(a: any): any;

    findIndexOfConnection_(a: any, b: any): any;

    getNeighbours(a: any, b: any): any;

    isInYRange_(a: any, b: any, c: any): any;

    removeConnection(a: any, b: any): void;

    searchForClosest(a: any, b: any, c: any): any;

    static init(): any;

}

export class Cursor {
    constructor();

    in(): any;

    next(): any;

    onBlocklyAction(a: any): any;

    out(): any;

    prev(): any;

}

export class Field {
    constructor(a: any, b: any, c: any);

    applyColour(): void;

    bindEvents_(): void;

    callValidator(a: any): any;

    classValidator(a: any): any;

    configure_(a: any): void;

    createBorderRect_(): void;

    createTextElement_(): void;

    dispose(): void;

    doClassValidation_(a: any): any;

    doValueInvalid_(a: any): void;

    doValueUpdate_(a: any): void;

    forceRerender(): void;

    fromXml(a: any): void;

    getAbsoluteXY_(): any;

    getClickTarget_(): any;

    getDisplayText_(): any;

    getFlipRtl(): any;

    getParentInput(): any;

    getScaledBBox(): any;

    getSize(): any;

    getSourceBlock(): any;

    getSvgRoot(): any;

    getText(): any;

    getValidator(): any;

    getValue(): any;

    init(): void;

    initModel(): void;

    initView(): void;

    isClickable(): any;

    isCurrentlyEditable(): any;

    isSerializable(): any;

    isTabNavigable(): any;

    isVisible(): any;

    markDirty(): void;

    onBlocklyAction(a: any): any;

    onMouseDown_(a: any): void;

    processValidation_(a: any, b: any): any;

    referencesVariables(): any;

    render_(): void;

    setCursorSvg(a: any): void;

    setMarkerSvg(a: any): void;

    setSourceBlock(a: any): void;

    setText(a: any): void;

    setTooltip(a: any): void;

    setValidator(a: any): void;

    setValue(a: any): void;

    setVisible(a: any): void;

    showEditor(a: any): void;

    toXml(a: any): any;

    updateEditable(): void;

    updateSize_(): void;

    updateWidth(): void;

    static NBSP: string;

}

export class FieldAngle {
    constructor(a: any, b: any, c: any);

    configure_(a: any): void;

    displayMouseOrKeyboardValue_(a: any): void;

    doClassValidation_(a: any): any;

    dropdownCreate_(): any;

    dropdownDispose_(): void;

    hide_(): void;

    initView(): void;

    onHtmlInputKeyDown_(a: any): void;

    onMouseMove_(a: any): void;

    render_(): void;

    showEditor_(a: any): void;

    updateGraph_(): void;

    wrapValue_(a: any): any;

    static CLOCKWISE: boolean;

    static HALF: number;

    static OFFSET: number;

    static RADIUS: number;

    static ROUND: number;

    static WRAP: number;

    static fromJson(a: any): any;

}

export class FieldCheckbox {
    constructor(a: any, b: any, c: any);

    configure_(a: any): void;

    convertValueToBool_(a: any): any;

    doClassValidation_(a: any): any;

    doValueUpdate_(a: any): void;

    getText(): any;

    getValue(): any;

    getValueBoolean(): any;

    initView(): void;

    setCheckCharacter(a: any): void;

    showEditor_(): void;

    static CHECK_CHAR: string;

    static fromJson(a: any): any;

}

export class FieldColour {
    constructor(a: any, b: any, c: any);

    applyColour(): void;

    configure_(a: any): void;

    doClassValidation_(a: any): any;

    doValueUpdate_(a: any): void;

    dropdownCreate_(): any;

    dropdownDispose_(): void;

    getHighlighted_(): any;

    getText(): any;

    initView(): void;

    moveHighlightBy_(a: any, b: any): void;

    onBlocklyAction(a: any): any;

    onClick_(a: any): void;

    onKeyDown_(a: any): void;

    onMouseEnter_(): void;

    onMouseLeave_(): void;

    onMouseMove_(a: any): void;

    setColours(a: any, b: any): any;

    setColumns(a: any): any;

    setHighlightedCell_(a: any, b: any): void;

    showEditor_(): void;

    static COLOURS: string[];

    static COLUMNS: number;

    static TITLES: any[];

    static fromJson(a: any): any;

}

export class FieldDropdown {
    constructor(a: any, b: any, c: any);

    applyColour(): void;

    createSVGArrow_(): void;

    createTextArrow_(): void;

    doClassValidation_(a: any): any;

    doValueUpdate_(a: any): void;

    dropdownCreate_(): any;

    dropdownDispose_(): void;

    getOptions(a: any): any;

    getText_(): any;

    handleMenuActionEvent_(a: any): void;

    initView(): void;

    isOptionListDynamic(): any;

    onBlocklyAction(a: any): any;

    onItemSelected_(a: any, b: any): void;

    positionSVGArrow_(a: any, b: any): any;

    renderSelectedImage_(a: any): void;

    renderSelectedText_(): void;

    render_(): void;

    shouldAddBorderRect_(): any;

    showEditor_(a: any): void;

    trimOptions_(): void;

    static ARROW_CHAR: string;

    static CHECKMARK_OVERHANG: number;

    static IMAGE_Y_OFFSET: number;

    static IMAGE_Y_PADDING: number;

    static MAX_MENU_HEIGHT_VH: number;

    static applyTrim_(a: any, b: any, c: any): any;

    static fromJson(a: any): any;

    static validateOptions_(a: any): void;

}

export class FieldImage {
    constructor(a: any, b: any, c: any, d: any, e: any, f: any, g: any);

    configure_(a: any): void;

    doClassValidation_(a: any): any;

    doValueUpdate_(a: any): void;

    getFlipRtl(): any;

    getText_(): any;

    initView(): void;

    setAlt(a: any): void;

    setOnClickHandler(a: any): void;

    showEditor_(): void;

    static Y_PADDING: number;

    static fromJson(a: any): any;

}

export class FieldLabel {
    constructor(a: any, b: any, c: any);

    configure_(a: any): void;

    doClassValidation_(a: any): any;

    initView(): void;

    setClass(a: any): void;

    static fromJson(a: any): any;

}

export class FieldLabelSerializable {
    constructor(a: any, b: any, c: any);

    static fromJson(a: any): any;

}

export class FieldMultilineInput {
    constructor(a: any, b: any, c: any);

    getDisplayText_(): any;

    initView(): void;

    onHtmlInputKeyDown_(a: any): void;

    render_(): void;

    resizeEditor_(): void;

    updateSize_(): void;

    widgetCreate_(): any;

    static LINE_HEIGHT: number;

    static fromJson(a: any): any;

}

export class FieldNumber {
    constructor(a: any, b: any, c: any, d: any, e: any, f: any);

    configure_(a: any): void;

    doClassValidation_(a: any): any;

    getMax(): any;

    getMin(): any;

    getPrecision(): any;

    setConstraints(a: any, b: any, c: any): void;

    setMax(a: any): void;

    setMaxInternal_(a: any): void;

    setMin(a: any): void;

    setMinInternal_(a: any): void;

    setPrecision(a: any): void;

    setPrecisionInternal_(a: any): void;

    widgetCreate_(): any;

    static fromJson(a: any): any;

}

export class FieldTextInput {
    constructor(a: any, b: any, c: any);

    applyColour(): void;

    bindInputEvents_(a: any): void;

    configure_(a: any): void;

    doClassValidation_(a: any): any;

    doValueInvalid_(a: any): void;

    doValueUpdate_(a: any): void;

    getEditorText_(a: any): any;

    getText_(): any;

    getValueFromEditorText_(a: any): any;

    initView(): void;

    isTabNavigable(): any;

    onHtmlInputChange_(a: any): void;

    onHtmlInputKeyDown_(a: any): void;

    render_(): void;

    resizeEditor_(): void;

    setEditorValue_(a: any): void;

    setSpellcheck(a: any): void;

    showEditor_(a: any, b: any): void;

    showInlineEditor_(a: any): void;

    showPromptEditor_(): void;

    unbindInputEvents_(): void;

    widgetCreate_(): any;

    widgetDispose_(): void;

    static BORDERRADIUS: number;

    static fromJson(a: any): any;

    static nonnegativeIntegerValidator(a: any): any;

    static numberValidator(a: any): any;

}

export class FieldVariable {
    constructor(a: any, b: any, c: any, d: any, e: any);

    configure_(a: any): void;

    doClassValidation_(a: any): any;

    doValueUpdate_(a: any): void;

    fromXml(a: any): void;

    getText(): any;

    getValidator(): any;

    getValue(): any;

    getVariable(): any;

    getVariableTypes_(): any;

    initModel(): void;

    onItemSelected_(a: any, b: any): void;

    referencesVariables(): any;

    refreshVariableName(): void;

    setSourceBlock(a: any): void;

    setTypes_(a: any, b: any): void;

    shouldAddBorderRect_(): any;

    toXml(a: any): any;

    typeIsAllowed_(a: any): any;

    static dropdownCreate(): any;

    static fromJson(a: any): any;

}

export class Flyout {
    constructor(a: any);

    addBlockListeners_(a: any, b: any, c: any): void;

    blockMouseDown_(a: any): any;

    clearOldBlocks_(): void;

    createBlock(a: any): any;

    createDom(a: any): any;

    createRect_(a: any, b: any, c: any, d: any, e: any): any;

    dispose(): void;

    filterForCapacity_(): void;

    getHeight(): any;

    getWidth(): any;

    getWorkspace(): any;

    hide(): void;

    init(a: any): void;

    initFlyoutButton_(a: any, b: any, c: any): void;

    isBlockCreatable_(a: any): any;

    isScrollable(): any;

    isVisible(): any;

    moveRectToBlock_(a: any, b: any): void;

    onBlocklyAction(a: any): any;

    onMouseDown_(a: any): void;

    placeNewBlock_(a: any): any;

    positionAt_(a: any, b: any, c: any, d: any): void;

    reflow(): void;

    setContainerVisible(a: any): void;

    setVisible(a: any): void;

    show(a: any): void;

    updateDisplay_(): void;

}

export class FlyoutButton {
    constructor(a: any, b: any, c: any, d: any);

    createDom(): any;

    dispose(): void;

    getPosition(): any;

    getTargetWorkspace(): any;

    moveTo(a: any, b: any): void;

    onMouseUp_(a: any): void;

    show(): void;

    updateTransform_(): void;

    static MARGIN: number;

}

export class FlyoutCursor {
    constructor();

    in(): any;

    next(): any;

    onBlocklyAction(a: any): any;

    out(): any;

    prev(): any;

}

export class FlyoutDragger {
    constructor(a: any);

    drag(a: any): void;

}

export class Generator {
    constructor(a: any);

    addLoopTrap(a: any, b: any): any;

    addReservedWords(a: any): void;

    allNestedComments(a: any): any;

    blockToCode(a: any, b: any): any;

    finish(a: any): any;

    init(a: any): void;

    injectId(a: any, b: any): any;

    prefixLines(a: any, b: any): any;

    provideFunction_(a: any, b: any): any;

    scrubNakedValue(a: any): any;

    scrub_(a: any, b: any, c: any): any;

    statementToCode(a: any, b: any): any;

    valueToCode(a: any, b: any, c: any): any;

    workspaceToCode(a: any): any;

    static NAME_TYPE: string;

}

export class Gesture {
    constructor(a: any, b: any);

    bindMouseEvents(a: any): void;

    bringBlockToFront_(): void;

    cancel(): void;

    dispose(): void;

    doBlockClick_(): void;

    doBubbleClick_(): void;

    doFieldClick_(): void;

    doStart(a: any): void;

    doWorkspaceClick_(a: any): void;

    getInsertionMarkers(): any;

    handleBlockStart(a: any, b: any): void;

    handleBubbleStart(a: any, b: any): void;

    handleFlyoutStart(a: any, b: any): void;

    handleMove(a: any): void;

    handleRightClick(a: any): void;

    handleUp(a: any): void;

    handleWsStart(a: any, b: any): void;

    hasStarted(): any;

    isBlockClick_(): any;

    isBubbleClick_(): any;

    isDragging(): any;

    isFieldClick_(): any;

    isWorkspaceClick_(): any;

    setStartBlock(a: any): void;

    setStartBubble(a: any): void;

    setStartField(a: any): void;

    setStartFlyout_(a: any): void;

    setStartWorkspace_(a: any): void;

    setTargetBlock_(a: any): void;

    startDraggingBlock_(): void;

    startDraggingBubble_(): void;

    updateDragDelta_(a: any): any;

    updateFromEvent_(a: any): void;

    updateIsDraggingBlock_(): any;

    updateIsDraggingBubble_(): any;

    updateIsDraggingFromFlyout_(): any;

    updateIsDraggingWorkspace_(): void;

    updateIsDragging_(): void;

    static inProgress(): any;

}

export class Grid {
    constructor(a: any, b: any);

    dispose(): void;

    getPatternId(): any;

    getSpacing(): any;

    moveTo(a: any, b: any): void;

    setLineAttributes_(a: any, b: any, c: any, d: any, e: any, f: any): void;

    shouldSnap(): any;

    update(a: any): void;

    static createDom(a: any, b: any, c: any): any;

}

export class HorizontalFlyout {
    constructor(a: any);

    getClientRect(): any;

    getMetrics_(): any;

    isDragTowardWorkspace(a: any): any;

    layout_(a: any, b: any): void;

    position(): void;

    reflowInternal_(): void;

    scrollToStart(): void;

    setBackgroundPath_(a: any, b: any): void;

    setMetrics_(a: any): void;

    wheel_(a: any): void;

}

export class Icon {
    constructor(a: any);

    applyColour(): void;

    computeIconLocation(): void;

    createIcon(): void;

    dispose(): void;

    getCorrectedSize(): any;

    getIconLocation(): any;

    iconClick_(a: any): void;

    isVisible(): any;

    setIconLocation(a: any): void;

    updateEditable(): void;

}

export class Input {
    constructor(a: any, b: any, c: any, d: any);

    appendField(a: any, b: any): any;

    dispose(): void;

    getSourceBlock(): any;

    init(): void;

    insertFieldAt(a: any, b: any, c: any): any;

    isVisible(): any;

    markDirty(): void;

    removeField(a: any): void;

    setAlign(a: any): any;

    setCheck(a: any): any;

    setVisible(a: any): any;

}

export class InsertionMarkerManager {
    constructor(a: any);

    applyConnections(): void;

    connectMarker_(): void;

    createMarkerBlock_(a: any): any;

    disconnectMarker_(): void;

    dispose(): void;

    getCandidate_(a: any): any;

    getInsertionMarkers(): any;

    getStartRadius_(): any;

    hidePreview_(): void;

    highlightBlock_(): void;

    initAvailableConnections_(): any;

    maybeHidePreview_(a: any): void;

    maybeShowPreview_(a: any): void;

    shouldDelete_(a: any, b: any): any;

    shouldReplace_(): any;

    shouldUpdatePreviews_(a: any, b: any): any;

    showPreview_(): void;

    unhighlightBlock_(): void;

    update(a: any, b: any): void;

    wouldConnectBlock(): any;

    wouldDeleteBlock(): any;

}

export class Marker {
    constructor();

    dispose(): void;

    draw(): void;

    getCurNode(): any;

    getDrawer(): any;

    hide(): void;

    setCurNode(a: any): void;

    setDrawer(a: any): void;

}

export class MarkerManager {
    constructor(a: any);

    dispose(): void;

    getCursor(): any;

    getMarker(a: any): any;

    registerMarker(a: any, b: any): void;

    setCursor(a: any): void;

    setCursorSvg(a: any): void;

    setMarkerSvg(a: any): void;

    unregisterMarker(a: any): void;

}

export class Menu {
    constructor();

    attachEvents_(): void;

    blur(): void;

    canHighlightItem(a: any): any;

    clearHighlighted(): void;

    createDom(): void;

    detachEvents_(): void;

    disposeInternal(): void;

    enterDocument(): void;

    exitDocument(): void;

    focus(): void;

    getHighlighted(): any;

    getMenuItem(a: any): any;

    handleClick_(a: any): void;

    handleKeyEvent(a: any): any;

    handleKeyEventInternal(a: any): any;

    handleMouseEnter_(a: any): void;

    handleMouseLeave_(a: any): void;

    handleMouseOver_(a: any): void;

    highlightHelper(a: any, b: any): any;

    highlightNext(): any;

    highlightPrevious(): any;

    registerChildId_(a: any): void;

    setHighlighted(a: any): void;

    setHighlightedIndex(a: any): void;

    setRole(a: any): void;

    unhighlightCurrent(): void;

}

export class MenuItem {
    constructor(a: any, b: any);

    createDom(): void;

    getCheckboxDom(): any;

    getContentDom(): any;

    getContentWrapperDom(): any;

    getValue(): any;

    handleClick(a: any): void;

    isEnabled(): any;

    onAction(a: any, b: any): void;

    performActionInternal(): void;

    setCheckable(a: any): void;

    setChecked(a: any): void;

    setContentInternal(a: any): void;

    setEnabled(a: any): void;

    setHighlighted(a: any): void;

    setRole(a: any): void;

    setValue(a: any): void;

}

export class Mutator {
    constructor(a: any);

    createEditor_(): any;

    dispose(): void;

    drawIcon_(a: any): void;

    getFlyoutMetrics_(): any;

    getWorkspace(): any;

    iconClick_(a: any): void;

    onBubbleMove_(): void;

    resizeBubble_(): void;

    setBlock(a: any): void;

    setVisible(a: any): void;

    updateBlockStyle(): void;

    updateEditable(): void;

    workspaceChanged_(a: any): void;

    static findParentWs(a: any): any;

    static reconnect(a: any, b: any, c: any): any;

}

export class Names {
    constructor(a: any, b: any);

    getDistinctName(a: any, b: any): any;

    getName(a: any, b: any): any;

    getNameForUserVariable_(a: any): any;

    reset(): void;

    safeName_(a: any): any;

    setVariableMap(a: any): void;

    static DEVELOPER_VARIABLE_TYPE: string;

    static equals(a: any, b: any): any;

}

export class RenderedConnection {
    constructor(a: any, b: any);

    bumpAwayFrom(a: any): void;

    closest(a: any, b: any): any;

    connect_(a: any): void;

    disconnectInternal_(a: any, b: any): void;

    dispose(): void;

    distanceFrom(a: any): any;

    getOffsetInBlock(): any;

    getSourceBlock(): any;

    highlight(): void;

    isConnectionAllowed(a: any, b: any): any;

    moveBy(a: any, b: any): void;

    moveTo(a: any, b: any): void;

    moveToOffset(a: any): void;

    neighbours(a: any): any;

    onCheckChanged_(): void;

    onFailedConnect(a: any): void;

    respawnShadow_(): void;

    setOffsetInBlock(a: any, b: any): void;

    setTracking(a: any): void;

    startTrackingAll(): any;

    stopTrackingAll(): void;

    targetBlock(): any;

    tighten(): void;

    unhighlight(): void;

    static TrackedState: {
        TRACKED: number;
        UNTRACKED: number;
        WILL_TRACK: number;
    };

}

export class Scrollbar {
    constructor(a: any, b: any, c: any, d: any);

    cleanUp_(): void;

    constrainHandle_(a: any): any;

    createDom_(a: any): void;

    dispose(): void;

    isVisible(): any;

    onMouseDownBar_(a: any): void;

    onMouseDownHandle_(a: any): void;

    onMouseMoveHandle_(a: any): void;

    onMouseUpHandle_(): void;

    onScroll_(): void;

    resize(a: any): void;

    resizeContentHorizontal(a: any): void;

    resizeContentVertical(a: any): void;

    resizeHorizontal_(a: any): void;

    resizeVertical_(a: any): void;

    resizeViewHorizontal(a: any): void;

    resizeViewVertical(a: any): void;

    set(a: any): void;

    setContainerVisible(a: any): void;

    setHandleLength_(a: any): void;

    setHandlePosition(a: any): void;

    setOrigin(a: any, b: any): void;

    setPosition_(a: any, b: any): void;

    setScrollViewSize_(a: any): void;

    setVisible(a: any): void;

    updateDisplay_(): void;

    static metricsAreEquivalent_(a: any, b: any): any;

    static scrollbarThickness: number;

}

export class ScrollbarPair {
    constructor(a: any);

    dispose(): void;

    getRatio_(a: any, b: any): any;

    resize(): void;

    set(a: any, b: any): void;

    setContainerVisible(a: any): void;

}

export class TabNavigateCursor {
    constructor();

    validNode_(a: any): any;

}

export class Theme {
    constructor(a: any, b: any, c: any, d: any);

    getComponentStyle(a: any): any;

    setComponentStyle(a: any, b: any): void;

}

export class ThemeManager {
    constructor(a: any, b: any);

    dispose(): void;

    getTheme(): any;

    setTheme(a: any): void;

    subscribe(a: any, b: any, c: any): void;

    subscribeWorkspace(a: any): void;

    unsubscribe(a: any): void;

    unsubscribeWorkspace(a: any): void;

}

export class Toolbox {
    constructor(a: any);

    addColour_(a: any): void;

    addStyle(a: any): void;

    clearSelection(): void;

    dispose(): void;

    getClientRect(): any;

    getFlyout(): any;

    getHeight(): any;

    getWidth(): any;

    handleAfterTreeSelected_(a: any, b: any): void;

    handleBeforeTreeSelected_(a: any): any;

    handleNodeSizeChanged_(): void;

    init(): void;

    onBlocklyAction(a: any): any;

    position(): void;

    refreshSelection(): void;

    removeStyle(a: any): void;

    renderTree(a: any): void;

    selectFirstCategory(): void;

    setColourFromStyle_(a: any, b: any, c: any): void;

    setColour_(a: any, b: any, c: any): void;

    syncTrees_(a: any, b: any, c: any): any;

    updateColourFromTheme(): void;

    updateColourFromTheme_(a: any): void;

    updateSelectedItemColour_(a: any): void;

    static TreeSeparator(a: any): void;

}

export class TouchGesture {
    constructor(a: any, b: any);

    bindMouseEvents(a: any): void;

    dispose(): void;

    doStart(a: any): void;

    getTouchPoint(a: any): any;

    handleMove(a: any): void;

    handlePinch_(a: any): void;

    handleStart(a: any): void;

    handleTouchEnd(a: any): void;

    handleTouchMove(a: any): void;

    handleTouchStart(a: any): void;

    handleUp(a: any): void;

    isMultiTouch(): any;

    static ZOOM_IN_MULTIPLIER: number;

    static ZOOM_OUT_MULTIPLIER: number;

}

export class Trashcan {
    constructor(a: any);

    animateLid_(): void;

    cleanBlockXML_(a: any): any;

    click(): void;

    close(): void;

    createDom(): any;

    dispose(): void;

    getClientRect(): any;

    init(a: any): any;

    mouseOut_(): void;

    mouseOver_(): void;

    onDelete_(a: any): void;

    position(): void;

    setLidAngle_(a: any): void;

    setOpen(a: any): void;

}

export class VariableMap {
    constructor(a: any);

    clear(): void;

    createVariable(a: any, b: any, c: any): any;

    deleteVariable(a: any): void;

    deleteVariableById(a: any): void;

    deleteVariableInternal(a: any, b: any): void;

    getAllVariableNames(): any;

    getAllVariables(): any;

    getVariable(a: any, b: any): any;

    getVariableById(a: any): any;

    getVariableTypes(a: any): any;

    getVariableUsesById(a: any): any;

    getVariablesOfType(a: any): any;

    renameVariable(a: any, b: any): void;

    renameVariableAndUses_(a: any, b: any, c: any): void;

    renameVariableById(a: any, b: any): void;

    renameVariableWithConflict_(a: any, b: any, c: any, d: any): void;

}

export class VariableModel {
    constructor(a: any, b: any, c: any, d: any);

    getId(): any;

    static compareByName(a: any, b: any): any;

}

export class VerticalFlyout {
    constructor(a: any);

    getClientRect(): any;

    getMetrics_(): any;

    isDragTowardWorkspace(a: any): any;

    layout_(a: any, b: any): void;

    position(): void;

    reflowInternal_(): void;

    scrollToStart(): void;

    setBackgroundPath_(a: any, b: any): void;

    setMetrics_(a: any): void;

    wheel_(a: any): void;

}

export class Warning {
    constructor(a: any);

    bodyFocus_(a: any): void;

    createBubble(): void;

    dispose(): void;

    disposeBubble(): void;

    drawIcon_(a: any): void;

    getText(): any;

    setText(a: any, b: any): void;

    setVisible(a: any): void;

    static textToDom_(a: any): any;

}

export class Workspace {
    constructor(a: any);

    addChangeListener(a: any): any;

    addTopBlock(a: any): void;

    addTopComment(a: any): void;

    addTypedBlock(a: any): void;

    allInputsFilled(a: any): any;

    clear(): void;

    clearUndo(): void;

    createPotentialVariableMap(): void;

    createVariable(a: any, b: any, c: any): any;

    deleteVariableById(a: any): void;

    deleteVariableInternal_(a: any, b: any): void;

    dispose(): void;

    fireChangeListener(a: any): void;

    getAllBlocks(a: any): any;

    getAllVariableNames(): any;

    getAllVariables(): any;

    getBlockById(a: any): any;

    getBlocksByType(a: any, b: any): any;

    getCommentById(a: any): any;

    getPotentialVariableMap(): any;

    getTopBlocks(a: any): any;

    getTopComments(a: any): any;

    getVariable(a: any, b: any): any;

    getVariableById(a: any): any;

    getVariableMap(): any;

    getVariableTypes(): any;

    getVariableUsesById(a: any): any;

    getVariablesOfType(a: any): any;

    getWidth(): any;

    hasBlockLimits(): any;

    isCapacityAvailable(a: any): any;

    newBlock(a: any, b: any): any;

    remainingCapacity(): any;

    remainingCapacityOfType(a: any): any;

    removeBlockById(a: any): void;

    removeChangeListener(a: any): void;

    removeTopBlock(a: any): void;

    removeTopComment(a: any): void;

    removeTypedBlock(a: any): void;

    renameVariableById(a: any, b: any): void;

    setBlockById(a: any, b: any): void;

    setVariableMap(a: any): void;

    sortObjects_(a: any, b: any): any;

    undo(a: any): void;

    variableIndexOf(a: any): any;

    static SCAN_ANGLE: number;

    static WorkspaceDB_: {
    };

    static getAll(): any;

    static getById(a: any): any;

}

export class WorkspaceAudio {
    constructor(a: any);

    dispose(): void;

    load(a: any, b: any): void;

    play(a: any, b: any): void;

    preload(): void;

}

export class WorkspaceDragSurfaceSvg {
    constructor(a: any);

    clearAndHide(a: any): void;

    createDom(): void;

    getSurfaceTranslation(): any;

    setContentsAndShow(a: any, b: any, c: any, d: any, e: any, f: any): void;

    translateSurface(a: any, b: any): void;

}

export class WorkspaceDragger {
    constructor(a: any);

    dispose(): void;

    drag(a: any): void;

    endDrag(a: any): void;

    startDrag(): void;

}

export class WorkspaceSvg {
    constructor(a: any, b: any, c: any);

    addFlyout(a: any): any;

    addTrashcan(): void;

    addZoomControls(): void;

    beginCanvasTransition(): void;

    cancelCurrentGesture(): void;

    centerOnBlock(a: any): void;

    cleanUp(): void;

    clear(): void;

    clearGesture(): void;

    createDom(a: any): any;

    createVariable(a: any, b: any, c: any): any;

    deleteVariableById(a: any): void;

    dispose(): void;

    endCanvasTransition(): void;

    getAudioManager(): any;

    getBlockById(a: any): any;

    getBlockCanvas(): any;

    getBlockDragSurface(): any;

    getBlocksBoundingBox(): any;

    getBubbleCanvas(): any;

    getButtonCallback(a: any): any;

    getCanvas(): any;

    getCursor(): any;

    getFlyout(a: any): any;

    getGesture(a: any): any;

    getGrid(): any;

    getInjectionDiv(): any;

    getInverseScreenCTM(): any;

    getMarker(a: any): any;

    getMarkerManager(): any;

    getOriginOffsetInPixels(): any;

    getParentSvg(): any;

    getRenderer(): any;

    getSvgXY(a: any): any;

    getTheme(): any;

    getThemeManager(): any;

    getToolbox(): any;

    getToolboxCategoryCallback(a: any): any;

    getTopBlocks(a: any): any;

    getWidth(): any;

    highlightBlock(a: any, b: any): void;

    isContentBounded(): any;

    isDeleteArea(a: any): any;

    isDraggable(): any;

    isDragging(): any;

    isMovable(): any;

    isVisible(): any;

    markFocused(): void;

    moveDrag(a: any): any;

    newBlock(a: any, b: any): any;

    onMouseDown_(a: any): void;

    onMouseWheel_(a: any): void;

    paste(a: any): void;

    pasteBlock_(a: any): void;

    pasteWorkspaceComment_(a: any): void;

    recordDeleteAreas(): void;

    refreshTheme(): any;

    refreshToolboxSelection(): void;

    registerButtonCallback(a: any, b: any): void;

    registerToolboxCategoryCallback(a: any, b: any): void;

    removeButtonCallback(a: any): void;

    removeToolboxCategoryCallback(a: any): void;

    renameVariableById(a: any, b: any): void;

    render(): void;

    resetDragSurface(): void;

    resize(): void;

    resizeContents(): void;

    scroll(a: any, b: any): void;

    scrollCenter(): void;

    setBrowserFocus(): void;

    setCursorSvg(a: any): void;

    setMarkerSvg(a: any): void;

    setResizeHandlerWrapper(a: any): void;

    setResizesEnabled(a: any): void;

    setScale(a: any): void;

    setTheme(a: any): void;

    setVisible(a: any): void;

    setupDragSurface(): void;

    showContextMenu(a: any): void;

    startDrag(a: any, b: any): void;

    traceOn(): void;

    translate(a: any, b: any): void;

    updateBlockStyles_(a: any): void;

    updateInverseScreenCTM(): void;

    updateScreenCalculationsIfScrolled(): void;

    updateScreenCalculations_(): void;

    updateToolbox(a: any): void;

    zoom(a: any, b: any, c: any): void;

    zoomCenter(a: any): void;

    zoomToFit(): void;

    static getContentDimensionsBounded_(a: any, b: any): any;

    static getContentDimensionsExact_(a: any): any;

    static getContentDimensions_(a: any, b: any): any;

    static getDimensionsPx_(a: any): any;

    static getTopLevelWorkspaceMetrics_(): any;

    static setTopLevelWorkspaceMetrics_(a: any): void;

}

export class ZoomControls {
    constructor(a: any);

    createDom(): any;

    createZoomInSvg_(a: any): void;

    createZoomOutSvg_(a: any): void;

    createZoomResetSvg_(a: any): void;

    dispose(): void;

    init(a: any): any;

    position(): void;

}

export const ALIGN_CENTRE: number;

export const ALIGN_LEFT: number;

export const ALIGN_RIGHT: number;

export const BUMP_DELAY: number;

export const BUMP_RANDOMNESS: number;

export const Blocks: {
    colour: {
    };
    colour_blend: {
        init: any;
    };
    colour_picker: {
        init: any;
    };
    colour_random: {
        init: any;
    };
    colour_rgb: {
        init: any;
    };
    controls_flow_statements: {
        init: any;
    };
    controls_for: {
        init: any;
    };
    controls_forEach: {
        init: any;
    };
    controls_if: {
        init: any;
    };
    controls_if_else: {
        init: any;
    };
    controls_if_elseif: {
        init: any;
    };
    controls_if_if: {
        init: any;
    };
    controls_ifelse: {
        init: any;
    };
    controls_repeat: {
        init: any;
    };
    controls_repeat_ext: {
        init: any;
    };
    controls_whileUntil: {
        init: any;
    };
    lists: {
    };
    lists_create_empty: {
        init: any;
    };
    lists_create_with: {
        compose: any;
        decompose: any;
        domToMutation: any;
        init: any;
        mutationToDom: any;
        saveConnections: any;
        updateShape_: any;
    };
    lists_create_with_container: {
        init: any;
    };
    lists_create_with_item: {
        init: any;
    };
    lists_getIndex: {
        domToMutation: any;
        init: any;
        mutationToDom: any;
        updateAt_: any;
        updateStatement_: any;
    };
    lists_getSublist: {
        domToMutation: any;
        init: any;
        mutationToDom: any;
        updateAt_: any;
    };
    lists_indexOf: {
        init: any;
    };
    lists_isEmpty: {
        init: any;
    };
    lists_length: {
        init: any;
    };
    lists_repeat: {
        init: any;
    };
    lists_reverse: {
        init: any;
    };
    lists_setIndex: {
        domToMutation: any;
        init: any;
        mutationToDom: any;
        updateAt_: any;
    };
    lists_sort: {
        init: any;
    };
    lists_split: {
        domToMutation: any;
        init: any;
        mutationToDom: any;
        updateType_: any;
    };
    logic: {
    };
    logic_boolean: {
        init: any;
    };
    logic_compare: {
        init: any;
    };
    logic_negate: {
        init: any;
    };
    logic_null: {
        init: any;
    };
    logic_operation: {
        init: any;
    };
    logic_ternary: {
        init: any;
    };
    loops: {
    };
    math: {
    };
    math_arithmetic: {
        init: any;
    };
    math_atan2: {
        init: any;
    };
    math_change: {
        init: any;
    };
    math_constant: {
        init: any;
    };
    math_constrain: {
        init: any;
    };
    math_modulo: {
        init: any;
    };
    math_number: {
        init: any;
    };
    math_number_property: {
        init: any;
    };
    math_on_list: {
        init: any;
    };
    math_random_float: {
        init: any;
    };
    math_random_int: {
        init: any;
    };
    math_round: {
        init: any;
    };
    math_single: {
        init: any;
    };
    math_trig: {
        init: any;
    };
    procedures: {
    };
    procedures_callnoreturn: {
        customContextMenu: any;
        defType_: string;
        domToMutation: any;
        getProcedureCall: any;
        getVarModels: any;
        init: any;
        mutationToDom: any;
        onchange: any;
        renameProcedure: any;
        setProcedureParameters_: any;
        updateShape_: any;
    };
    procedures_callreturn: {
        customContextMenu: any;
        defType_: string;
        domToMutation: any;
        getProcedureCall: any;
        getVarModels: any;
        init: any;
        mutationToDom: any;
        onchange: any;
        renameProcedure: any;
        setProcedureParameters_: any;
        updateShape_: any;
    };
    procedures_defnoreturn: {
        callType_: string;
        compose: any;
        customContextMenu: any;
        decompose: any;
        displayRenamedVar_: any;
        domToMutation: any;
        getProcedureDef: any;
        getVarModels: any;
        getVars: any;
        init: any;
        mutationToDom: any;
        renameVarById: any;
        setStatements_: any;
        updateParams_: any;
        updateVarName: any;
    };
    procedures_defreturn: {
        callType_: string;
        compose: any;
        customContextMenu: any;
        decompose: any;
        displayRenamedVar_: any;
        domToMutation: any;
        getProcedureDef: any;
        getVarModels: any;
        getVars: any;
        init: any;
        mutationToDom: any;
        renameVarById: any;
        setStatements_: any;
        updateParams_: any;
        updateVarName: any;
    };
    procedures_ifreturn: {
        FUNCTION_TYPES: string[];
        domToMutation: any;
        init: any;
        mutationToDom: any;
        onchange: any;
    };
    procedures_mutatorarg: {
        deleteIntermediateVars_: any;
        init: any;
        validator_: any;
    };
    procedures_mutatorcontainer: {
        init: any;
    };
    text: {
        init: any;
    };
    text_append: {
        init: any;
    };
    text_changeCase: {
        init: any;
    };
    text_charAt: {
        init: any;
    };
    text_count: {
        init: any;
    };
    text_create_join_container: {
        init: any;
    };
    text_create_join_item: {
        init: any;
    };
    text_getSubstring: {
        domToMutation: any;
        init: any;
        mutationToDom: any;
        updateAt_: any;
    };
    text_indexOf: {
        init: any;
    };
    text_isEmpty: {
        init: any;
    };
    text_join: {
        init: any;
    };
    text_length: {
        init: any;
    };
    text_multiline: {
        init: any;
    };
    text_print: {
        init: any;
    };
    text_prompt: {
        domToMutation: any;
        init: any;
        mutationToDom: any;
        updateType_: any;
    };
    text_prompt_ext: {
        domToMutation: any;
        init: any;
        mutationToDom: any;
        updateType_: any;
    };
    text_replace: {
        init: any;
    };
    text_reverse: {
        init: any;
    };
    text_trim: {
        init: any;
    };
    texts: {
    };
    variables: {
    };
    variables_get: {
        init: any;
    };
    variables_get_dynamic: {
        init: any;
    };
    variables_set: {
        init: any;
    };
    variables_set_dynamic: {
        init: any;
    };
};

export const COLLAPSE_CHARS: number;

export const CONNECTING_SNAP_RADIUS: number;

export const CURRENT_CONNECTION_PREFERENCE: number;

export const Constants: {
    Colour: {
        HUE: number;
    };
    Lists: {
        HUE: number;
    };
    Logic: {
        CONTROLS_IF_MUTATOR_MIXIN: {
            compose: any;
            decompose: any;
            domToMutation: any;
            elseCount_: number;
            elseifCount_: number;
            mutationToDom: any;
            rebuildShape_: any;
            reconnectChildBlocks_: any;
            saveConnections: any;
            suppressPrefixSuffix: boolean;
            updateShape_: any;
        };
        CONTROLS_IF_TOOLTIP_EXTENSION: any;
        HUE: number;
        LOGIC_COMPARE_EXTENSION: any;
        LOGIC_COMPARE_ONCHANGE_MIXIN: {
            onchange: any;
        };
        LOGIC_TERNARY_ONCHANGE_MIXIN: {
            onchange: any;
            prevParentConnection_: any;
        };
        TOOLTIPS_BY_OP: {
            AND: string;
            EQ: string;
            GT: string;
            GTE: string;
            LT: string;
            LTE: string;
            NEQ: string;
            OR: string;
        };
    };
    Loops: {
        BREAK_CONTINUE_TOOLTIPS: {
            BREAK: string;
            CONTINUE: string;
        };
        CONTROL_FLOW_IN_LOOP_CHECK_MIXIN: {
            LOOP_TYPES: string[];
            getSurroundLoop: any;
            onchange: any;
            suppressPrefixSuffix: boolean;
        };
        CUSTOM_CONTEXT_MENU_CREATE_VARIABLES_GET_MIXIN: {
            customContextMenu: any;
        };
        HUE: number;
        WHILE_UNTIL_TOOLTIPS: {
            UNTIL: string;
            WHILE: string;
        };
    };
    Math: {
        HUE: number;
        IS_DIVISIBLEBY_MUTATOR_MIXIN: {
            domToMutation: any;
            mutationToDom: any;
            updateShape_: any;
        };
        IS_DIVISIBLE_MUTATOR_EXTENSION: any;
        LIST_MODES_MUTATOR_EXTENSION: any;
        LIST_MODES_MUTATOR_MIXIN: {
            domToMutation: any;
            mutationToDom: any;
            updateType_: any;
        };
        TOOLTIPS_BY_OP: {
            ABS: string;
            ACOS: string;
            ADD: string;
            ASIN: string;
            ATAN: string;
            AVERAGE: string;
            COS: string;
            DIVIDE: string;
            EXP: string;
            LN: string;
            LOG10: string;
            MAX: string;
            MEDIAN: string;
            MIN: string;
            MINUS: string;
            MODE: string;
            MULTIPLY: string;
            NEG: string;
            POW10: string;
            POWER: string;
            RANDOM: string;
            ROOT: string;
            SIN: string;
            STD_DEV: string;
            SUM: string;
            TAN: string;
        };
    };
    Text: {
        HUE: number;
        QUOTE_IMAGE_MIXIN: {
            QUOTE_IMAGE_HEIGHT: number;
            QUOTE_IMAGE_LEFT_DATAURI: string;
            QUOTE_IMAGE_RIGHT_DATAURI: string;
            QUOTE_IMAGE_WIDTH: number;
            newQuote_: any;
            quoteField_: any;
        };
        TEXT_CHARAT_EXTENSION: any;
        TEXT_CHARAT_MUTATOR_MIXIN: {
            domToMutation: any;
            mutationToDom: any;
            updateAt_: any;
        };
        TEXT_INDEXOF_TOOLTIP_EXTENSION: any;
        TEXT_JOIN_EXTENSION: any;
        TEXT_JOIN_MUTATOR_MIXIN: {
            compose: any;
            decompose: any;
            domToMutation: any;
            mutationToDom: any;
            saveConnections: any;
            updateShape_: any;
        };
        TEXT_QUOTES_EXTENSION: any;
    };
    Variables: {
        CUSTOM_CONTEXT_MENU_VARIABLE_GETTER_SETTER_MIXIN: {
            customContextMenu: any;
        };
        DELETE_OPTION_CALLBACK_FACTORY: any;
        HUE: number;
        RENAME_OPTION_CALLBACK_FACTORY: any;
    };
    VariablesDynamic: {
        CUSTOM_CONTEXT_MENU_VARIABLE_GETTER_SETTER_MIXIN: {
            customContextMenu: any;
            onchange: any;
        };
        DELETE_OPTION_CALLBACK_FACTORY: any;
        HUE: number;
        RENAME_OPTION_CALLBACK_FACTORY: any;
    };
};

export const DELETE_AREA_NONE: any;

export const DELETE_AREA_TOOLBOX: number;

export const DELETE_AREA_TRASH: number;

export const DELETE_VARIABLE_ID: string;

export const DRAG_BEGIN: number;

export const DRAG_FREE: number;

export const DRAG_NONE: number;

export const DRAG_RADIUS: number;

export const DRAG_STACK: boolean;

export const DRAG_STICKY: number;

export const DUMMY_INPUT: number;

export const FLYOUT_DRAG_RADIUS: number;

export const HSV_SATURATION: number;

export const HSV_VALUE: number;

export const INPUT_VALUE: number;

export const INSERTION_MARKER_COLOUR: string;

export const LINE_MODE_MULTIPLIER: number;

export const LONGPRESS: number;

export const Msg: {
    ADD_COMMENT: string;
    CANNOT_DELETE_VARIABLE_PROCEDURE: string;
    CHANGE_VALUE_TITLE: string;
    CLEAN_UP: string;
    COLLAPSED_WARNINGS_WARNING: string;
    COLLAPSE_ALL: string;
    COLLAPSE_BLOCK: string;
    COLOUR_BLEND_COLOUR1: string;
    COLOUR_BLEND_COLOUR2: string;
    COLOUR_BLEND_HELPURL: string;
    COLOUR_BLEND_RATIO: string;
    COLOUR_BLEND_TITLE: string;
    COLOUR_BLEND_TOOLTIP: string;
    COLOUR_HUE: string;
    COLOUR_PICKER_HELPURL: string;
    COLOUR_PICKER_TOOLTIP: string;
    COLOUR_RANDOM_HELPURL: string;
    COLOUR_RANDOM_TITLE: string;
    COLOUR_RANDOM_TOOLTIP: string;
    COLOUR_RGB_BLUE: string;
    COLOUR_RGB_GREEN: string;
    COLOUR_RGB_HELPURL: string;
    COLOUR_RGB_RED: string;
    COLOUR_RGB_TITLE: string;
    COLOUR_RGB_TOOLTIP: string;
    CONTROLS_FLOW_STATEMENTS_HELPURL: string;
    CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK: string;
    CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE: string;
    CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK: string;
    CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE: string;
    CONTROLS_FLOW_STATEMENTS_WARNING: string;
    CONTROLS_FOREACH_HELPURL: string;
    CONTROLS_FOREACH_INPUT_DO: string;
    CONTROLS_FOREACH_TITLE: string;
    CONTROLS_FOREACH_TOOLTIP: string;
    CONTROLS_FOR_HELPURL: string;
    CONTROLS_FOR_INPUT_DO: string;
    CONTROLS_FOR_TITLE: string;
    CONTROLS_FOR_TOOLTIP: string;
    CONTROLS_IF_ELSEIF_TITLE_ELSEIF: string;
    CONTROLS_IF_ELSEIF_TOOLTIP: string;
    CONTROLS_IF_ELSE_TITLE_ELSE: string;
    CONTROLS_IF_ELSE_TOOLTIP: string;
    CONTROLS_IF_HELPURL: string;
    CONTROLS_IF_IF_TITLE_IF: string;
    CONTROLS_IF_IF_TOOLTIP: string;
    CONTROLS_IF_MSG_ELSE: string;
    CONTROLS_IF_MSG_ELSEIF: string;
    CONTROLS_IF_MSG_IF: string;
    CONTROLS_IF_MSG_THEN: string;
    CONTROLS_IF_TOOLTIP_1: string;
    CONTROLS_IF_TOOLTIP_2: string;
    CONTROLS_IF_TOOLTIP_3: string;
    CONTROLS_IF_TOOLTIP_4: string;
    CONTROLS_REPEAT_HELPURL: string;
    CONTROLS_REPEAT_INPUT_DO: string;
    CONTROLS_REPEAT_TITLE: string;
    CONTROLS_REPEAT_TOOLTIP: string;
    CONTROLS_WHILEUNTIL_HELPURL: string;
    CONTROLS_WHILEUNTIL_INPUT_DO: string;
    CONTROLS_WHILEUNTIL_OPERATOR_UNTIL: string;
    CONTROLS_WHILEUNTIL_OPERATOR_WHILE: string;
    CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL: string;
    CONTROLS_WHILEUNTIL_TOOLTIP_WHILE: string;
    DELETE_ALL_BLOCKS: string;
    DELETE_BLOCK: string;
    DELETE_VARIABLE: string;
    DELETE_VARIABLE_CONFIRMATION: string;
    DELETE_X_BLOCKS: string;
    DISABLE_BLOCK: string;
    DUPLICATE_BLOCK: string;
    DUPLICATE_COMMENT: string;
    ENABLE_BLOCK: string;
    EXPAND_ALL: string;
    EXPAND_BLOCK: string;
    EXTERNAL_INPUTS: string;
    HELP: string;
    INLINE_INPUTS: string;
    IOS_CANCEL: string;
    IOS_ERROR: string;
    IOS_OK: string;
    IOS_PROCEDURES_ADD_INPUT: string;
    IOS_PROCEDURES_ALLOW_STATEMENTS: string;
    IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR: string;
    IOS_PROCEDURES_INPUTS: string;
    IOS_VARIABLES_ADD_BUTTON: string;
    IOS_VARIABLES_ADD_VARIABLE: string;
    IOS_VARIABLES_DELETE_BUTTON: string;
    IOS_VARIABLES_EMPTY_NAME_ERROR: string;
    IOS_VARIABLES_RENAME_BUTTON: string;
    IOS_VARIABLES_VARIABLE_NAME: string;
    LISTS_CREATE_EMPTY_HELPURL: string;
    LISTS_CREATE_EMPTY_TITLE: string;
    LISTS_CREATE_EMPTY_TOOLTIP: string;
    LISTS_CREATE_WITH_CONTAINER_TITLE_ADD: string;
    LISTS_CREATE_WITH_CONTAINER_TOOLTIP: string;
    LISTS_CREATE_WITH_HELPURL: string;
    LISTS_CREATE_WITH_INPUT_WITH: string;
    LISTS_CREATE_WITH_ITEM_TITLE: string;
    LISTS_CREATE_WITH_ITEM_TOOLTIP: string;
    LISTS_CREATE_WITH_TOOLTIP: string;
    LISTS_GET_INDEX_FIRST: string;
    LISTS_GET_INDEX_FROM_END: string;
    LISTS_GET_INDEX_FROM_START: string;
    LISTS_GET_INDEX_GET: string;
    LISTS_GET_INDEX_GET_REMOVE: string;
    LISTS_GET_INDEX_HELPURL: string;
    LISTS_GET_INDEX_INPUT_IN_LIST: string;
    LISTS_GET_INDEX_LAST: string;
    LISTS_GET_INDEX_RANDOM: string;
    LISTS_GET_INDEX_REMOVE: string;
    LISTS_GET_INDEX_TAIL: string;
    LISTS_GET_INDEX_TOOLTIP_GET_FIRST: string;
    LISTS_GET_INDEX_TOOLTIP_GET_FROM: string;
    LISTS_GET_INDEX_TOOLTIP_GET_LAST: string;
    LISTS_GET_INDEX_TOOLTIP_GET_RANDOM: string;
    LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST: string;
    LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM: string;
    LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST: string;
    LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM: string;
    LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST: string;
    LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM: string;
    LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST: string;
    LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM: string;
    LISTS_GET_SUBLIST_END_FROM_END: string;
    LISTS_GET_SUBLIST_END_FROM_START: string;
    LISTS_GET_SUBLIST_END_LAST: string;
    LISTS_GET_SUBLIST_HELPURL: string;
    LISTS_GET_SUBLIST_INPUT_IN_LIST: string;
    LISTS_GET_SUBLIST_START_FIRST: string;
    LISTS_GET_SUBLIST_START_FROM_END: string;
    LISTS_GET_SUBLIST_START_FROM_START: string;
    LISTS_GET_SUBLIST_TAIL: string;
    LISTS_GET_SUBLIST_TOOLTIP: string;
    LISTS_HUE: string;
    LISTS_INDEX_FROM_END_TOOLTIP: string;
    LISTS_INDEX_FROM_START_TOOLTIP: string;
    LISTS_INDEX_OF_FIRST: string;
    LISTS_INDEX_OF_HELPURL: string;
    LISTS_INDEX_OF_INPUT_IN_LIST: string;
    LISTS_INDEX_OF_LAST: string;
    LISTS_INDEX_OF_TOOLTIP: string;
    LISTS_INLIST: string;
    LISTS_ISEMPTY_HELPURL: string;
    LISTS_ISEMPTY_TITLE: string;
    LISTS_ISEMPTY_TOOLTIP: string;
    LISTS_LENGTH_HELPURL: string;
    LISTS_LENGTH_TITLE: string;
    LISTS_LENGTH_TOOLTIP: string;
    LISTS_REPEAT_HELPURL: string;
    LISTS_REPEAT_TITLE: string;
    LISTS_REPEAT_TOOLTIP: string;
    LISTS_REVERSE_HELPURL: string;
    LISTS_REVERSE_MESSAGE0: string;
    LISTS_REVERSE_TOOLTIP: string;
    LISTS_SET_INDEX_HELPURL: string;
    LISTS_SET_INDEX_INPUT_IN_LIST: string;
    LISTS_SET_INDEX_INPUT_TO: string;
    LISTS_SET_INDEX_INSERT: string;
    LISTS_SET_INDEX_SET: string;
    LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST: string;
    LISTS_SET_INDEX_TOOLTIP_INSERT_FROM: string;
    LISTS_SET_INDEX_TOOLTIP_INSERT_LAST: string;
    LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM: string;
    LISTS_SET_INDEX_TOOLTIP_SET_FIRST: string;
    LISTS_SET_INDEX_TOOLTIP_SET_FROM: string;
    LISTS_SET_INDEX_TOOLTIP_SET_LAST: string;
    LISTS_SET_INDEX_TOOLTIP_SET_RANDOM: string;
    LISTS_SORT_HELPURL: string;
    LISTS_SORT_ORDER_ASCENDING: string;
    LISTS_SORT_ORDER_DESCENDING: string;
    LISTS_SORT_TITLE: string;
    LISTS_SORT_TOOLTIP: string;
    LISTS_SORT_TYPE_IGNORECASE: string;
    LISTS_SORT_TYPE_NUMERIC: string;
    LISTS_SORT_TYPE_TEXT: string;
    LISTS_SPLIT_HELPURL: string;
    LISTS_SPLIT_LIST_FROM_TEXT: string;
    LISTS_SPLIT_TEXT_FROM_LIST: string;
    LISTS_SPLIT_TOOLTIP_JOIN: string;
    LISTS_SPLIT_TOOLTIP_SPLIT: string;
    LISTS_SPLIT_WITH_DELIMITER: string;
    LOGIC_BOOLEAN_FALSE: string;
    LOGIC_BOOLEAN_HELPURL: string;
    LOGIC_BOOLEAN_TOOLTIP: string;
    LOGIC_BOOLEAN_TRUE: string;
    LOGIC_COMPARE_HELPURL: string;
    LOGIC_COMPARE_TOOLTIP_EQ: string;
    LOGIC_COMPARE_TOOLTIP_GT: string;
    LOGIC_COMPARE_TOOLTIP_GTE: string;
    LOGIC_COMPARE_TOOLTIP_LT: string;
    LOGIC_COMPARE_TOOLTIP_LTE: string;
    LOGIC_COMPARE_TOOLTIP_NEQ: string;
    LOGIC_HUE: string;
    LOGIC_NEGATE_HELPURL: string;
    LOGIC_NEGATE_TITLE: string;
    LOGIC_NEGATE_TOOLTIP: string;
    LOGIC_NULL: string;
    LOGIC_NULL_HELPURL: string;
    LOGIC_NULL_TOOLTIP: string;
    LOGIC_OPERATION_AND: string;
    LOGIC_OPERATION_HELPURL: string;
    LOGIC_OPERATION_OR: string;
    LOGIC_OPERATION_TOOLTIP_AND: string;
    LOGIC_OPERATION_TOOLTIP_OR: string;
    LOGIC_TERNARY_CONDITION: string;
    LOGIC_TERNARY_HELPURL: string;
    LOGIC_TERNARY_IF_FALSE: string;
    LOGIC_TERNARY_IF_TRUE: string;
    LOGIC_TERNARY_TOOLTIP: string;
    LOOPS_HUE: string;
    MATH_ADDITION_SYMBOL: string;
    MATH_ARITHMETIC_HELPURL: string;
    MATH_ARITHMETIC_TOOLTIP_ADD: string;
    MATH_ARITHMETIC_TOOLTIP_DIVIDE: string;
    MATH_ARITHMETIC_TOOLTIP_MINUS: string;
    MATH_ARITHMETIC_TOOLTIP_MULTIPLY: string;
    MATH_ARITHMETIC_TOOLTIP_POWER: string;
    MATH_ATAN2_HELPURL: string;
    MATH_ATAN2_TITLE: string;
    MATH_ATAN2_TOOLTIP: string;
    MATH_CHANGE_HELPURL: string;
    MATH_CHANGE_TITLE: string;
    MATH_CHANGE_TITLE_ITEM: string;
    MATH_CHANGE_TOOLTIP: string;
    MATH_CONSTANT_HELPURL: string;
    MATH_CONSTANT_TOOLTIP: string;
    MATH_CONSTRAIN_HELPURL: string;
    MATH_CONSTRAIN_TITLE: string;
    MATH_CONSTRAIN_TOOLTIP: string;
    MATH_DIVISION_SYMBOL: string;
    MATH_HUE: string;
    MATH_IS_DIVISIBLE_BY: string;
    MATH_IS_EVEN: string;
    MATH_IS_NEGATIVE: string;
    MATH_IS_ODD: string;
    MATH_IS_POSITIVE: string;
    MATH_IS_PRIME: string;
    MATH_IS_TOOLTIP: string;
    MATH_IS_WHOLE: string;
    MATH_MODULO_HELPURL: string;
    MATH_MODULO_TITLE: string;
    MATH_MODULO_TOOLTIP: string;
    MATH_MULTIPLICATION_SYMBOL: string;
    MATH_NUMBER_HELPURL: string;
    MATH_NUMBER_TOOLTIP: string;
    MATH_ONLIST_HELPURL: string;
    MATH_ONLIST_OPERATOR_AVERAGE: string;
    MATH_ONLIST_OPERATOR_MAX: string;
    MATH_ONLIST_OPERATOR_MEDIAN: string;
    MATH_ONLIST_OPERATOR_MIN: string;
    MATH_ONLIST_OPERATOR_MODE: string;
    MATH_ONLIST_OPERATOR_RANDOM: string;
    MATH_ONLIST_OPERATOR_STD_DEV: string;
    MATH_ONLIST_OPERATOR_SUM: string;
    MATH_ONLIST_TOOLTIP_AVERAGE: string;
    MATH_ONLIST_TOOLTIP_MAX: string;
    MATH_ONLIST_TOOLTIP_MEDIAN: string;
    MATH_ONLIST_TOOLTIP_MIN: string;
    MATH_ONLIST_TOOLTIP_MODE: string;
    MATH_ONLIST_TOOLTIP_RANDOM: string;
    MATH_ONLIST_TOOLTIP_STD_DEV: string;
    MATH_ONLIST_TOOLTIP_SUM: string;
    MATH_POWER_SYMBOL: string;
    MATH_RANDOM_FLOAT_HELPURL: string;
    MATH_RANDOM_FLOAT_TITLE_RANDOM: string;
    MATH_RANDOM_FLOAT_TOOLTIP: string;
    MATH_RANDOM_INT_HELPURL: string;
    MATH_RANDOM_INT_TITLE: string;
    MATH_RANDOM_INT_TOOLTIP: string;
    MATH_ROUND_HELPURL: string;
    MATH_ROUND_OPERATOR_ROUND: string;
    MATH_ROUND_OPERATOR_ROUNDDOWN: string;
    MATH_ROUND_OPERATOR_ROUNDUP: string;
    MATH_ROUND_TOOLTIP: string;
    MATH_SINGLE_HELPURL: string;
    MATH_SINGLE_OP_ABSOLUTE: string;
    MATH_SINGLE_OP_ROOT: string;
    MATH_SINGLE_TOOLTIP_ABS: string;
    MATH_SINGLE_TOOLTIP_EXP: string;
    MATH_SINGLE_TOOLTIP_LN: string;
    MATH_SINGLE_TOOLTIP_LOG10: string;
    MATH_SINGLE_TOOLTIP_NEG: string;
    MATH_SINGLE_TOOLTIP_POW10: string;
    MATH_SINGLE_TOOLTIP_ROOT: string;
    MATH_SUBTRACTION_SYMBOL: string;
    MATH_TRIG_ACOS: string;
    MATH_TRIG_ASIN: string;
    MATH_TRIG_ATAN: string;
    MATH_TRIG_COS: string;
    MATH_TRIG_HELPURL: string;
    MATH_TRIG_SIN: string;
    MATH_TRIG_TAN: string;
    MATH_TRIG_TOOLTIP_ACOS: string;
    MATH_TRIG_TOOLTIP_ASIN: string;
    MATH_TRIG_TOOLTIP_ATAN: string;
    MATH_TRIG_TOOLTIP_COS: string;
    MATH_TRIG_TOOLTIP_SIN: string;
    MATH_TRIG_TOOLTIP_TAN: string;
    NEW_COLOUR_VARIABLE: string;
    NEW_NUMBER_VARIABLE: string;
    NEW_STRING_VARIABLE: string;
    NEW_VARIABLE: string;
    NEW_VARIABLE_TITLE: string;
    NEW_VARIABLE_TYPE_TITLE: string;
    ORDINAL_NUMBER_SUFFIX: string;
    PROCEDURES_ALLOW_STATEMENTS: string;
    PROCEDURES_BEFORE_PARAMS: string;
    PROCEDURES_CALLNORETURN_HELPURL: string;
    PROCEDURES_CALLNORETURN_TOOLTIP: string;
    PROCEDURES_CALLRETURN_HELPURL: string;
    PROCEDURES_CALLRETURN_TOOLTIP: string;
    PROCEDURES_CALL_BEFORE_PARAMS: string;
    PROCEDURES_CREATE_DO: string;
    PROCEDURES_DEFNORETURN_COMMENT: string;
    PROCEDURES_DEFNORETURN_DO: string;
    PROCEDURES_DEFNORETURN_HELPURL: string;
    PROCEDURES_DEFNORETURN_PROCEDURE: string;
    PROCEDURES_DEFNORETURN_TITLE: string;
    PROCEDURES_DEFNORETURN_TOOLTIP: string;
    PROCEDURES_DEFRETURN_COMMENT: string;
    PROCEDURES_DEFRETURN_DO: string;
    PROCEDURES_DEFRETURN_HELPURL: string;
    PROCEDURES_DEFRETURN_PROCEDURE: string;
    PROCEDURES_DEFRETURN_RETURN: string;
    PROCEDURES_DEFRETURN_TITLE: string;
    PROCEDURES_DEFRETURN_TOOLTIP: string;
    PROCEDURES_DEF_DUPLICATE_WARNING: string;
    PROCEDURES_HIGHLIGHT_DEF: string;
    PROCEDURES_HUE: string;
    PROCEDURES_IFRETURN_HELPURL: string;
    PROCEDURES_IFRETURN_TOOLTIP: string;
    PROCEDURES_IFRETURN_WARNING: string;
    PROCEDURES_MUTATORARG_TITLE: string;
    PROCEDURES_MUTATORARG_TOOLTIP: string;
    PROCEDURES_MUTATORCONTAINER_TITLE: string;
    PROCEDURES_MUTATORCONTAINER_TOOLTIP: string;
    REDO: string;
    REMOVE_COMMENT: string;
    RENAME_VARIABLE: string;
    RENAME_VARIABLE_TITLE: string;
    TEXTS_HUE: string;
    TEXT_APPEND_HELPURL: string;
    TEXT_APPEND_TITLE: string;
    TEXT_APPEND_TOOLTIP: string;
    TEXT_APPEND_VARIABLE: string;
    TEXT_CHANGECASE_HELPURL: string;
    TEXT_CHANGECASE_OPERATOR_LOWERCASE: string;
    TEXT_CHANGECASE_OPERATOR_TITLECASE: string;
    TEXT_CHANGECASE_OPERATOR_UPPERCASE: string;
    TEXT_CHANGECASE_TOOLTIP: string;
    TEXT_CHARAT_FIRST: string;
    TEXT_CHARAT_FROM_END: string;
    TEXT_CHARAT_FROM_START: string;
    TEXT_CHARAT_HELPURL: string;
    TEXT_CHARAT_LAST: string;
    TEXT_CHARAT_RANDOM: string;
    TEXT_CHARAT_TAIL: string;
    TEXT_CHARAT_TITLE: string;
    TEXT_CHARAT_TOOLTIP: string;
    TEXT_COUNT_HELPURL: string;
    TEXT_COUNT_MESSAGE0: string;
    TEXT_COUNT_TOOLTIP: string;
    TEXT_CREATE_JOIN_ITEM_TITLE_ITEM: string;
    TEXT_CREATE_JOIN_ITEM_TOOLTIP: string;
    TEXT_CREATE_JOIN_TITLE_JOIN: string;
    TEXT_CREATE_JOIN_TOOLTIP: string;
    TEXT_GET_SUBSTRING_END_FROM_END: string;
    TEXT_GET_SUBSTRING_END_FROM_START: string;
    TEXT_GET_SUBSTRING_END_LAST: string;
    TEXT_GET_SUBSTRING_HELPURL: string;
    TEXT_GET_SUBSTRING_INPUT_IN_TEXT: string;
    TEXT_GET_SUBSTRING_START_FIRST: string;
    TEXT_GET_SUBSTRING_START_FROM_END: string;
    TEXT_GET_SUBSTRING_START_FROM_START: string;
    TEXT_GET_SUBSTRING_TAIL: string;
    TEXT_GET_SUBSTRING_TOOLTIP: string;
    TEXT_INDEXOF_HELPURL: string;
    TEXT_INDEXOF_OPERATOR_FIRST: string;
    TEXT_INDEXOF_OPERATOR_LAST: string;
    TEXT_INDEXOF_TITLE: string;
    TEXT_INDEXOF_TOOLTIP: string;
    TEXT_ISEMPTY_HELPURL: string;
    TEXT_ISEMPTY_TITLE: string;
    TEXT_ISEMPTY_TOOLTIP: string;
    TEXT_JOIN_HELPURL: string;
    TEXT_JOIN_TITLE_CREATEWITH: string;
    TEXT_JOIN_TOOLTIP: string;
    TEXT_LENGTH_HELPURL: string;
    TEXT_LENGTH_TITLE: string;
    TEXT_LENGTH_TOOLTIP: string;
    TEXT_PRINT_HELPURL: string;
    TEXT_PRINT_TITLE: string;
    TEXT_PRINT_TOOLTIP: string;
    TEXT_PROMPT_HELPURL: string;
    TEXT_PROMPT_TOOLTIP_NUMBER: string;
    TEXT_PROMPT_TOOLTIP_TEXT: string;
    TEXT_PROMPT_TYPE_NUMBER: string;
    TEXT_PROMPT_TYPE_TEXT: string;
    TEXT_REPLACE_HELPURL: string;
    TEXT_REPLACE_MESSAGE0: string;
    TEXT_REPLACE_TOOLTIP: string;
    TEXT_REVERSE_HELPURL: string;
    TEXT_REVERSE_MESSAGE0: string;
    TEXT_REVERSE_TOOLTIP: string;
    TEXT_TEXT_HELPURL: string;
    TEXT_TEXT_TOOLTIP: string;
    TEXT_TRIM_HELPURL: string;
    TEXT_TRIM_OPERATOR_BOTH: string;
    TEXT_TRIM_OPERATOR_LEFT: string;
    TEXT_TRIM_OPERATOR_RIGHT: string;
    TEXT_TRIM_TOOLTIP: string;
    TODAY: string;
    UNDO: string;
    UNNAMED_KEY: string;
    VARIABLES_DEFAULT_NAME: string;
    VARIABLES_DYNAMIC_HUE: string;
    VARIABLES_GET_CREATE_SET: string;
    VARIABLES_GET_HELPURL: string;
    VARIABLES_GET_TOOLTIP: string;
    VARIABLES_HUE: string;
    VARIABLES_SET: string;
    VARIABLES_SET_CREATE_GET: string;
    VARIABLES_SET_HELPURL: string;
    VARIABLES_SET_TOOLTIP: string;
    VARIABLE_ALREADY_EXISTS: string;
    VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE: string;
    WORKSPACE_ARIA_LABEL: string;
    WORKSPACE_COMMENT_DEFAULT_TEXT: string;
};

export const NEXT_STATEMENT: number;

export const OPPOSITE_TYPE: any[];

export const OUTPUT_VALUE: number;

export const PAGE_MODE_MULTIPLIER: number;

export const PREVIOUS_STATEMENT: number;

export const PROCEDURE_CATEGORY_NAME: string;

export const RENAME_VARIABLE_ID: string;

export const SNAP_RADIUS: number;

export const SOUND_LIMIT: number;

export const SPRITE: {
    height: number;
    url: string;
    width: number;
};

export const TOOLBOX_AT_BOTTOM: number;

export const TOOLBOX_AT_LEFT: number;

export const TOOLBOX_AT_RIGHT: number;

export const TOOLBOX_AT_TOP: number;

export const Themes: {
    Classic: {
        blockStyles: {
            colour_blocks: {
                colourPrimary: string;
            };
            hat_blocks: {
                colourPrimary: string;
                hat: string;
            };
            list_blocks: {
                colourPrimary: string;
            };
            logic_blocks: {
                colourPrimary: string;
            };
            loop_blocks: {
                colourPrimary: string;
            };
            math_blocks: {
                colourPrimary: string;
            };
            procedure_blocks: {
                colourPrimary: string;
            };
            text_blocks: {
                colourPrimary: string;
            };
            variable_blocks: {
                colourPrimary: string;
            };
            variable_dynamic_blocks: {
                colourPrimary: string;
            };
        };
        categoryStyles: {
            colour_category: {
                colour: string;
            };
            list_category: {
                colour: string;
            };
            logic_category: {
                colour: string;
            };
            loop_category: {
                colour: string;
            };
            math_category: {
                colour: string;
            };
            procedure_category: {
                colour: string;
            };
            text_category: {
                colour: string;
            };
            variable_category: {
                colour: string;
            };
            variable_dynamic_category: {
                colour: string;
            };
        };
        componentStyles_: {
        };
        getComponentStyle: any;
        name: string;
        setComponentStyle: any;
    };
    Dark: {
        blockStyles: {
            colour_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            hat_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
                hat: string;
            };
            list_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            logic_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            loop_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            math_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            procedure_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            text_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            variable_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            variable_dynamic_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
        };
        categoryStyles: {
            colour_category: {
                colour: string;
            };
            list_category: {
                colour: string;
            };
            logic_category: {
                colour: string;
            };
            loop_category: {
                colour: string;
            };
            math_category: {
                colour: string;
            };
            procedure_category: {
                colour: string;
            };
            text_category: {
                colour: string;
            };
            variable_category: {
                colour: string;
            };
            variable_dynamic_category: {
                colour: string;
            };
        };
        componentStyles_: {
            flyoutBackgroundColour: string;
            flyoutForegroundColour: string;
            flyoutOpacity: number;
            scrollbarColour: string;
            scrollbarOpacity: number;
            toolboxBackgroundColour: string;
            toolboxForegroundColour: string;
            workspaceBackgroundColour: string;
        };
        getComponentStyle: any;
        name: string;
        setComponentStyle: any;
    };
    Deuteranopia: {
        blockStyles: {
            colour_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            list_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            logic_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            loop_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            math_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            procedure_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            text_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            variable_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            variable_dynamic_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
        };
        categoryStyles: {
            colour_category: {
                colour: string;
            };
            list_category: {
                colour: string;
            };
            logic_category: {
                colour: string;
            };
            loop_category: {
                colour: string;
            };
            math_category: {
                colour: string;
            };
            procedure_category: {
                colour: string;
            };
            text_category: {
                colour: string;
            };
            variable_category: {
                colour: string;
            };
            variable_dynamic_category: {
                colour: string;
            };
        };
        componentStyles_: {
        };
        getComponentStyle: any;
        name: string;
        setComponentStyle: any;
    };
    HighContrast: {
        blockStyles: {
            colour_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            hat_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
                hat: string;
            };
            list_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            logic_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            loop_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            math_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            procedure_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            text_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            variable_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            variable_dynamic_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
        };
        categoryStyles: {
            colour_category: {
                colour: string;
            };
            list_category: {
                colour: string;
            };
            logic_category: {
                colour: string;
            };
            loop_category: {
                colour: string;
            };
            math_category: {
                colour: string;
            };
            procedure_category: {
                colour: string;
            };
            text_category: {
                colour: string;
            };
            variable_category: {
                colour: string;
            };
            variable_dynamic_category: {
                colour: string;
            };
        };
        componentStyles_: {
        };
        getComponentStyle: any;
        name: string;
        setComponentStyle: any;
    };
    Tritanopia: {
        blockStyles: {
            colour_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            list_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            logic_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            loop_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            math_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            procedure_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            text_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            variable_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
            variable_dynamic_blocks: {
                colourPrimary: string;
                colourSecondary: string;
                colourTertiary: string;
            };
        };
        categoryStyles: {
            colour_category: {
                colour: string;
            };
            list_category: {
                colour: string;
            };
            logic_category: {
                colour: string;
            };
            loop_category: {
                colour: string;
            };
            math_category: {
                colour: string;
            };
            procedure_category: {
                colour: string;
            };
            text_category: {
                colour: string;
            };
            variable_category: {
                colour: string;
            };
            variable_dynamic_category: {
                colour: string;
            };
        };
        componentStyles_: {
        };
        getComponentStyle: any;
        name: string;
        setComponentStyle: any;
    };
};

export const VARIABLE_CATEGORY_NAME: string;

export const VARIABLE_DYNAMIC_CATEGORY_NAME: string;

export const VERSION: string;

export const cache3dSupported_: any;

export const clipboardSource_: any;

export const clipboardTypeCounts_: any;

export const clipboardXml_: any;

export const constants: {
};

export const draggingConnections: any[];

export const longPid_: number;

export const mainWorkspace: any;

export const requires: {
};

export const selected: any;

export const user: {
    keyMap: {
        checkModifiers_: any;
        createDefaultKeyMap: any;
        createSerializedKey: any;
        getActionByKeyCode: any;
        getKeyByAction: any;
        getKeyMap: any;
        map_: {
        };
        modifierKeys: {
            ALT: string;
            CONTROL: string;
            META: string;
            SHIFT: string;
        };
        serializeKeyEvent: any;
        setActionForKey: any;
        setKeyMap: any;
    };
};

export function Action(a: any, b: any): void;

export function BlocklyOptions(): void;

export function DropDownDiv(): void;

export function Options(a: any): void;

export function alert(a: any, b: any): void;

export function bindEventWithChecks_(a: any, b: any, c: any, d: any, e: any, f: any): any;

export function bindEvent_(a: any, b: any, c: any, d: any): any;

export function checkBlockColourConstant_(a: any, b: any, c: any): void;

export function checkBlockColourConstants(): void;

export function confirm(a: any, b: any): void;

export function copy_(a: any): void;

export function createDom_(a: any, b: any): any;

export function createMainWorkspace_(a: any, b: any, c: any, d: any): any;

export function defineBlocksWithJsonArray(a: any): void;

export function duplicate(a: any): void;

export function getMainWorkspace(): any;

export function hideChaff(a: any): void;

export function hueToHex(a: any): any;

export function init_(a: any): void;

export function inject(a: any, b: any): any;

export function isNumber(a: any): any;

export function jsonInitFactory_(a: any): any;

export function longStart(a: any, b: any): void;

export function longStop_(): void;

export function onContextMenu_(a: any): void;

export function onKeyDown(a: any): void;

export function prompt(a: any, b: any, c: any): void;

export function resizeSvgContents(a: any): void;

export function setLocale(locale: any): void;

export function svgResize(a: any): void;

export function svgSize(a: any): any;

export function unbindEvent_(a: any): any;

export namespace BasicCursor {
    namespace superClass_ {
        function dispose(): void;

        function draw(): void;

        function getCurNode(): any;

        function getDrawer(): any;

        function hide(): void;

        function next(): any;

        function onBlocklyAction(a: any): any;

        function out(): any;

        function prev(): any;

        function setCurNode(a: any): void;

        function setDrawer(a: any): void;

    }

}

export namespace BlockSvg {
    namespace superClass_ {
        const colour_: string;

        const data: any;

        const disposed: boolean;

        const hue_: any;

        const styleName_: any;

        function allInputsFilled(a: any): any;

        function appendDummyInput(a: any): any;

        function appendInput_(a: any, b: any): any;

        function appendStatementInput(a: any): any;

        function appendValueInput(a: any): any;

        function bumpNeighbours(): void;

        function dispose(a: any): void;

        function getChildren(a: any): any;

        function getColour(): any;

        function getCommentText(): any;

        function getConnections_(a: any): any;

        function getDescendants(a: any): any;

        function getField(a: any): any;

        function getFieldValue(a: any): any;

        function getFirstStatementConnection(): any;

        function getHue(): any;

        function getInheritedDisabled(): any;

        function getInput(a: any): any;

        function getInputTargetBlock(a: any): any;

        function getInputWithBlock(a: any): any;

        function getInputsInline(): any;

        function getMatchingConnection(a: any, b: any): any;

        function getNextBlock(): any;

        function getOnlyValueConnection_(): any;

        function getOutputShape(): any;

        function getParent(): any;

        function getPreviousBlock(): any;

        function getRelativeToSurfaceXY(): any;

        function getRootBlock(): any;

        function getStyleName(): any;

        function getSurroundParent(): any;

        function getTopStackBlock(): any;

        function getVarModels(): any;

        function getVars(): any;

        function initModel(): void;

        function interpolate_(a: any, b: any, c: any, d: any): void;

        function isCollapsed(): any;

        function isDeletable(): any;

        function isDisposed(): any;

        function isDuplicatable(): any;

        function isEditable(): any;

        function isEnabled(): any;

        function isInsertionMarker(): any;

        function isMovable(): any;

        function isShadow(): any;

        function jsonInit(a: any): void;

        function jsonInitColour_(a: any, b: any): void;

        function jsonInitStyle_(a: any, b: any): void;

        function lastConnectionInStack(): any;

        function makeConnection_(a: any): any;

        function mixin(a: any, b: any): void;

        function moveBy(a: any, b: any): void;

        function moveInputBefore(a: any, b: any): void;

        function moveNumberedInputBefore(a: any, b: any): void;

        function removeInput(a: any, b: any): void;

        function renameVarById(a: any, b: any): void;

        function setCollapsed(a: any): void;

        function setColour(a: any): void;

        function setCommentText(a: any): void;

        function setDeletable(a: any): void;

        function setDisabled(a: any): void;

        function setEditable(a: any): void;

        function setEnabled(a: any): void;

        function setFieldValue(a: any, b: any): void;

        function setHelpUrl(a: any): void;

        function setInputsInline(a: any): void;

        function setInsertionMarker(a: any): void;

        function setMovable(a: any): void;

        function setMutator(a: any): void;

        function setNextStatement(a: any, b: any): void;

        function setOnChange(a: any): void;

        function setOutput(a: any, b: any): void;

        function setOutputShape(a: any): void;

        function setParent(a: any): void;

        function setPreviousStatement(a: any, b: any): void;

        function setShadow(a: any): void;

        function setStyle(a: any): void;

        function setTooltip(a: any): void;

        function setWarningText(a: any, b: any): void;

        function toDevString(): any;

        function toString(a: any, b: any): any;

        function unplug(a: any): void;

        function unplugFromRow_(a: any): void;

        function unplugFromStack_(a: any): void;

        function updateVarName(a: any): void;

    }

}

export namespace Comment {
    namespace superClass_ {
        const SIZE: number;

        const bubble_: any;

        const collapseHidden: boolean;

        const iconXY_: any;

        function applyColour(): void;

        function computeIconLocation(): void;

        function createIcon(): void;

        function dispose(): void;

        function getCorrectedSize(): any;

        function getIconLocation(): any;

        function iconClick_(a: any): void;

        function isVisible(): any;

        function setIconLocation(a: any): void;

        function updateEditable(): void;

    }

}

export namespace ContextMenu {
    const currentBlock: any;

    const eventWrapper_: any;

    function blockCommentOption(a: any): any;

    function blockDeleteOption(a: any): any;

    function blockDuplicateOption(a: any): any;

    function blockHelpOption(a: any): any;

    function callbackFactory(a: any, b: any): any;

    function commentDeleteOption(a: any): any;

    function commentDuplicateOption(a: any): any;

    function createWidget_(a: any): void;

    function hide(): void;

    function populate_(a: any, b: any): any;

    function position_(a: any, b: any, c: any): void;

    function show(a: any, b: any, c: any): void;

    function workspaceCommentOption(a: any, b: any): any;

}

export namespace Css {
    const CONTENT: string[];

    const injected_: boolean;

    function inject(a: any, b: any): void;

    function register(a: any): void;

    function setCursor(a: any): void;

}

export namespace Cursor {
    namespace superClass_ {
        function dispose(): void;

        function draw(): void;

        function getCurNode(): any;

        function getDrawer(): any;

        function hide(): void;

        function setCurNode(a: any): void;

        function setDrawer(a: any): void;

    }

}

export namespace Dart {
    const COMMENT_WRAP: number;

    const FUNCTION_NAME_PLACEHOLDER_: string;

    const FUNCTION_NAME_PLACEHOLDER_REGEXP_: RegExp;

    const INDENT: string;

    const INFINITE_LOOP_TRAP: any;

    const ORDER_ADDITIVE: number;

    const ORDER_ASSIGNMENT: number;

    const ORDER_ATOMIC: number;

    const ORDER_BITWISE_AND: number;

    const ORDER_BITWISE_OR: number;

    const ORDER_BITWISE_XOR: number;

    const ORDER_CASCADE: number;

    const ORDER_CONDITIONAL: number;

    const ORDER_EQUALITY: number;

    const ORDER_IF_NULL: number;

    const ORDER_LOGICAL_AND: number;

    const ORDER_LOGICAL_OR: number;

    const ORDER_MULTIPLICATIVE: number;

    const ORDER_NONE: number;

    const ORDER_OVERRIDES: any[];

    const ORDER_RELATIONAL: number;

    const ORDER_SHIFT: number;

    const ORDER_UNARY_POSTFIX: number;

    const ORDER_UNARY_PREFIX: number;

    const RESERVED_WORDS_: string;

    const STATEMENT_PREFIX: any;

    const STATEMENT_SUFFIX: any;

    const colour: {
    };

    const lists: {
    };

    const logic: {
    };

    const loops: {
    };

    const math: {
    };

    const name_: string;

    const procedures: {
    };

    const texts: {
    };

    const variables: {
    };

    const variablesDynamic: {
    };

    function addLoopTrap(a: any, b: any): any;

    function addReservedWords(a: any): void;

    function allNestedComments(a: any): any;

    function blockToCode(a: any, b: any): any;

    function colour_blend(a: any): any;

    function colour_picker(a: any): any;

    function colour_random(a: any): any;

    function colour_rgb(a: any): any;

    function controls_flow_statements(a: any): any;

    function controls_for(a: any): any;

    function controls_forEach(a: any): any;

    function controls_if(a: any): any;

    function controls_ifelse(a: any): any;

    function controls_repeat(a: any): any;

    function controls_repeat_ext(a: any): any;

    function controls_whileUntil(a: any): any;

    function finish(a: any): any;

    function getAdjusted(a: any, b: any, c: any, d: any, e: any): any;

    function init(a: any): void;

    function injectId(a: any, b: any): any;

    function lists_create_empty(a: any): any;

    function lists_create_with(a: any): any;

    function lists_getIndex(a: any): any;

    function lists_getSublist(a: any): any;

    function lists_indexOf(a: any): any;

    function lists_isEmpty(a: any): any;

    function lists_length(a: any): any;

    function lists_repeat(a: any): any;

    function lists_reverse(a: any): any;

    function lists_setIndex(a: any): any;

    function lists_sort(a: any): any;

    function lists_split(a: any): any;

    function logic_boolean(a: any): any;

    function logic_compare(a: any): any;

    function logic_negate(a: any): any;

    function logic_null(a: any): any;

    function logic_operation(a: any): any;

    function logic_ternary(a: any): any;

    function math_arithmetic(a: any): any;

    function math_atan2(a: any): any;

    function math_change(a: any): any;

    function math_constant(a: any): any;

    function math_constrain(a: any): any;

    function math_modulo(a: any): any;

    function math_number(a: any): any;

    function math_number_property(a: any): any;

    function math_on_list(a: any): any;

    function math_random_float(a: any): any;

    function math_random_int(a: any): any;

    function math_round(a: any): any;

    function math_single(a: any): any;

    function math_trig(a: any): any;

    function multiline_quote_(a: any): any;

    function prefixLines(a: any, b: any): any;

    function procedures_callnoreturn(a: any): any;

    function procedures_callreturn(a: any): any;

    function procedures_defnoreturn(a: any): any;

    function procedures_defreturn(a: any): any;

    function procedures_ifreturn(a: any): any;

    function provideFunction_(a: any, b: any): any;

    function quote_(a: any): any;

    function scrubNakedValue(a: any): any;

    function scrub_(a: any, b: any, c: any): any;

    function statementToCode(a: any, b: any): any;

    function text(a: any): any;

    function text_append(a: any): any;

    function text_changeCase(a: any): any;

    function text_charAt(a: any): any;

    function text_count(a: any): any;

    function text_getSubstring(a: any): any;

    function text_indexOf(a: any): any;

    function text_isEmpty(a: any): any;

    function text_join(a: any): any;

    function text_length(a: any): any;

    function text_multiline(a: any): any;

    function text_print(a: any): any;

    function text_prompt(a: any): any;

    function text_prompt_ext(a: any): any;

    function text_replace(a: any): any;

    function text_reverse(a: any): any;

    function text_trim(a: any): any;

    function valueToCode(a: any, b: any, c: any): any;

    function variables_get(a: any): any;

    function variables_get_dynamic(a: any): any;

    function variables_set(a: any): any;

    function variables_set_dynamic(a: any): any;

    function workspaceToCode(a: any): any;

}

export namespace DropDownDiv {
    const ANIMATION_TIME: number;

    const ARROW_HORIZONTAL_PADDING: number;

    const ARROW_SIZE: number;

    const BORDER_SIZE: number;

    const PADDING_Y: number;

    const animateOutTimer_: any;

    const boundsElement_: any;

    const onHide_: any;

    const owner_: any;

    const positionToField_: any;

    const rendererClassName_: any;

    const themeClassName_: any;

    function clearContent(): void;

    function createDom(): void;

    function getBoundsInfo_(): any;

    function getContentDiv(): any;

    function getPositionAboveMetrics_(a: any, b: any, c: any, d: any): any;

    function getPositionBelowMetrics_(a: any, b: any, c: any, d: any): any;

    function getPositionMetrics_(a: any, b: any, c: any, d: any): any;

    function getPositionTopOfPageMetrics_(a: any, b: any, c: any): any;

    function getPositionX(a: any, b: any, c: any, d: any): any;

    function getScaledBboxOfBlock_(a: any): any;

    function getScaledBboxOfField_(a: any): any;

    function hide(): void;

    function hideIfOwner(a: any, b: any): any;

    function hideWithoutAnimation(): void;

    function isVisible(): any;

    function positionInternal_(a: any, b: any, c: any, d: any): any;

    function repositionForWindowResize(): void;

    function setBoundsElement(a: any): void;

    function setColour(a: any, b: any): void;

    function show(a: any, b: any, c: any, d: any, e: any, f: any, g: any): any;

    function showPositionedByBlock(a: any, b: any, c: any, d: any): any;

    function showPositionedByField(a: any, b: any, c: any): any;

    function showPositionedByRect_(a: any, b: any, c: any, d: any): any;

}

export namespace Events {
    class Abstract {
        constructor();

        fromJson(a: any): void;

        getEventWorkspace_(): any;

        isNull(): any;

        run(a: any): void;

        toJson(): any;

    }

    class BlockBase {
        constructor(a: any);

        fromJson(a: any): void;

        toJson(): any;

    }

    class BlockChange {
        constructor(a: any, b: any, c: any, d: any, e: any);

        fromJson(a: any): void;

        isNull(): any;

        run(a: any): void;

        toJson(): any;

    }

    class BlockCreate {
        constructor(a: any);

        fromJson(a: any): void;

        run(a: any): void;

        toJson(): any;

    }

    class BlockDelete {
        constructor(a: any);

        fromJson(a: any): void;

        run(a: any): void;

        toJson(): any;

    }

    class BlockMove {
        constructor(a: any);

        currentLocation_(): any;

        fromJson(a: any): void;

        isNull(): any;

        recordNew(): void;

        run(a: any): void;

        toJson(): any;

    }

    class Change {
        constructor(a: any, b: any, c: any, d: any, e: any);

        fromJson(a: any): void;

        isNull(): any;

        run(a: any): void;

        toJson(): any;

    }

    class CommentBase {
        constructor(a: any);

        fromJson(a: any): void;

        toJson(): any;

    }

    class CommentChange {
        constructor(a: any, b: any, c: any);

        fromJson(a: any): void;

        isNull(): any;

        run(a: any): void;

        toJson(): any;

    }

    class CommentCreate {
        constructor(a: any);

        fromJson(a: any): void;

        run(a: any): void;

        toJson(): any;

    }

    class CommentDelete {
        constructor(a: any);

        fromJson(a: any): void;

        run(a: any): void;

        toJson(): any;

    }

    class CommentMove {
        constructor(a: any);

        fromJson(a: any): void;

        isNull(): any;

        recordNew(): void;

        run(a: any): void;

        setOldCoordinate(a: any): void;

        toJson(): any;

    }

    class Create {
        constructor(a: any);

        fromJson(a: any): void;

        run(a: any): void;

        toJson(): any;

    }

    class Delete {
        constructor(a: any);

        fromJson(a: any): void;

        run(a: any): void;

        toJson(): any;

    }

    class FinishedLoading {
        constructor(a: any);

        fromJson(a: any): void;

        toJson(): any;

    }

    class Move {
        constructor(a: any);

        currentLocation_(): any;

        fromJson(a: any): void;

        isNull(): any;

        recordNew(): void;

        run(a: any): void;

        toJson(): any;

    }

    class Ui {
        constructor(a: any, b: any, c: any, d: any);

        fromJson(a: any): void;

        toJson(): any;

    }

    class VarBase {
        constructor(a: any);

        fromJson(a: any): void;

        toJson(): any;

    }

    class VarCreate {
        constructor(a: any);

        fromJson(a: any): void;

        run(a: any): void;

        toJson(): any;

    }

    class VarDelete {
        constructor(a: any);

        fromJson(a: any): void;

        run(a: any): void;

        toJson(): any;

    }

    class VarRename {
        constructor(a: any, b: any);

        fromJson(a: any): void;

        run(a: any): void;

        toJson(): any;

    }

    const BLOCK_CHANGE: string;

    const BLOCK_CREATE: string;

    const BLOCK_DELETE: string;

    const BLOCK_MOVE: string;

    const BUMP_EVENTS: string[];

    const CHANGE: string;

    const COMMENT_CHANGE: string;

    const COMMENT_CREATE: string;

    const COMMENT_DELETE: string;

    const COMMENT_MOVE: string;

    const CREATE: string;

    const DELETE: string;

    const FINISHED_LOADING: string;

    const FIRE_QUEUE_: any[];

    const MOVE: string;

    const UI: string;

    const VAR_CREATE: string;

    const VAR_DELETE: string;

    const VAR_RENAME: string;

    const disabled_: number;

    const group_: string;

    const recordUndo: boolean;

    function CommentCreateDeleteHelper(a: any, b: any): void;

    function clearPendingUndo(): void;

    function disable(): void;

    function disableOrphans(a: any): void;

    function enable(): void;

    function filter(a: any, b: any): any;

    function fire(a: any): void;

    function fireNow_(): void;

    function fromJson(a: any, b: any): any;

    function getDescendantIds(a: any): any;

    function getGroup(): any;

    function isEnabled(): any;

    function setGroup(a: any): void;

    namespace BlockBase {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace BlockChange {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace BlockCreate {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace BlockDelete {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace BlockMove {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace Change {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace CommentBase {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace CommentChange {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace CommentCreate {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace CommentDelete {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace CommentMove {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace Create {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace Delete {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace FinishedLoading {
        namespace superClass_ {
            const type: string;

            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace Move {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace Ui {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace VarBase {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace VarCreate {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace VarDelete {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

    namespace VarRename {
        namespace superClass_ {
            function fromJson(a: any): void;

            function getEventWorkspace_(): any;

            function isNull(): any;

            function run(a: any): void;

            function toJson(): any;

        }

    }

}

export namespace Extensions {
    function apply(a: any, b: any, c: any): void;

    function buildTooltipForDropdown(a: any, b: any): any;

    function buildTooltipWithFieldText(a: any, b: any): any;

    function checkBlockHasMutatorProperties_(a: any, b: any): void;

    function checkDropdownOptionsInTable_(a: any, b: any, c: any): void;

    function checkHasFunction_(a: any, b: any, c: any): void;

    function checkMutatorDialog_(a: any, b: any): any;

    function checkNoMutatorProperties_(a: any, b: any): void;

    function extensionParentTooltip_(): any;

    function getMutatorProperties_(a: any): any;

    function mutatorPropertiesMatch_(a: any, b: any): any;

    function register(a: any, b: any): void;

    function registerMixin(a: any, b: any): void;

    function registerMutator(a: any, b: any, c: any, d: any): void;

    function unregister(a: any): void;

    namespace ALL_ {
        function contextMenu_newGetVariableBlock(): void;

        function contextMenu_variableDynamicSetterGetter(): void;

        function contextMenu_variableSetterGetter(): void;

        function controls_flow_in_loop_check(): void;

        function controls_flow_tooltip(): any;

        function controls_forEach_tooltip(): any;

        function controls_for_tooltip(): any;

        function controls_if_mutator(): void;

        function controls_if_tooltip(): any;

        function controls_whileUntil_tooltip(): any;

        function logic_compare(): void;

        function logic_op_tooltip(): any;

        function logic_ternary(): void;

        function math_change_tooltip(): any;

        function math_is_divisibleby_mutator(): void;

        function math_modes_of_list_mutator(): void;

        function math_op_tooltip(): any;

        function parent_tooltip_when_inline(): any;

        function text_append_tooltip(): any;

        function text_charAt_mutator(): void;

        function text_indexOf_tooltip(): any;

        function text_join_mutator(): void;

        function text_quotes(): void;

    }

}

export namespace FieldAngle {
    namespace superClass_ {
        const CURSOR: string;

        const EDITABLE: boolean;

        const SERIALIZABLE: boolean;

        const clickTarget_: any;

        const disposed: boolean;

        const isDirty_: boolean;

        const maxDisplayLength: number;

        const name: any;

        const sourceBlock_: any;

        const visible_: boolean;

        function applyColour(): void;

        function bindEvents_(): void;

        function bindInputEvents_(a: any): void;

        function callValidator(a: any): any;

        function classValidator(a: any): any;

        function configure_(a: any): void;

        function createBorderRect_(): void;

        function createTextElement_(): void;

        function dispose(): void;

        function doClassValidation_(a: any): any;

        function doValueInvalid_(a: any): void;

        function doValueUpdate_(a: any): void;

        function forceRerender(): void;

        function fromXml(a: any): void;

        function getAbsoluteXY_(): any;

        function getClickTarget_(): any;

        function getDisplayText_(): any;

        function getEditorText_(a: any): any;

        function getFlipRtl(): any;

        function getParentInput(): any;

        function getScaledBBox(): any;

        function getSize(): any;

        function getSourceBlock(): any;

        function getSvgRoot(): any;

        function getText(): any;

        function getText_(): any;

        function getValidator(): any;

        function getValue(): any;

        function getValueFromEditorText_(a: any): any;

        function init(): void;

        function initModel(): void;

        function initView(): void;

        function isClickable(): any;

        function isCurrentlyEditable(): any;

        function isSerializable(): any;

        function isTabNavigable(): any;

        function isVisible(): any;

        function markDirty(): void;

        function onBlocklyAction(a: any): any;

        function onHtmlInputChange_(a: any): void;

        function onHtmlInputKeyDown_(a: any): void;

        function onMouseDown_(a: any): void;

        function processValidation_(a: any, b: any): any;

        function referencesVariables(): any;

        function render_(): void;

        function resizeEditor_(): void;

        function setCursorSvg(a: any): void;

        function setEditorValue_(a: any): void;

        function setMarkerSvg(a: any): void;

        function setSourceBlock(a: any): void;

        function setSpellcheck(a: any): void;

        function setText(a: any): void;

        function setTooltip(a: any): void;

        function setValidator(a: any): void;

        function setValue(a: any): void;

        function setVisible(a: any): void;

        function showEditor(a: any): void;

        function showEditor_(a: any, b: any): void;

        function showInlineEditor_(a: any): void;

        function showPromptEditor_(): void;

        function toXml(a: any): any;

        function unbindInputEvents_(): void;

        function updateEditable(): void;

        function updateSize_(): void;

        function updateWidth(): void;

        function widgetCreate_(): any;

        function widgetDispose_(): void;

    }

}

export namespace FieldCheckbox {
    namespace superClass_ {
        const EDITABLE: boolean;

        const SERIALIZABLE: boolean;

        const clickTarget_: any;

        const disposed: boolean;

        const isDirty_: boolean;

        const maxDisplayLength: number;

        const name: any;

        const sourceBlock_: any;

        const visible_: boolean;

        function applyColour(): void;

        function bindEvents_(): void;

        function callValidator(a: any): any;

        function classValidator(a: any): any;

        function configure_(a: any): void;

        function createBorderRect_(): void;

        function createTextElement_(): void;

        function dispose(): void;

        function doClassValidation_(a: any): any;

        function doValueInvalid_(a: any): void;

        function doValueUpdate_(a: any): void;

        function forceRerender(): void;

        function fromXml(a: any): void;

        function getAbsoluteXY_(): any;

        function getClickTarget_(): any;

        function getDisplayText_(): any;

        function getFlipRtl(): any;

        function getParentInput(): any;

        function getScaledBBox(): any;

        function getSize(): any;

        function getSourceBlock(): any;

        function getSvgRoot(): any;

        function getText(): any;

        function getValidator(): any;

        function getValue(): any;

        function init(): void;

        function initModel(): void;

        function initView(): void;

        function isClickable(): any;

        function isCurrentlyEditable(): any;

        function isSerializable(): any;

        function isTabNavigable(): any;

        function isVisible(): any;

        function markDirty(): void;

        function onBlocklyAction(a: any): any;

        function onMouseDown_(a: any): void;

        function processValidation_(a: any, b: any): any;

        function referencesVariables(): any;

        function render_(): void;

        function setCursorSvg(a: any): void;

        function setMarkerSvg(a: any): void;

        function setSourceBlock(a: any): void;

        function setText(a: any): void;

        function setTooltip(a: any): void;

        function setValidator(a: any): void;

        function setValue(a: any): void;

        function setVisible(a: any): void;

        function showEditor(a: any): void;

        function toXml(a: any): any;

        function updateEditable(): void;

        function updateSize_(): void;

        function updateWidth(): void;

    }

}

export namespace FieldColour {
    namespace superClass_ {
        const EDITABLE: boolean;

        const SERIALIZABLE: boolean;

        const clickTarget_: any;

        const disposed: boolean;

        const isDirty_: boolean;

        const maxDisplayLength: number;

        const name: any;

        const sourceBlock_: any;

        const visible_: boolean;

        function applyColour(): void;

        function bindEvents_(): void;

        function callValidator(a: any): any;

        function classValidator(a: any): any;

        function configure_(a: any): void;

        function createBorderRect_(): void;

        function createTextElement_(): void;

        function dispose(): void;

        function doClassValidation_(a: any): any;

        function doValueInvalid_(a: any): void;

        function doValueUpdate_(a: any): void;

        function forceRerender(): void;

        function fromXml(a: any): void;

        function getAbsoluteXY_(): any;

        function getClickTarget_(): any;

        function getDisplayText_(): any;

        function getFlipRtl(): any;

        function getParentInput(): any;

        function getScaledBBox(): any;

        function getSize(): any;

        function getSourceBlock(): any;

        function getSvgRoot(): any;

        function getText(): any;

        function getValidator(): any;

        function getValue(): any;

        function init(): void;

        function initModel(): void;

        function initView(): void;

        function isClickable(): any;

        function isCurrentlyEditable(): any;

        function isSerializable(): any;

        function isTabNavigable(): any;

        function isVisible(): any;

        function markDirty(): void;

        function onBlocklyAction(a: any): any;

        function onMouseDown_(a: any): void;

        function processValidation_(a: any, b: any): any;

        function referencesVariables(): any;

        function render_(): void;

        function setCursorSvg(a: any): void;

        function setMarkerSvg(a: any): void;

        function setSourceBlock(a: any): void;

        function setText(a: any): void;

        function setTooltip(a: any): void;

        function setValidator(a: any): void;

        function setValue(a: any): void;

        function setVisible(a: any): void;

        function showEditor(a: any): void;

        function toXml(a: any): any;

        function updateEditable(): void;

        function updateSize_(): void;

        function updateWidth(): void;

    }

}

export namespace FieldDropdown {
    namespace superClass_ {
        const EDITABLE: boolean;

        const SERIALIZABLE: boolean;

        const clickTarget_: any;

        const disposed: boolean;

        const isDirty_: boolean;

        const maxDisplayLength: number;

        const name: any;

        const sourceBlock_: any;

        const visible_: boolean;

        function applyColour(): void;

        function bindEvents_(): void;

        function callValidator(a: any): any;

        function classValidator(a: any): any;

        function configure_(a: any): void;

        function createBorderRect_(): void;

        function createTextElement_(): void;

        function dispose(): void;

        function doClassValidation_(a: any): any;

        function doValueInvalid_(a: any): void;

        function doValueUpdate_(a: any): void;

        function forceRerender(): void;

        function fromXml(a: any): void;

        function getAbsoluteXY_(): any;

        function getClickTarget_(): any;

        function getDisplayText_(): any;

        function getFlipRtl(): any;

        function getParentInput(): any;

        function getScaledBBox(): any;

        function getSize(): any;

        function getSourceBlock(): any;

        function getSvgRoot(): any;

        function getText(): any;

        function getValidator(): any;

        function getValue(): any;

        function init(): void;

        function initModel(): void;

        function initView(): void;

        function isClickable(): any;

        function isCurrentlyEditable(): any;

        function isSerializable(): any;

        function isTabNavigable(): any;

        function isVisible(): any;

        function markDirty(): void;

        function onBlocklyAction(a: any): any;

        function onMouseDown_(a: any): void;

        function processValidation_(a: any, b: any): any;

        function referencesVariables(): any;

        function render_(): void;

        function setCursorSvg(a: any): void;

        function setMarkerSvg(a: any): void;

        function setSourceBlock(a: any): void;

        function setText(a: any): void;

        function setTooltip(a: any): void;

        function setValidator(a: any): void;

        function setValue(a: any): void;

        function setVisible(a: any): void;

        function showEditor(a: any): void;

        function toXml(a: any): any;

        function updateEditable(): void;

        function updateSize_(): void;

        function updateWidth(): void;

    }

}

export namespace FieldImage {
    namespace superClass_ {
        const EDITABLE: boolean;

        const SERIALIZABLE: boolean;

        const clickTarget_: any;

        const disposed: boolean;

        const isDirty_: boolean;

        const maxDisplayLength: number;

        const name: any;

        const sourceBlock_: any;

        const visible_: boolean;

        function applyColour(): void;

        function bindEvents_(): void;

        function callValidator(a: any): any;

        function classValidator(a: any): any;

        function configure_(a: any): void;

        function createBorderRect_(): void;

        function createTextElement_(): void;

        function dispose(): void;

        function doClassValidation_(a: any): any;

        function doValueInvalid_(a: any): void;

        function doValueUpdate_(a: any): void;

        function forceRerender(): void;

        function fromXml(a: any): void;

        function getAbsoluteXY_(): any;

        function getClickTarget_(): any;

        function getDisplayText_(): any;

        function getFlipRtl(): any;

        function getParentInput(): any;

        function getScaledBBox(): any;

        function getSize(): any;

        function getSourceBlock(): any;

        function getSvgRoot(): any;

        function getText(): any;

        function getValidator(): any;

        function getValue(): any;

        function init(): void;

        function initModel(): void;

        function initView(): void;

        function isClickable(): any;

        function isCurrentlyEditable(): any;

        function isSerializable(): any;

        function isTabNavigable(): any;

        function isVisible(): any;

        function markDirty(): void;

        function onBlocklyAction(a: any): any;

        function onMouseDown_(a: any): void;

        function processValidation_(a: any, b: any): any;

        function referencesVariables(): any;

        function render_(): void;

        function setCursorSvg(a: any): void;

        function setMarkerSvg(a: any): void;

        function setSourceBlock(a: any): void;

        function setText(a: any): void;

        function setTooltip(a: any): void;

        function setValidator(a: any): void;

        function setValue(a: any): void;

        function setVisible(a: any): void;

        function showEditor(a: any): void;

        function toXml(a: any): any;

        function updateEditable(): void;

        function updateSize_(): void;

        function updateWidth(): void;

    }

}

export namespace FieldLabel {
    namespace superClass_ {
        const EDITABLE: boolean;

        const SERIALIZABLE: boolean;

        const clickTarget_: any;

        const disposed: boolean;

        const isDirty_: boolean;

        const maxDisplayLength: number;

        const name: any;

        const sourceBlock_: any;

        const visible_: boolean;

        function applyColour(): void;

        function bindEvents_(): void;

        function callValidator(a: any): any;

        function classValidator(a: any): any;

        function configure_(a: any): void;

        function createBorderRect_(): void;

        function createTextElement_(): void;

        function dispose(): void;

        function doClassValidation_(a: any): any;

        function doValueInvalid_(a: any): void;

        function doValueUpdate_(a: any): void;

        function forceRerender(): void;

        function fromXml(a: any): void;

        function getAbsoluteXY_(): any;

        function getClickTarget_(): any;

        function getDisplayText_(): any;

        function getFlipRtl(): any;

        function getParentInput(): any;

        function getScaledBBox(): any;

        function getSize(): any;

        function getSourceBlock(): any;

        function getSvgRoot(): any;

        function getText(): any;

        function getValidator(): any;

        function getValue(): any;

        function init(): void;

        function initModel(): void;

        function initView(): void;

        function isClickable(): any;

        function isCurrentlyEditable(): any;

        function isSerializable(): any;

        function isTabNavigable(): any;

        function isVisible(): any;

        function markDirty(): void;

        function onBlocklyAction(a: any): any;

        function onMouseDown_(a: any): void;

        function processValidation_(a: any, b: any): any;

        function referencesVariables(): any;

        function render_(): void;

        function setCursorSvg(a: any): void;

        function setMarkerSvg(a: any): void;

        function setSourceBlock(a: any): void;

        function setText(a: any): void;

        function setTooltip(a: any): void;

        function setValidator(a: any): void;

        function setValue(a: any): void;

        function setVisible(a: any): void;

        function showEditor(a: any): void;

        function toXml(a: any): any;

        function updateEditable(): void;

        function updateSize_(): void;

        function updateWidth(): void;

    }

}

export namespace FieldLabelSerializable {
    namespace superClass_ {
        const EDITABLE: boolean;

        const SERIALIZABLE: boolean;

        const clickTarget_: any;

        const disposed: boolean;

        const isDirty_: boolean;

        const maxDisplayLength: number;

        const name: any;

        const sourceBlock_: any;

        const visible_: boolean;

        function applyColour(): void;

        function bindEvents_(): void;

        function callValidator(a: any): any;

        function classValidator(a: any): any;

        function configure_(a: any): void;

        function createBorderRect_(): void;

        function createTextElement_(): void;

        function dispose(): void;

        function doClassValidation_(a: any): any;

        function doValueInvalid_(a: any): void;

        function doValueUpdate_(a: any): void;

        function forceRerender(): void;

        function fromXml(a: any): void;

        function getAbsoluteXY_(): any;

        function getClickTarget_(): any;

        function getDisplayText_(): any;

        function getFlipRtl(): any;

        function getParentInput(): any;

        function getScaledBBox(): any;

        function getSize(): any;

        function getSourceBlock(): any;

        function getSvgRoot(): any;

        function getText(): any;

        function getValidator(): any;

        function getValue(): any;

        function init(): void;

        function initModel(): void;

        function initView(): void;

        function isClickable(): any;

        function isCurrentlyEditable(): any;

        function isSerializable(): any;

        function isTabNavigable(): any;

        function isVisible(): any;

        function markDirty(): void;

        function onBlocklyAction(a: any): any;

        function onMouseDown_(a: any): void;

        function processValidation_(a: any, b: any): any;

        function referencesVariables(): any;

        function render_(): void;

        function setClass(a: any): void;

        function setCursorSvg(a: any): void;

        function setMarkerSvg(a: any): void;

        function setSourceBlock(a: any): void;

        function setText(a: any): void;

        function setTooltip(a: any): void;

        function setValidator(a: any): void;

        function setValue(a: any): void;

        function setVisible(a: any): void;

        function showEditor(a: any): void;

        function toXml(a: any): any;

        function updateEditable(): void;

        function updateSize_(): void;

        function updateWidth(): void;

    }

}

export namespace FieldMultilineInput {
    namespace superClass_ {
        const CURSOR: string;

        const EDITABLE: boolean;

        const SERIALIZABLE: boolean;

        const clickTarget_: any;

        const disposed: boolean;

        const isDirty_: boolean;

        const maxDisplayLength: number;

        const name: any;

        const sourceBlock_: any;

        const visible_: boolean;

        function applyColour(): void;

        function bindEvents_(): void;

        function bindInputEvents_(a: any): void;

        function callValidator(a: any): any;

        function classValidator(a: any): any;

        function configure_(a: any): void;

        function createBorderRect_(): void;

        function createTextElement_(): void;

        function dispose(): void;

        function doClassValidation_(a: any): any;

        function doValueInvalid_(a: any): void;

        function doValueUpdate_(a: any): void;

        function forceRerender(): void;

        function fromXml(a: any): void;

        function getAbsoluteXY_(): any;

        function getClickTarget_(): any;

        function getDisplayText_(): any;

        function getEditorText_(a: any): any;

        function getFlipRtl(): any;

        function getParentInput(): any;

        function getScaledBBox(): any;

        function getSize(): any;

        function getSourceBlock(): any;

        function getSvgRoot(): any;

        function getText(): any;

        function getText_(): any;

        function getValidator(): any;

        function getValue(): any;

        function getValueFromEditorText_(a: any): any;

        function init(): void;

        function initModel(): void;

        function initView(): void;

        function isClickable(): any;

        function isCurrentlyEditable(): any;

        function isSerializable(): any;

        function isTabNavigable(): any;

        function isVisible(): any;

        function markDirty(): void;

        function onBlocklyAction(a: any): any;

        function onHtmlInputChange_(a: any): void;

        function onHtmlInputKeyDown_(a: any): void;

        function onMouseDown_(a: any): void;

        function processValidation_(a: any, b: any): any;

        function referencesVariables(): any;

        function render_(): void;

        function resizeEditor_(): void;

        function setCursorSvg(a: any): void;

        function setEditorValue_(a: any): void;

        function setMarkerSvg(a: any): void;

        function setSourceBlock(a: any): void;

        function setSpellcheck(a: any): void;

        function setText(a: any): void;

        function setTooltip(a: any): void;

        function setValidator(a: any): void;

        function setValue(a: any): void;

        function setVisible(a: any): void;

        function showEditor(a: any): void;

        function showEditor_(a: any, b: any): void;

        function showInlineEditor_(a: any): void;

        function showPromptEditor_(): void;

        function toXml(a: any): any;

        function unbindInputEvents_(): void;

        function updateEditable(): void;

        function updateSize_(): void;

        function updateWidth(): void;

        function widgetCreate_(): any;

        function widgetDispose_(): void;

    }

}

export namespace FieldNumber {
    namespace superClass_ {
        const CURSOR: string;

        const EDITABLE: boolean;

        const SERIALIZABLE: boolean;

        const clickTarget_: any;

        const disposed: boolean;

        const isDirty_: boolean;

        const maxDisplayLength: number;

        const name: any;

        const sourceBlock_: any;

        const visible_: boolean;

        function applyColour(): void;

        function bindEvents_(): void;

        function bindInputEvents_(a: any): void;

        function callValidator(a: any): any;

        function classValidator(a: any): any;

        function configure_(a: any): void;

        function createBorderRect_(): void;

        function createTextElement_(): void;

        function dispose(): void;

        function doClassValidation_(a: any): any;

        function doValueInvalid_(a: any): void;

        function doValueUpdate_(a: any): void;

        function forceRerender(): void;

        function fromXml(a: any): void;

        function getAbsoluteXY_(): any;

        function getClickTarget_(): any;

        function getDisplayText_(): any;

        function getEditorText_(a: any): any;

        function getFlipRtl(): any;

        function getParentInput(): any;

        function getScaledBBox(): any;

        function getSize(): any;

        function getSourceBlock(): any;

        function getSvgRoot(): any;

        function getText(): any;

        function getText_(): any;

        function getValidator(): any;

        function getValue(): any;

        function getValueFromEditorText_(a: any): any;

        function init(): void;

        function initModel(): void;

        function initView(): void;

        function isClickable(): any;

        function isCurrentlyEditable(): any;

        function isSerializable(): any;

        function isTabNavigable(): any;

        function isVisible(): any;

        function markDirty(): void;

        function onBlocklyAction(a: any): any;

        function onHtmlInputChange_(a: any): void;

        function onHtmlInputKeyDown_(a: any): void;

        function onMouseDown_(a: any): void;

        function processValidation_(a: any, b: any): any;

        function referencesVariables(): any;

        function render_(): void;

        function resizeEditor_(): void;

        function setCursorSvg(a: any): void;

        function setEditorValue_(a: any): void;

        function setMarkerSvg(a: any): void;

        function setSourceBlock(a: any): void;

        function setSpellcheck(a: any): void;

        function setText(a: any): void;

        function setTooltip(a: any): void;

        function setValidator(a: any): void;

        function setValue(a: any): void;

        function setVisible(a: any): void;

        function showEditor(a: any): void;

        function showEditor_(a: any, b: any): void;

        function showInlineEditor_(a: any): void;

        function showPromptEditor_(): void;

        function toXml(a: any): any;

        function unbindInputEvents_(): void;

        function updateEditable(): void;

        function updateSize_(): void;

        function updateWidth(): void;

        function widgetCreate_(): any;

        function widgetDispose_(): void;

    }

}

export namespace FieldTextInput {
    namespace superClass_ {
        const EDITABLE: boolean;

        const SERIALIZABLE: boolean;

        const clickTarget_: any;

        const disposed: boolean;

        const isDirty_: boolean;

        const maxDisplayLength: number;

        const name: any;

        const sourceBlock_: any;

        const visible_: boolean;

        function applyColour(): void;

        function bindEvents_(): void;

        function callValidator(a: any): any;

        function classValidator(a: any): any;

        function configure_(a: any): void;

        function createBorderRect_(): void;

        function createTextElement_(): void;

        function dispose(): void;

        function doClassValidation_(a: any): any;

        function doValueInvalid_(a: any): void;

        function doValueUpdate_(a: any): void;

        function forceRerender(): void;

        function fromXml(a: any): void;

        function getAbsoluteXY_(): any;

        function getClickTarget_(): any;

        function getDisplayText_(): any;

        function getFlipRtl(): any;

        function getParentInput(): any;

        function getScaledBBox(): any;

        function getSize(): any;

        function getSourceBlock(): any;

        function getSvgRoot(): any;

        function getText(): any;

        function getValidator(): any;

        function getValue(): any;

        function init(): void;

        function initModel(): void;

        function initView(): void;

        function isClickable(): any;

        function isCurrentlyEditable(): any;

        function isSerializable(): any;

        function isTabNavigable(): any;

        function isVisible(): any;

        function markDirty(): void;

        function onBlocklyAction(a: any): any;

        function onMouseDown_(a: any): void;

        function processValidation_(a: any, b: any): any;

        function referencesVariables(): any;

        function render_(): void;

        function setCursorSvg(a: any): void;

        function setMarkerSvg(a: any): void;

        function setSourceBlock(a: any): void;

        function setText(a: any): void;

        function setTooltip(a: any): void;

        function setValidator(a: any): void;

        function setValue(a: any): void;

        function setVisible(a: any): void;

        function showEditor(a: any): void;

        function toXml(a: any): any;

        function updateEditable(): void;

        function updateSize_(): void;

        function updateWidth(): void;

    }

}

export namespace FieldVariable {
    namespace superClass_ {
        const CURSOR: string;

        const EDITABLE: boolean;

        const SERIALIZABLE: boolean;

        const clickTarget_: any;

        const disposed: boolean;

        const isDirty_: boolean;

        const maxDisplayLength: number;

        const name: any;

        const sourceBlock_: any;

        const visible_: boolean;

        function applyColour(): void;

        function bindEvents_(): void;

        function callValidator(a: any): any;

        function classValidator(a: any): any;

        function configure_(a: any): void;

        function createBorderRect_(): void;

        function createSVGArrow_(): void;

        function createTextArrow_(): void;

        function createTextElement_(): void;

        function dispose(): void;

        function doClassValidation_(a: any): any;

        function doValueInvalid_(a: any): void;

        function doValueUpdate_(a: any): void;

        function dropdownCreate_(): any;

        function dropdownDispose_(): void;

        function forceRerender(): void;

        function fromXml(a: any): void;

        function getAbsoluteXY_(): any;

        function getClickTarget_(): any;

        function getDisplayText_(): any;

        function getFlipRtl(): any;

        function getOptions(a: any): any;

        function getParentInput(): any;

        function getScaledBBox(): any;

        function getSize(): any;

        function getSourceBlock(): any;

        function getSvgRoot(): any;

        function getText(): any;

        function getText_(): any;

        function getValidator(): any;

        function getValue(): any;

        function handleMenuActionEvent_(a: any): void;

        function init(): void;

        function initModel(): void;

        function initView(): void;

        function isClickable(): any;

        function isCurrentlyEditable(): any;

        function isOptionListDynamic(): any;

        function isSerializable(): any;

        function isTabNavigable(): any;

        function isVisible(): any;

        function markDirty(): void;

        function onBlocklyAction(a: any): any;

        function onItemSelected_(a: any, b: any): void;

        function onMouseDown_(a: any): void;

        function positionSVGArrow_(a: any, b: any): any;

        function processValidation_(a: any, b: any): any;

        function referencesVariables(): any;

        function renderSelectedImage_(a: any): void;

        function renderSelectedText_(): void;

        function render_(): void;

        function setCursorSvg(a: any): void;

        function setMarkerSvg(a: any): void;

        function setSourceBlock(a: any): void;

        function setText(a: any): void;

        function setTooltip(a: any): void;

        function setValidator(a: any): void;

        function setValue(a: any): void;

        function setVisible(a: any): void;

        function shouldAddBorderRect_(): any;

        function showEditor(a: any): void;

        function showEditor_(a: any): void;

        function toXml(a: any): any;

        function trimOptions_(): void;

        function updateEditable(): void;

        function updateSize_(): void;

        function updateWidth(): void;

    }

}

export namespace FlyoutCursor {
    namespace superClass_ {
        function dispose(): void;

        function draw(): void;

        function getCurNode(): any;

        function getDrawer(): any;

        function hide(): void;

        function next(): any;

        function onBlocklyAction(a: any): any;

        function out(): any;

        function prev(): any;

        function setCurNode(a: any): void;

        function setDrawer(a: any): void;

    }

}

export namespace FlyoutDragger {
    namespace superClass_ {
        function dispose(): void;

        function drag(a: any): void;

        function endDrag(a: any): void;

        function startDrag(): void;

    }

}

export namespace HorizontalFlyout {
    namespace superClass_ {
        const CORNER_RADIUS: number;

        const GAP_X: number;

        const GAP_Y: number;

        const MARGIN: number;

        const SCROLLBAR_PADDING: number;

        const autoClose: boolean;

        const containerVisible_: boolean;

        const dragAngleRange_: number;

        const height_: number;

        const isVisible_: boolean;

        const width_: number;

        function addBlockListeners_(a: any, b: any, c: any): void;

        function blockMouseDown_(a: any): any;

        function clearOldBlocks_(): void;

        function createBlock(a: any): any;

        function createDom(a: any): any;

        function createRect_(a: any, b: any, c: any, d: any, e: any): any;

        function dispose(): void;

        function filterForCapacity_(): void;

        function getHeight(): any;

        function getWidth(): any;

        function getWorkspace(): any;

        function hide(): void;

        function init(a: any): void;

        function initFlyoutButton_(a: any, b: any, c: any): void;

        function isBlockCreatable_(a: any): any;

        function isScrollable(): any;

        function isVisible(): any;

        function moveRectToBlock_(a: any, b: any): void;

        function onBlocklyAction(a: any): any;

        function onMouseDown_(a: any): void;

        function placeNewBlock_(a: any): any;

        function positionAt_(a: any, b: any, c: any, d: any): void;

        function reflow(): void;

        function setContainerVisible(a: any): void;

        function setVisible(a: any): void;

        function show(a: any): void;

        function updateDisplay_(): void;

    }

}

export namespace JavaScript {
    const COMMENT_WRAP: number;

    const FUNCTION_NAME_PLACEHOLDER_: string;

    const FUNCTION_NAME_PLACEHOLDER_REGEXP_: RegExp;

    const INDENT: string;

    const INFINITE_LOOP_TRAP: any;

    const ORDER_ADDITION: number;

    const ORDER_ASSIGNMENT: number;

    const ORDER_ATOMIC: number;

    const ORDER_AWAIT: number;

    const ORDER_BITWISE_AND: number;

    const ORDER_BITWISE_NOT: number;

    const ORDER_BITWISE_OR: number;

    const ORDER_BITWISE_SHIFT: number;

    const ORDER_BITWISE_XOR: number;

    const ORDER_COMMA: number;

    const ORDER_CONDITIONAL: number;

    const ORDER_DECREMENT: number;

    const ORDER_DELETE: number;

    const ORDER_DIVISION: number;

    const ORDER_EQUALITY: number;

    const ORDER_EXPONENTIATION: number;

    const ORDER_FUNCTION_CALL: number;

    const ORDER_IN: number;

    const ORDER_INCREMENT: number;

    const ORDER_INSTANCEOF: number;

    const ORDER_LOGICAL_AND: number;

    const ORDER_LOGICAL_NOT: number;

    const ORDER_LOGICAL_OR: number;

    const ORDER_MEMBER: number;

    const ORDER_MODULUS: number;

    const ORDER_MULTIPLICATION: number;

    const ORDER_NEW: number;

    const ORDER_NONE: number;

    const ORDER_OVERRIDES: (number[])[];

    const ORDER_RELATIONAL: number;

    const ORDER_SUBTRACTION: number;

    const ORDER_TYPEOF: number;

    const ORDER_UNARY_NEGATION: number;

    const ORDER_UNARY_PLUS: number;

    const ORDER_VOID: number;

    const ORDER_YIELD: number;

    const RESERVED_WORDS_: string;

    const STATEMENT_PREFIX: any;

    const STATEMENT_SUFFIX: any;

    const colour: {
    };

    const logic: {
    };

    const loops: {
    };

    const math: {
    };

    const name_: string;

    const procedures: {
    };

    const texts: {
    };

    const variables: {
    };

    const variablesDynamic: {
    };

    function addLoopTrap(a: any, b: any): any;

    function addReservedWords(a: any): void;

    function allNestedComments(a: any): any;

    function blockToCode(a: any, b: any): any;

    function colour_blend(a: any): any;

    function colour_picker(a: any): any;

    function colour_random(a: any): any;

    function colour_rgb(a: any): any;

    function controls_flow_statements(a: any): any;

    function controls_for(a: any): any;

    function controls_forEach(a: any): any;

    function controls_if(a: any): any;

    function controls_ifelse(a: any): any;

    function controls_repeat(a: any): any;

    function controls_repeat_ext(a: any): any;

    function controls_whileUntil(a: any): any;

    function finish(a: any): any;

    function getAdjusted(a: any, b: any, c: any, d: any, e: any): any;

    function init(a: any): void;

    function injectId(a: any, b: any): any;

    function lists_create_empty(a: any): any;

    function lists_create_with(a: any): any;

    function lists_getIndex(a: any): any;

    function lists_getSublist(a: any): any;

    function lists_indexOf(a: any): any;

    function lists_isEmpty(a: any): any;

    function lists_length(a: any): any;

    function lists_repeat(a: any): any;

    function lists_reverse(a: any): any;

    function lists_setIndex(a: any): any;

    function lists_sort(a: any): any;

    function lists_split(a: any): any;

    function logic_boolean(a: any): any;

    function logic_compare(a: any): any;

    function logic_negate(a: any): any;

    function logic_null(a: any): any;

    function logic_operation(a: any): any;

    function logic_ternary(a: any): any;

    function math_arithmetic(a: any): any;

    function math_atan2(a: any): any;

    function math_change(a: any): any;

    function math_constant(a: any): any;

    function math_constrain(a: any): any;

    function math_modulo(a: any): any;

    function math_number(a: any): any;

    function math_number_property(a: any): any;

    function math_on_list(a: any): any;

    function math_random_float(a: any): any;

    function math_random_int(a: any): any;

    function math_round(a: any): any;

    function math_single(a: any): any;

    function math_trig(a: any): any;

    function multiline_quote_(a: any): any;

    function prefixLines(a: any, b: any): any;

    function procedures_callnoreturn(a: any): any;

    function procedures_callreturn(a: any): any;

    function procedures_defnoreturn(a: any): any;

    function procedures_defreturn(a: any): any;

    function procedures_ifreturn(a: any): any;

    function provideFunction_(a: any, b: any): any;

    function quote_(a: any): any;

    function scrubNakedValue(a: any): any;

    function scrub_(a: any, b: any, c: any): any;

    function statementToCode(a: any, b: any): any;

    function text(a: any): any;

    function text_append(a: any): any;

    function text_changeCase(a: any): any;

    function text_charAt(a: any): any;

    function text_count(a: any): any;

    function text_getSubstring(a: any): any;

    function text_indexOf(a: any): any;

    function text_isEmpty(a: any): any;

    function text_join(a: any): any;

    function text_length(a: any): any;

    function text_multiline(a: any): any;

    function text_print(a: any): any;

    function text_prompt(a: any): any;

    function text_prompt_ext(a: any): any;

    function text_replace(a: any): any;

    function text_reverse(a: any): any;

    function text_trim(a: any): any;

    function valueToCode(a: any, b: any, c: any): any;

    function variables_get(a: any): any;

    function variables_get_dynamic(a: any): any;

    function variables_set(a: any): any;

    function variables_set_dynamic(a: any): any;

    function workspaceToCode(a: any): any;

    namespace lists {
        function getIndex_(a: any, b: any, c: any): any;

    }

    namespace text {
        function forceString_(a: any): any;

        function getIndex_(a: any, b: any, c: any): any;

        namespace forceString_ {
            const strRegExp: RegExp;

        }

    }

}

export namespace Lua {
    const COMMENT_WRAP: number;

    const CONTINUE_STATEMENT: string;

    const FUNCTION_NAME_PLACEHOLDER_: string;

    const FUNCTION_NAME_PLACEHOLDER_REGEXP_: RegExp;

    const INDENT: string;

    const INFINITE_LOOP_TRAP: any;

    const ORDER_ADDITIVE: number;

    const ORDER_AND: number;

    const ORDER_ATOMIC: number;

    const ORDER_CONCATENATION: number;

    const ORDER_EXPONENTIATION: number;

    const ORDER_HIGH: number;

    const ORDER_MULTIPLICATIVE: number;

    const ORDER_NONE: number;

    const ORDER_OR: number;

    const ORDER_OVERRIDES: any[];

    const ORDER_RELATIONAL: number;

    const ORDER_UNARY: number;

    const RESERVED_WORDS_: string;

    const STATEMENT_PREFIX: any;

    const STATEMENT_SUFFIX: any;

    const colour: {
    };

    const logic: {
    };

    const loops: {
    };

    const math: {
    };

    const name_: string;

    const procedures: {
    };

    const texts: {
    };

    const variables: {
    };

    const variablesDynamic: {
    };

    function addContinueLabel_(a: any): any;

    function addLoopTrap(a: any, b: any): any;

    function addReservedWords(a: any): void;

    function allNestedComments(a: any): any;

    function blockToCode(a: any, b: any): any;

    function colour_blend(a: any): any;

    function colour_picker(a: any): any;

    function colour_random(a: any): any;

    function colour_rgb(a: any): any;

    function controls_flow_statements(a: any): any;

    function controls_for(a: any): any;

    function controls_forEach(a: any): any;

    function controls_if(a: any): any;

    function controls_ifelse(a: any): any;

    function controls_repeat(a: any): any;

    function controls_repeat_ext(a: any): any;

    function controls_whileUntil(a: any): any;

    function finish(a: any): any;

    function init(a: any): void;

    function injectId(a: any, b: any): any;

    function lists_create_empty(a: any): any;

    function lists_create_with(a: any): any;

    function lists_getIndex(a: any): any;

    function lists_getSublist(a: any): any;

    function lists_indexOf(a: any): any;

    function lists_isEmpty(a: any): any;

    function lists_length(a: any): any;

    function lists_repeat(a: any): any;

    function lists_reverse(a: any): any;

    function lists_setIndex(a: any): any;

    function lists_sort(a: any): any;

    function lists_split(a: any): any;

    function logic_boolean(a: any): any;

    function logic_compare(a: any): any;

    function logic_negate(a: any): any;

    function logic_null(a: any): any;

    function logic_operation(a: any): any;

    function logic_ternary(a: any): any;

    function math_arithmetic(a: any): any;

    function math_atan2(a: any): any;

    function math_change(a: any): any;

    function math_constant(a: any): any;

    function math_constrain(a: any): any;

    function math_modulo(a: any): any;

    function math_number(a: any): any;

    function math_number_property(a: any): any;

    function math_on_list(a: any): any;

    function math_random_float(a: any): any;

    function math_random_int(a: any): any;

    function math_round(a: any): any;

    function math_single(a: any): any;

    function math_trig(a: any): any;

    function multiline_quote_(a: any): any;

    function prefixLines(a: any, b: any): any;

    function procedures_callnoreturn(a: any): any;

    function procedures_callreturn(a: any): any;

    function procedures_defnoreturn(a: any): any;

    function procedures_defreturn(a: any): any;

    function procedures_ifreturn(a: any): any;

    function provideFunction_(a: any, b: any): any;

    function quote_(a: any): any;

    function scrubNakedValue(a: any): any;

    function scrub_(a: any, b: any, c: any): any;

    function statementToCode(a: any, b: any): any;

    function text(a: any): any;

    function text_append(a: any): any;

    function text_changeCase(a: any): any;

    function text_charAt(a: any): any;

    function text_count(a: any): any;

    function text_getSubstring(a: any): any;

    function text_indexOf(a: any): any;

    function text_isEmpty(a: any): any;

    function text_join(a: any): any;

    function text_length(a: any): any;

    function text_multiline(a: any): any;

    function text_print(a: any): any;

    function text_prompt(a: any): any;

    function text_prompt_ext(a: any): any;

    function text_replace(a: any): any;

    function text_reverse(a: any): any;

    function text_trim(a: any): any;

    function valueToCode(a: any, b: any, c: any): any;

    function variables_get(a: any): any;

    function variables_get_dynamic(a: any): any;

    function variables_set(a: any): any;

    function variables_set_dynamic(a: any): any;

    function workspaceToCode(a: any): any;

    namespace lists {
        function getIndex_(a: any, b: any, c: any): any;

    }

}

export namespace Menu {
    namespace superClass_ {
        function addChild(a: any, b: any): void;

        function addChildAt(a: any, b: any, c: any): void;

        function createDom(): void;

        function dispose(): void;

        function disposeInternal(): void;

        function enterDocument(): void;

        function exitDocument(): void;

        function forEachChild(a: any, b: any): void;

        function getChild(a: any): any;

        function getChildAt(a: any): any;

        function getChildCount(): any;

        function getContentElement(): any;

        function getElement(): any;

        function getId(): any;

        function getParent(): any;

        function hasChildren(): any;

        function indexOfChild(a: any): any;

        function isInDocument(): any;

        function isRightToLeft(): any;

        function render(a: any): void;

        function renderBefore(a: any): void;

        function render_(a: any, b: any): void;

        function setElementInternal(a: any): void;

        function setParent(a: any): void;

        function setRightToLeft(a: any): void;

    }

}

export namespace MenuItem {
    namespace superClass_ {
        function addChild(a: any, b: any): void;

        function addChildAt(a: any, b: any, c: any): void;

        function createDom(): void;

        function dispose(): void;

        function disposeInternal(): void;

        function enterDocument(): void;

        function exitDocument(): void;

        function forEachChild(a: any, b: any): void;

        function getChild(a: any): any;

        function getChildAt(a: any): any;

        function getChildCount(): any;

        function getContentElement(): any;

        function getElement(): any;

        function getId(): any;

        function getParent(): any;

        function hasChildren(): any;

        function indexOfChild(a: any): any;

        function isInDocument(): any;

        function isRightToLeft(): any;

        function render(a: any): void;

        function renderBefore(a: any): void;

        function render_(a: any, b: any): void;

        function setElementInternal(a: any): void;

        function setParent(a: any): void;

        function setRightToLeft(a: any): void;

    }

}

export namespace Mutator {
    namespace superClass_ {
        const SIZE: number;

        const bubble_: any;

        const collapseHidden: boolean;

        const iconXY_: any;

        function applyColour(): void;

        function computeIconLocation(): void;

        function createIcon(): void;

        function dispose(): void;

        function getCorrectedSize(): any;

        function getIconLocation(): any;

        function iconClick_(a: any): void;

        function isVisible(): any;

        function setIconLocation(a: any): void;

        function updateEditable(): void;

    }

}

export namespace Options {
    function parseGridOptions_(a: any): any;

    function parseMoveOptions(a: any, b: any): any;

    function parseThemeOptions_(a: any): any;

    function parseToolboxTree(a: any): any;

    function parseZoomOptions_(a: any): any;

}

export namespace PHP {
    const COMMENT_WRAP: number;

    const FUNCTION_NAME_PLACEHOLDER_: string;

    const FUNCTION_NAME_PLACEHOLDER_REGEXP_: RegExp;

    const INDENT: string;

    const INFINITE_LOOP_TRAP: any;

    const ORDER_ADDITION: number;

    const ORDER_ASSIGNMENT: number;

    const ORDER_ATOMIC: number;

    const ORDER_BITWISE_AND: number;

    const ORDER_BITWISE_NOT: number;

    const ORDER_BITWISE_OR: number;

    const ORDER_BITWISE_SHIFT: number;

    const ORDER_BITWISE_XOR: number;

    const ORDER_CAST: number;

    const ORDER_CLONE: number;

    const ORDER_COMMA: number;

    const ORDER_CONDITIONAL: number;

    const ORDER_DECREMENT: number;

    const ORDER_DIVISION: number;

    const ORDER_EQUALITY: number;

    const ORDER_FUNCTION_CALL: number;

    const ORDER_IF_NULL: number;

    const ORDER_INCREMENT: number;

    const ORDER_INSTANCEOF: number;

    const ORDER_LOGICAL_AND: number;

    const ORDER_LOGICAL_AND_WEAK: number;

    const ORDER_LOGICAL_NOT: number;

    const ORDER_LOGICAL_OR: number;

    const ORDER_LOGICAL_OR_WEAK: number;

    const ORDER_LOGICAL_XOR: number;

    const ORDER_MEMBER: number;

    const ORDER_MODULUS: number;

    const ORDER_MULTIPLICATION: number;

    const ORDER_NEW: number;

    const ORDER_NONE: number;

    const ORDER_OVERRIDES: (number[])[];

    const ORDER_POWER: number;

    const ORDER_REFERENCE: number;

    const ORDER_RELATIONAL: number;

    const ORDER_STRING_CONCAT: number;

    const ORDER_SUBTRACTION: number;

    const ORDER_SUPPRESS_ERROR: number;

    const ORDER_UNARY_NEGATION: number;

    const ORDER_UNARY_PLUS: number;

    const RESERVED_WORDS_: string;

    const STATEMENT_PREFIX: any;

    const STATEMENT_SUFFIX: any;

    const colour: {
    };

    const lists: {
    };

    const logic: {
    };

    const loops: {
    };

    const math: {
    };

    const name_: string;

    const procedures: {
    };

    const texts: {
    };

    const variables: {
    };

    const variablesDynamic: {
    };

    function addLoopTrap(a: any, b: any): any;

    function addReservedWords(a: any): void;

    function allNestedComments(a: any): any;

    function blockToCode(a: any, b: any): any;

    function colour_blend(a: any): any;

    function colour_picker(a: any): any;

    function colour_random(a: any): any;

    function colour_rgb(a: any): any;

    function controls_flow_statements(a: any): any;

    function controls_for(a: any): any;

    function controls_forEach(a: any): any;

    function controls_if(a: any): any;

    function controls_ifelse(a: any): any;

    function controls_repeat(a: any): any;

    function controls_repeat_ext(a: any): any;

    function controls_whileUntil(a: any): any;

    function finish(a: any): any;

    function getAdjusted(a: any, b: any, c: any, d: any, e: any): any;

    function init(a: any): void;

    function injectId(a: any, b: any): any;

    function lists_create_empty(a: any): any;

    function lists_create_with(a: any): any;

    function lists_getIndex(a: any): any;

    function lists_getSublist(a: any): any;

    function lists_indexOf(a: any): any;

    function lists_isEmpty(a: any): any;

    function lists_length(a: any): any;

    function lists_repeat(a: any): any;

    function lists_reverse(a: any): any;

    function lists_setIndex(a: any): any;

    function lists_sort(a: any): any;

    function lists_split(a: any): any;

    function logic_boolean(a: any): any;

    function logic_compare(a: any): any;

    function logic_negate(a: any): any;

    function logic_null(a: any): any;

    function logic_operation(a: any): any;

    function logic_ternary(a: any): any;

    function math_arithmetic(a: any): any;

    function math_atan2(a: any): any;

    function math_change(a: any): any;

    function math_constant(a: any): any;

    function math_constrain(a: any): any;

    function math_modulo(a: any): any;

    function math_number(a: any): any;

    function math_number_property(a: any): any;

    function math_on_list(a: any): any;

    function math_random_float(a: any): any;

    function math_random_int(a: any): any;

    function math_round(a: any): any;

    function math_single(a: any): any;

    function math_trig(a: any): any;

    function multiline_quote_(a: any): any;

    function prefixLines(a: any, b: any): any;

    function procedures_callnoreturn(a: any): any;

    function procedures_callreturn(a: any): any;

    function procedures_defnoreturn(a: any): any;

    function procedures_defreturn(a: any): any;

    function procedures_ifreturn(a: any): any;

    function provideFunction_(a: any, b: any): any;

    function quote_(a: any): any;

    function scrubNakedValue(a: any): any;

    function scrub_(a: any, b: any, c: any): any;

    function statementToCode(a: any, b: any): any;

    function text(a: any): any;

    function text_append(a: any): any;

    function text_changeCase(a: any): any;

    function text_charAt(a: any): any;

    function text_count(a: any): any;

    function text_getSubstring(a: any): any;

    function text_indexOf(a: any): any;

    function text_isEmpty(a: any): any;

    function text_join(a: any): any;

    function text_length(a: any): any;

    function text_multiline(a: any): any;

    function text_print(a: any): any;

    function text_prompt(a: any): any;

    function text_prompt_ext(a: any): any;

    function text_replace(a: any): any;

    function text_reverse(a: any): any;

    function text_trim(a: any): any;

    function valueToCode(a: any, b: any, c: any): any;

    function variables_get(a: any): any;

    function variables_get_dynamic(a: any): any;

    function variables_set(a: any): any;

    function variables_set_dynamic(a: any): any;

    function workspaceToCode(a: any): any;

}

export namespace Procedures {
    const DEFAULT_ARG: string;

    const NAME_TYPE: string;

    function allProcedures(a: any): any;

    function findLegalName(a: any, b: any): any;

    function flyoutCategory(a: any): any;

    function getCallers(a: any, b: any): any;

    function getDefinition(a: any, b: any): any;

    function isLegalName_(a: any, b: any, c: any): any;

    function isNameUsed(a: any, b: any, c: any): any;

    function mutateCallers(a: any): void;

    function mutatorChangeListener_(a: any): void;

    function mutatorOpenListener(a: any): void;

    function procTupleComparator_(a: any, b: any): any;

    function rename(a: any): any;

    function updateMutatorFlyout_(a: any): void;

}

export namespace Python {
    const COMMENT_WRAP: number;

    const FUNCTION_NAME_PLACEHOLDER_: string;

    const FUNCTION_NAME_PLACEHOLDER_REGEXP_: RegExp;

    const INDENT: string;

    const INFINITE_LOOP_TRAP: any;

    const ORDER_ADDITIVE: number;

    const ORDER_ATOMIC: number;

    const ORDER_BITWISE_AND: number;

    const ORDER_BITWISE_NOT: number;

    const ORDER_BITWISE_OR: number;

    const ORDER_BITWISE_SHIFT: number;

    const ORDER_BITWISE_XOR: number;

    const ORDER_COLLECTION: number;

    const ORDER_CONDITIONAL: number;

    const ORDER_EXPONENTIATION: number;

    const ORDER_FUNCTION_CALL: number;

    const ORDER_LAMBDA: number;

    const ORDER_LOGICAL_AND: number;

    const ORDER_LOGICAL_NOT: number;

    const ORDER_LOGICAL_OR: number;

    const ORDER_MEMBER: number;

    const ORDER_MULTIPLICATIVE: number;

    const ORDER_NONE: number;

    const ORDER_OVERRIDES: (number[])[];

    const ORDER_RELATIONAL: number;

    const ORDER_STRING_CONVERSION: number;

    const ORDER_UNARY_SIGN: number;

    const RESERVED_WORDS_: string;

    const STATEMENT_PREFIX: any;

    const STATEMENT_SUFFIX: any;

    const colour: {
    };

    const lists: {
    };

    const logic: {
    };

    const loops: {
    };

    const math: {
    };

    const name_: string;

    const procedures: {
    };

    const texts: {
    };

    const variables: {
    };

    const variablesDynamic: {
    };

    function addLoopTrap(a: any, b: any): any;

    function addReservedWords(a: any): void;

    function allNestedComments(a: any): any;

    function blockToCode(a: any, b: any): any;

    function colour_blend(a: any): any;

    function colour_picker(a: any): any;

    function colour_random(a: any): any;

    function colour_rgb(a: any): any;

    function controls_flow_statements(a: any): any;

    function controls_for(a: any): any;

    function controls_forEach(a: any): any;

    function controls_if(a: any): any;

    function controls_ifelse(a: any): any;

    function controls_repeat(a: any): any;

    function controls_repeat_ext(a: any): any;

    function controls_whileUntil(a: any): any;

    function finish(a: any): any;

    function getAdjustedInt(a: any, b: any, c: any, d: any): any;

    function init(a: any): void;

    function injectId(a: any, b: any): any;

    function lists_create_empty(a: any): any;

    function lists_create_with(a: any): any;

    function lists_getIndex(a: any): any;

    function lists_getSublist(a: any): any;

    function lists_indexOf(a: any): any;

    function lists_isEmpty(a: any): any;

    function lists_length(a: any): any;

    function lists_repeat(a: any): any;

    function lists_reverse(a: any): any;

    function lists_setIndex(a: any): any;

    function lists_sort(a: any): any;

    function lists_split(a: any): any;

    function logic_boolean(a: any): any;

    function logic_compare(a: any): any;

    function logic_negate(a: any): any;

    function logic_null(a: any): any;

    function logic_operation(a: any): any;

    function logic_ternary(a: any): any;

    function math_arithmetic(a: any): any;

    function math_atan2(a: any): any;

    function math_change(a: any): any;

    function math_constant(a: any): any;

    function math_constrain(a: any): any;

    function math_modulo(a: any): any;

    function math_number(a: any): any;

    function math_number_property(a: any): any;

    function math_on_list(a: any): any;

    function math_random_float(a: any): any;

    function math_random_int(a: any): any;

    function math_round(a: any): any;

    function math_single(a: any): any;

    function math_trig(a: any): any;

    function multiline_quote_(a: any): any;

    function prefixLines(a: any, b: any): any;

    function procedures_callnoreturn(a: any): any;

    function procedures_callreturn(a: any): any;

    function procedures_defnoreturn(a: any): any;

    function procedures_defreturn(a: any): any;

    function procedures_ifreturn(a: any): any;

    function provideFunction_(a: any, b: any): any;

    function quote_(a: any): any;

    function scrubNakedValue(a: any): any;

    function scrub_(a: any, b: any, c: any): any;

    function statementToCode(a: any, b: any): any;

    function text(a: any): any;

    function text_append(a: any): any;

    function text_changeCase(a: any): any;

    function text_charAt(a: any): any;

    function text_count(a: any): any;

    function text_getSubstring(a: any): any;

    function text_indexOf(a: any): any;

    function text_isEmpty(a: any): any;

    function text_join(a: any): any;

    function text_length(a: any): any;

    function text_multiline(a: any): any;

    function text_print(a: any): any;

    function text_prompt(a: any): any;

    function text_prompt_ext(a: any): any;

    function text_replace(a: any): any;

    function text_reverse(a: any): any;

    function text_trim(a: any): any;

    function valueToCode(a: any, b: any, c: any): any;

    function variables_get(a: any): any;

    function variables_get_dynamic(a: any): any;

    function variables_set(a: any): any;

    function variables_set_dynamic(a: any): any;

    function workspaceToCode(a: any): any;

    namespace text {
        function forceString_(a: any): any;

        namespace forceString_ {
            const strRegExp: RegExp;

        }

    }

}

export namespace RenderedConnection {
    namespace superClass_ {
        const check_: any;

        const disposed: boolean;

        const shadowDom_: any;

        const targetConnection: any;

        const x: number;

        const y: number;

        function canConnectToPrevious_(a: any): any;

        function canConnectWithReason(a: any): any;

        function checkConnection(a: any): void;

        function checkType(a: any): any;

        function checkType_(a: any): any;

        function connect(a: any): void;

        function connect_(a: any): void;

        function disconnect(): void;

        function disconnectInternal_(a: any, b: any): void;

        function dispose(): void;

        function getCheck(): any;

        function getParentInput(): any;

        function getShadowDom(): any;

        function getSourceBlock(): any;

        function isConnected(): any;

        function isConnectionAllowed(a: any): any;

        function isSuperior(): any;

        function neighbours(a: any): any;

        function onCheckChanged_(): void;

        function onFailedConnect(a: any): void;

        function respawnShadow_(): void;

        function setCheck(a: any): any;

        function setShadowDom(a: any): void;

        function targetBlock(): any;

        function toString(): any;

    }

}

export namespace TabNavigateCursor {
    namespace superClass_ {
        function dispose(): void;

        function draw(): void;

        function findSiblingOrParent_(a: any): any;

        function getCurNode(): any;

        function getDrawer(): any;

        function getNextNode_(a: any, b: any): any;

        function getPreviousNode_(a: any, b: any): any;

        function getRightMostChild_(a: any): any;

        function hide(): void;

        function next(): any;

        function onBlocklyAction(a: any): any;

        function out(): any;

        function prev(): any;

        function setCurNode(a: any): void;

        function setDrawer(a: any): void;

        function validNode_(a: any): any;

    }

}

export namespace Toolbox {
    namespace TreeSeparator {
        namespace superClass_ {
            function add(a: any): void;

            function addChild(a: any, b: any): void;

            function addChildAt(a: any, b: any): void;

            function computeDepth_(): any;

            function contains(a: any): any;

            function createDom(): void;

            function dispose(): void;

            function disposeInternal(): void;

            function doNodeCollapsed(): void;

            function doNodeExpanded(): void;

            function enterDocument(): void;

            function exitDocument(): void;

            function forEachChild(a: any, b: any): void;

            function getBackgroundPosition(): any;

            function getCalculatedIconClass(): any;

            function getChild(a: any): any;

            function getChildAt(a: any): any;

            function getChildCount(): any;

            function getChildren(): any;

            function getChildrenElement(): any;

            function getConfig(): any;

            function getContentElement(): any;

            function getDepth(): any;

            function getElement(): any;

            function getExpanded(): any;

            function getExpandedIconClass(): any;

            function getFirstChild(): any;

            function getIconClass(): any;

            function getIconDom(): any;

            function getIconElement(): any;

            function getId(): any;

            function getLabelDom(): any;

            function getLabelElement(): any;

            function getLastChild(): any;

            function getLastShownDescendant(): any;

            function getNextShownNode(): any;

            function getNextSibling(): any;

            function getParent(): any;

            function getPixelIndent_(): any;

            function getPreviousShownNode(): any;

            function getPreviousSibling(): any;

            function getRowClassName(): any;

            function getRowDom(): any;

            function getRowElement(): any;

            function getText(): any;

            function getTree(): any;

            function hasChildren(): any;

            function indexOfChild(a: any): any;

            function initAccessibility(): void;

            function isInDocument(): any;

            function isLastSibling(): any;

            function isRightToLeft(): any;

            function isSelected(): any;

            function isUserCollapsible(): any;

            function onClick_(a: any): void;

            function onKeyDown(a: any): any;

            function onMouseDown(a: any): void;

            function onSizeChanged(a: any): void;

            function render(a: any): void;

            function renderBefore(a: any): void;

            function render_(a: any, b: any): void;

            function resizeToolbox_(): void;

            function select(): void;

            function selectChild(): any;

            function selectFirst(): void;

            function selectNext(): any;

            function selectParent(): any;

            function selectPrevious(): any;

            function setDepth_(a: any): void;

            function setElementInternal(a: any): void;

            function setExpanded(a: any): void;

            function setExpandedInternal(a: any): void;

            function setParent(a: any): void;

            function setRightToLeft(a: any): void;

            function setSelectedInternal(a: any): void;

            function setText(a: any): void;

            function setTreeInternal(a: any): void;

            function toDom(): any;

            function toggle(): void;

            function updateExpandIcon(): void;

            function updateIcon_(): void;

            function updateRow(): void;

        }

    }

}

export namespace Tooltip {
    const DIV: any;

    const HOVER_MS: number;

    const LIMIT: number;

    const MARGINS: number;

    const OFFSET_X: number;

    const OFFSET_Y: number;

    const RADIUS_OK: number;

    const blocked_: boolean;

    const element_: any;

    const lastX_: number;

    const lastY_: number;

    const mouseOutPid_: number;

    const poisonedElement_: any;

    const showPid_: number;

    const visible: boolean;

    function bindMouseEvents(a: any): void;

    function block(): void;

    function createDom(): void;

    function hide(): void;

    function onMouseMove_(a: any): void;

    function onMouseOut_(a: any): void;

    function onMouseOver_(a: any): void;

    function show_(): void;

    function unblock(): void;

}

export namespace Touch {
    const TOUCH_ENABLED: boolean;

    const TOUCH_MAP: {
    };

    const touchIdentifier_: any;

    function checkTouchIdentifier(a: any): any;

    function clearTouchIdentifier(): void;

    function getTouchIdentifierFromEvent(a: any): any;

    function isMouseOrTouchEvent(a: any): any;

    function isTouchEvent(a: any): any;

    function setClientFromTouch(a: any): void;

    function shouldHandleEvent(a: any): any;

    function splitEventByTouches(a: any): any;

}

export namespace TouchGesture {
    namespace superClass_ {
        function bindMouseEvents(a: any): void;

        function bringBlockToFront_(): void;

        function cancel(): void;

        function dispose(): void;

        function doBlockClick_(): void;

        function doBubbleClick_(): void;

        function doFieldClick_(): void;

        function doStart(a: any): void;

        function doWorkspaceClick_(a: any): void;

        function getInsertionMarkers(): any;

        function handleBlockStart(a: any, b: any): void;

        function handleBubbleStart(a: any, b: any): void;

        function handleFlyoutStart(a: any, b: any): void;

        function handleMove(a: any): void;

        function handleRightClick(a: any): void;

        function handleUp(a: any): void;

        function handleWsStart(a: any, b: any): void;

        function hasStarted(): any;

        function isBlockClick_(): any;

        function isBubbleClick_(): any;

        function isDragging(): any;

        function isFieldClick_(): any;

        function isWorkspaceClick_(): any;

        function setStartBlock(a: any): void;

        function setStartBubble(a: any): void;

        function setStartField(a: any): void;

        function setStartFlyout_(a: any): void;

        function setStartWorkspace_(a: any): void;

        function setTargetBlock_(a: any): void;

        function startDraggingBlock_(): void;

        function startDraggingBubble_(): void;

        function updateDragDelta_(a: any): any;

        function updateFromEvent_(a: any): void;

        function updateIsDraggingBlock_(): any;

        function updateIsDraggingBubble_(): any;

        function updateIsDraggingFromFlyout_(): any;

        function updateIsDraggingWorkspace_(): void;

        function updateIsDragging_(): void;

    }

}

export namespace Variables {
    const ALL_DEVELOPER_VARS_WARNINGS_BY_BLOCK_TYPE_: {
    };

    const NAME_TYPE: string;

    const VAR_LETTER_OPTIONS: string;

    function allDeveloperVariables(a: any): any;

    function allUsedVarModels(a: any): any;

    function allUsedVariables(): void;

    function createVariable(a: any, b: any, c: any): void;

    function createVariableButtonHandler(a: any, b: any, c: any): void;

    function createVariable_(a: any, b: any, c: any, d: any): any;

    function flyoutCategory(a: any): any;

    function flyoutCategoryBlocks(a: any): any;

    function generateUniqueName(a: any): any;

    function generateUniqueNameFromOptions(a: any, b: any): any;

    function generateVariableFieldDom(a: any): any;

    function getAddedVariables(a: any, b: any): any;

    function getOrCreateVariablePackage(a: any, b: any, c: any, d: any): any;

    function getVariable(a: any, b: any, c: any, d: any): any;

    function nameUsedWithAnyType_(a: any, b: any): any;

    function nameUsedWithOtherType_(a: any, b: any, c: any): any;

    function promptName(a: any, b: any, c: any): void;

    function renameVariable(a: any, b: any, c: any): void;

}

export namespace VariablesDynamic {
    function flyoutCategory(a: any): any;

    function flyoutCategoryBlocks(a: any): any;

    function onCreateVariableButtonClick_Colour(a: any): void;

    function onCreateVariableButtonClick_Number(a: any): void;

    function onCreateVariableButtonClick_String(a: any): void;

}

export namespace VerticalFlyout {
    namespace superClass_ {
        const CORNER_RADIUS: number;

        const GAP_X: number;

        const GAP_Y: number;

        const MARGIN: number;

        const SCROLLBAR_PADDING: number;

        const autoClose: boolean;

        const containerVisible_: boolean;

        const dragAngleRange_: number;

        const height_: number;

        const isVisible_: boolean;

        const width_: number;

        function addBlockListeners_(a: any, b: any, c: any): void;

        function blockMouseDown_(a: any): any;

        function clearOldBlocks_(): void;

        function createBlock(a: any): any;

        function createDom(a: any): any;

        function createRect_(a: any, b: any, c: any, d: any, e: any): any;

        function dispose(): void;

        function filterForCapacity_(): void;

        function getHeight(): any;

        function getWidth(): any;

        function getWorkspace(): any;

        function hide(): void;

        function init(a: any): void;

        function initFlyoutButton_(a: any, b: any, c: any): void;

        function isBlockCreatable_(a: any): any;

        function isScrollable(): any;

        function isVisible(): any;

        function moveRectToBlock_(a: any, b: any): void;

        function onBlocklyAction(a: any): any;

        function onMouseDown_(a: any): void;

        function placeNewBlock_(a: any): any;

        function positionAt_(a: any, b: any, c: any, d: any): void;

        function reflow(): void;

        function setContainerVisible(a: any): void;

        function setVisible(a: any): void;

        function show(a: any): void;

        function updateDisplay_(): void;

    }

}

export namespace Warning {
    namespace superClass_ {
        const SIZE: number;

        const bubble_: any;

        const collapseHidden: boolean;

        const iconXY_: any;

        function applyColour(): void;

        function computeIconLocation(): void;

        function createIcon(): void;

        function dispose(): void;

        function getCorrectedSize(): any;

        function getIconLocation(): any;

        function iconClick_(a: any): void;

        function isVisible(): any;

        function setIconLocation(a: any): void;

        function updateEditable(): void;

    }

}

export namespace WidgetDiv {
    const dispose_: any;

    const owner_: any;

    const rendererClassName_: any;

    const themeClassName_: any;

    function calculateX_(a: any, b: any, c: any, d: any): any;

    function calculateY_(a: any, b: any, c: any): any;

    function createDom(): void;

    function hide(): void;

    function hideIfOwner(a: any): void;

    function isVisible(): any;

    function positionInternal_(a: any, b: any, c: any): void;

    function positionWithAnchor(a: any, b: any, c: any, d: any): void;

    function show(a: any, b: any, c: any): void;

}

export namespace WorkspaceSvg {
    namespace superClass_ {
        const MAX_UNDO: number;

        const connectionDBList: any;

        const isClearing: boolean;

        const rendered: boolean;

        function addChangeListener(a: any): any;

        function addTopBlock(a: any): void;

        function addTopComment(a: any): void;

        function addTypedBlock(a: any): void;

        function allInputsFilled(a: any): any;

        function clear(): void;

        function clearUndo(): void;

        function createPotentialVariableMap(): void;

        function createVariable(a: any, b: any, c: any): any;

        function deleteVariableById(a: any): void;

        function deleteVariableInternal_(a: any, b: any): void;

        function dispose(): void;

        function fireChangeListener(a: any): void;

        function getAllBlocks(a: any): any;

        function getAllVariableNames(): any;

        function getAllVariables(): any;

        function getBlockById(a: any): any;

        function getBlocksByType(a: any, b: any): any;

        function getCommentById(a: any): any;

        function getPotentialVariableMap(): any;

        function getTopBlocks(a: any): any;

        function getTopComments(a: any): any;

        function getVariable(a: any, b: any): any;

        function getVariableById(a: any): any;

        function getVariableMap(): any;

        function getVariableTypes(): any;

        function getVariableUsesById(a: any): any;

        function getVariablesOfType(a: any): any;

        function getWidth(): any;

        function hasBlockLimits(): any;

        function isCapacityAvailable(a: any): any;

        function newBlock(a: any, b: any): any;

        function remainingCapacity(): any;

        function remainingCapacityOfType(a: any): any;

        function removeBlockById(a: any): void;

        function removeChangeListener(a: any): void;

        function removeTopBlock(a: any): void;

        function removeTopComment(a: any): void;

        function removeTypedBlock(a: any): void;

        function renameVariableById(a: any, b: any): void;

        function setBlockById(a: any, b: any): void;

        function setVariableMap(a: any): void;

        function sortObjects_(a: any, b: any): any;

        function undo(a: any): void;

        function variableIndexOf(a: any): any;

    }

}

export namespace Xml {
    function allFieldsToDom_(a: any, b: any): void;

    function appendDomToWorkspace(a: any, b: any): any;

    function blockToDom(a: any, b: any): any;

    function blockToDomWithXY(a: any, b: any): any;

    function clearWorkspaceAndLoadFromXml(a: any, b: any): any;

    function cloneShadow_(a: any, b: any): any;

    function deleteNext(a: any): void;

    function domToBlock(a: any, b: any): any;

    function domToBlockHeadless_(a: any, b: any): any;

    function domToField_(a: any, b: any, c: any): void;

    function domToPrettyText(a: any): any;

    function domToText(a: any): any;

    function domToVariables(a: any, b: any): void;

    function domToWorkspace(a: any, b: any): any;

    function fieldToDom_(a: any): any;

    function textToDom(a: any): any;

    function variablesToDom(a: any): any;

    function workspaceToDom(a: any, b: any): any;

}

export namespace blockAnimations {
    const disconnectGroup_: any;

    const disconnectPid_: number;

    function connectionUiEffect(a: any): void;

    function connectionUiStep_(a: any, b: any, c: any): void;

    function disconnectUiEffect(a: any): void;

    function disconnectUiStep_(a: any, b: any, c: any): void;

    function disconnectUiStop(): void;

    function disposeUiEffect(a: any): void;

    function disposeUiStep_(a: any, b: any, c: any, d: any): void;

}

export namespace blockRendering {
    class BottomRow {
        constructor(a: any);

        endsWithElemSpacer(): any;

        hasLeftSquareCorner(a: any): any;

        hasRightSquareCorner(a: any): any;

        measure(): void;

        startsWithElemSpacer(): any;

    }

    class ConstantProvider {
        constructor();

        createBlockStyle_(a: any): any;

        createDom(a: any): void;

        dispose(): void;

        generateSecondaryColour_(a: any): any;

        generateTertiaryColour_(a: any): any;

        getBlockStyle(a: any): any;

        getBlockStyleForColour(a: any): any;

        getCSS_(a: any): any;

        init(): void;

        injectCSS(a: any): void;

        makeInsideCorners(): any;

        makeJaggedTeeth(): any;

        makeNotch(): any;

        makeOutsideCorners(): any;

        makePuzzleTab(): any;

        makeStartHat(): any;

        refreshTheme(a: any): void;

        shapeFor(a: any): any;

        validatedBlockStyle_(a: any): any;

    }

    class Drawer {
        constructor(a: any, b: any);

        draw(): void;

        drawBottom_(): void;

        drawInlineInput_(a: any): void;

        drawInternals_(): void;

        drawJaggedEdge_(a: any): void;

        drawLeft_(): void;

        drawOutline_(): void;

        drawRightSideRow_(a: any): void;

        drawStatementInput_(a: any): void;

        drawTop_(): void;

        drawValueInput_(a: any): void;

        hideHiddenIcons_(): void;

        layoutField_(a: any): void;

        positionExternalValueConnection_(a: any): void;

        positionInlineInputConnection_(a: any): void;

        positionNextConnection_(): void;

        positionOutputConnection_(): void;

        positionPreviousConnection_(): void;

        positionStatementInputConnection_(a: any): void;

        recordSizeOnBlock_(): void;

    }

    class InputRow {
        constructor(a: any);

        endsWithElemSpacer(): any;

        measure(): void;

    }

    class MarkerSvg {
        constructor(a: any, b: any, c: any);

        createDom(): any;

        createDomInternal_(): any;

        dispose(): void;

        draw(a: any, b: any): void;

        firemarkerEvent_(a: any, b: any): void;

        flipRtl_(a: any): void;

        getBlinkProperties_(): any;

        getSvgRoot(): any;

        hide(): void;

        isCursor(): any;

        positionBlock_(a: any, b: any, c: any): void;

        positionInput_(a: any): void;

        positionLine_(a: any, b: any, c: any): void;

        positionOutput_(a: any, b: any, c: any): void;

        positionPrevious_(a: any, b: any, c: any, d: any): void;

        positionRect_(a: any, b: any, c: any, d: any): void;

        setParent_(a: any): void;

        showAtLocation_(a: any): void;

        showCurrent_(): void;

        showWithBlockPrevOutput_(a: any): void;

        showWithCoordinates_(a: any): void;

        showWithField_(a: any): void;

        showWithInput_(a: any): void;

        showWithNext_(a: any): void;

        showWithStack_(a: any): void;

        static CURSOR_CLASS: string;

        static HEIGHT_MULTIPLIER: number;

        static MARKER_CLASS: string;

    }

    class PathObject {
        constructor(a: any, b: any, c: any);

        applyColour(a: any): void;

        flipRTL(): void;

        setClass_(a: any, b: any): void;

        setCursorSvg(a: any): void;

        setMarkerSvg(a: any): void;

        setPath(a: any): void;

        setStyle(a: any): void;

        updateDisabled_(a: any): void;

        updateDraggingDelete(a: any): void;

        updateHighlighted(a: any): void;

        updateInsertionMarker(a: any): void;

        updateMovable(a: any): void;

        updateReplacementHighlight(a: any): void;

        updateSelected(a: any): void;

        updateShadow_(a: any): void;

        updateShapeForInputHighlight(a: any, b: any): void;

    }

    class RenderInfo {
        constructor(a: any, b: any);

        addAlignmentPadding_(a: any, b: any): void;

        addElemSpacing_(): void;

        addInput_(a: any, b: any): void;

        addRowSpacing_(): void;

        alignRowElements_(): void;

        alignStatementRow_(a: any): void;

        computeBounds_(): void;

        createRows_(): void;

        finalize_(): void;

        getDesiredRowWidth_(a: any): any;

        getElemCenterline_(a: any, b: any): any;

        getInRowSpacing_(a: any, b: any): any;

        getRenderer(): any;

        getSpacerRowHeight_(a: any, b: any): any;

        getSpacerRowWidth_(a: any, b: any): any;

        makeSpacerRow_(a: any, b: any): any;

        measure(): void;

        populateBottomRow_(): void;

        populateTopRow_(): void;

        recordElemPositions_(a: any): void;

        shouldStartNewRow_(a: any, b: any): any;

    }

    class Renderer {
        constructor(a: any);

        getConstants(): any;

        init(): void;

        makeConstants_(): any;

        makeDebugger_(): any;

        makeDrawer_(a: any, b: any): any;

        makeMarkerDrawer(a: any, b: any): any;

        makePathObject(a: any, b: any): any;

        makeRenderInfo_(a: any): any;

        render(a: any): void;

        shouldHighlightConnection(a: any): any;

        shouldInsertDraggedBlock(a: any, b: any): any;

    }

    class Row {
        constructor(a: any);

        endsWithElemSpacer(): any;

        getFirstSpacer(): any;

        getLastInput(): any;

        getLastSpacer(): any;

        measure(): void;

        startsWithElemSpacer(): any;

    }

    class SpacerRow {
        constructor(a: any, b: any, c: any);

        measure(): void;

    }

    class TopRow {
        constructor(a: any);

        endsWithElemSpacer(): any;

        hasLeftSquareCorner(a: any): any;

        hasRightSquareCorner(a: any): any;

        measure(): void;

        startsWithElemSpacer(): any;

    }

    const useDebugger: boolean;

    function Connection(a: any, b: any): void;

    function ExternalValueInput(a: any, b: any): void;

    function Field(a: any, b: any, c: any): void;

    function Hat(a: any): void;

    function IPathObject(a: any, b: any): void;

    function Icon(a: any, b: any): void;

    function InRowSpacer(a: any, b: any): void;

    function InlineInput(a: any, b: any): void;

    function InputConnection(a: any, b: any): void;

    function JaggedEdge(a: any): void;

    function Measurable(a: any): void;

    function NextConnection(a: any, b: any): void;

    function OutputConnection(a: any, b: any): void;

    function PreviousConnection(a: any, b: any): void;

    function RoundCorner(a: any, b: any): void;

    function SquareCorner(a: any, b: any): void;

    function StatementInput(a: any, b: any): void;

    function init(a: any): any;

    function register(a: any, b: any): void;

    function startDebugger(): void;

    function stopDebugger(): void;

    function unregister(a: any): void;

    namespace BottomRow {
        namespace superClass_ {
            function endsWithElemSpacer(): any;

            function getFirstSpacer(): any;

            function getLastInput(): any;

            function getLastSpacer(): any;

            function measure(): void;

            function startsWithElemSpacer(): any;

        }

    }

    namespace Connection {
        const superClass_: {
        };

    }

    namespace ExternalValueInput {
        const superClass_: {
        };

    }

    namespace Field {
        const superClass_: {
        };

    }

    namespace Hat {
        const superClass_: {
        };

    }

    namespace Icon {
        const superClass_: {
        };

    }

    namespace InRowSpacer {
        const superClass_: {
        };

    }

    namespace InlineInput {
        const superClass_: {
        };

    }

    namespace InputConnection {
        const superClass_: {
        };

    }

    namespace InputRow {
        namespace superClass_ {
            function endsWithElemSpacer(): any;

            function getFirstSpacer(): any;

            function getLastInput(): any;

            function getLastSpacer(): any;

            function measure(): void;

            function startsWithElemSpacer(): any;

        }

    }

    namespace JaggedEdge {
        const superClass_: {
        };

    }

    namespace NextConnection {
        const superClass_: {
        };

    }

    namespace OutputConnection {
        const superClass_: {
        };

    }

    namespace PreviousConnection {
        const superClass_: {
        };

    }

    namespace RoundCorner {
        const superClass_: {
        };

    }

    namespace SpacerRow {
        namespace superClass_ {
            function endsWithElemSpacer(): any;

            function getFirstSpacer(): any;

            function getLastInput(): any;

            function getLastSpacer(): any;

            function measure(): void;

            function startsWithElemSpacer(): any;

        }

    }

    namespace SquareCorner {
        const superClass_: {
        };

    }

    namespace StatementInput {
        const superClass_: {
        };

    }

    namespace TopRow {
        namespace superClass_ {
            function endsWithElemSpacer(): any;

            function getFirstSpacer(): any;

            function getLastInput(): any;

            function getLastSpacer(): any;

            function measure(): void;

            function startsWithElemSpacer(): any;

        }

    }

    namespace Types {
        const BETWEEN_ROW_SPACER: number;

        const BOTTOM_ROW: number;

        const CONNECTION: number;

        const CORNER: number;

        const EXTERNAL_VALUE_INPUT: number;

        const FIELD: number;

        const HAT: number;

        const ICON: number;

        const INLINE_INPUT: number;

        const INPUT: number;

        const INPUT_ROW: number;

        const IN_ROW_SPACER: number;

        const JAGGED_EDGE: number;

        const LEFT_CORNER: number;

        const LEFT_ROUND_CORNER: number;

        const LEFT_SQUARE_CORNER: number;

        const NEXT_CONNECTION: number;

        const NONE: number;

        const OUTPUT_CONNECTION: number;

        const PREVIOUS_CONNECTION: number;

        const RIGHT_CORNER: number;

        const RIGHT_ROUND_CORNER: number;

        const RIGHT_SQUARE_CORNER: number;

        const ROW: number;

        const SPACER: number;

        const STATEMENT_INPUT: number;

        const TOP_ROW: number;

        const nextTypeValue_: number;

        function getType(a: any): any;

        function isBetweenRowSpacer(a: any): any;

        function isBottomRow(a: any): any;

        function isCorner(a: any): any;

        function isExternalInput(a: any): any;

        function isField(a: any): any;

        function isHat(a: any): any;

        function isIcon(a: any): any;

        function isInRowSpacer(a: any): any;

        function isInlineInput(a: any): any;

        function isInput(a: any): any;

        function isInputRow(a: any): any;

        function isJaggedEdge(a: any): any;

        function isLeftRoundedCorner(a: any): any;

        function isLeftSquareCorner(a: any): any;

        function isNextConnection(a: any): any;

        function isPreviousConnection(a: any): any;

        function isPreviousOrNextConnection(a: any): any;

        function isRightRoundedCorner(a: any): any;

        function isRightSquareCorner(a: any): any;

        function isRow(a: any): any;

        function isSpacer(a: any): any;

        function isStatementInput(a: any): any;

        function isTopOrBottomRow(a: any): any;

        function isTopRow(a: any): any;

    }

    namespace rendererMap_ {
        class geras {
            constructor(a: any);

            getHighlightConstants(): any;

            init(): void;

            makeConstants_(): any;

            makeDrawer_(a: any, b: any): any;

            makeHighlightConstants_(): any;

            makePathObject(a: any, b: any): any;

            makeRenderInfo_(a: any): any;

        }

        class thrasos {
            constructor(a: any);

            makeRenderInfo_(a: any): any;

        }

        class zelos {
            constructor(a: any);

            makeConstants_(): any;

            makeDrawer_(a: any, b: any): any;

            makeMarkerDrawer(a: any, b: any): any;

            makePathObject(a: any, b: any): any;

            makeRenderInfo_(a: any): any;

            shouldHighlightConnection(a: any): any;

            shouldInsertDraggedBlock(a: any, b: any): any;

        }

        namespace geras {
            namespace superClass_ {
                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.geras.superClass_
                const getConstants: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.geras.superClass_
                const init: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.geras.superClass_
                const makeConstants_: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.geras.superClass_
                const makeDebugger_: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.geras.superClass_
                const makeDrawer_: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.geras.superClass_
                const makeMarkerDrawer: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.geras.superClass_
                const makePathObject: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.geras.superClass_
                const makeRenderInfo_: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.geras.superClass_
                const render: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.geras.superClass_
                const shouldHighlightConnection: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.geras.superClass_
                const shouldInsertDraggedBlock: any;

            }

        }

        namespace thrasos {
            namespace superClass_ {
                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.thrasos.superClass_
                const getConstants: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.thrasos.superClass_
                const init: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.thrasos.superClass_
                const makeConstants_: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.thrasos.superClass_
                const makeDebugger_: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.thrasos.superClass_
                const makeDrawer_: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.thrasos.superClass_
                const makeMarkerDrawer: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.thrasos.superClass_
                const makePathObject: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.thrasos.superClass_
                const makeRenderInfo_: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.thrasos.superClass_
                const render: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.thrasos.superClass_
                const shouldHighlightConnection: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.thrasos.superClass_
                const shouldInsertDraggedBlock: any;

            }

        }

        namespace zelos {
            namespace superClass_ {
                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.zelos.superClass_
                const getConstants: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.zelos.superClass_
                const init: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.zelos.superClass_
                const makeConstants_: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.zelos.superClass_
                const makeDebugger_: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.zelos.superClass_
                const makeDrawer_: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.zelos.superClass_
                const makeMarkerDrawer: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.zelos.superClass_
                const makePathObject: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.zelos.superClass_
                const makeRenderInfo_: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.zelos.superClass_
                const render: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.zelos.superClass_
                const shouldHighlightConnection: any;

                // Too-deep object hierarchy from node_blockly.blockRendering.rendererMap_.zelos.superClass_
                const shouldInsertDraggedBlock: any;

            }

        }

    }

}

export namespace fieldRegistry {
    function fromJson(a: any): any;

    function register(a: any, b: any): void;

    function unregister(a: any): void;

    namespace typeMap_ {
        class field_angle {
            constructor(a: any, b: any, c: any);

            configure_(a: any): void;

            displayMouseOrKeyboardValue_(a: any): void;

            doClassValidation_(a: any): any;

            dropdownCreate_(): any;

            dropdownDispose_(): void;

            hide_(): void;

            initView(): void;

            onHtmlInputKeyDown_(a: any): void;

            onMouseMove_(a: any): void;

            render_(): void;

            showEditor_(a: any): void;

            updateGraph_(): void;

            wrapValue_(a: any): any;

            static CLOCKWISE: boolean;

            static HALF: number;

            static OFFSET: number;

            static RADIUS: number;

            static ROUND: number;

            static WRAP: number;

            static fromJson(a: any): any;

        }

        class field_checkbox {
            constructor(a: any, b: any, c: any);

            configure_(a: any): void;

            convertValueToBool_(a: any): any;

            doClassValidation_(a: any): any;

            doValueUpdate_(a: any): void;

            getText(): any;

            getValue(): any;

            getValueBoolean(): any;

            initView(): void;

            setCheckCharacter(a: any): void;

            showEditor_(): void;

            static CHECK_CHAR: string;

            static fromJson(a: any): any;

        }

        class field_colour {
            constructor(a: any, b: any, c: any);

            applyColour(): void;

            configure_(a: any): void;

            doClassValidation_(a: any): any;

            doValueUpdate_(a: any): void;

            dropdownCreate_(): any;

            dropdownDispose_(): void;

            getHighlighted_(): any;

            getText(): any;

            initView(): void;

            moveHighlightBy_(a: any, b: any): void;

            onBlocklyAction(a: any): any;

            onClick_(a: any): void;

            onKeyDown_(a: any): void;

            onMouseEnter_(): void;

            onMouseLeave_(): void;

            onMouseMove_(a: any): void;

            setColours(a: any, b: any): any;

            setColumns(a: any): any;

            setHighlightedCell_(a: any, b: any): void;

            showEditor_(): void;

            static COLOURS: string[];

            static COLUMNS: number;

            static TITLES: any[];

            static fromJson(a: any): any;

        }

        class field_dropdown {
            constructor(a: any, b: any, c: any);

            applyColour(): void;

            createSVGArrow_(): void;

            createTextArrow_(): void;

            doClassValidation_(a: any): any;

            doValueUpdate_(a: any): void;

            dropdownCreate_(): any;

            dropdownDispose_(): void;

            getOptions(a: any): any;

            getText_(): any;

            handleMenuActionEvent_(a: any): void;

            initView(): void;

            isOptionListDynamic(): any;

            onBlocklyAction(a: any): any;

            onItemSelected_(a: any, b: any): void;

            positionSVGArrow_(a: any, b: any): any;

            renderSelectedImage_(a: any): void;

            renderSelectedText_(): void;

            render_(): void;

            shouldAddBorderRect_(): any;

            showEditor_(a: any): void;

            trimOptions_(): void;

            static ARROW_CHAR: string;

            static CHECKMARK_OVERHANG: number;

            static IMAGE_Y_OFFSET: number;

            static IMAGE_Y_PADDING: number;

            static MAX_MENU_HEIGHT_VH: number;

            static applyTrim_(a: any, b: any, c: any): any;

            static fromJson(a: any): any;

            static validateOptions_(a: any): void;

        }

        class field_image {
            constructor(a: any, b: any, c: any, d: any, e: any, f: any, g: any);

            configure_(a: any): void;

            doClassValidation_(a: any): any;

            doValueUpdate_(a: any): void;

            getFlipRtl(): any;

            getText_(): any;

            initView(): void;

            setAlt(a: any): void;

            setOnClickHandler(a: any): void;

            showEditor_(): void;

            static Y_PADDING: number;

            static fromJson(a: any): any;

        }

        class field_input {
            constructor(a: any, b: any, c: any);

            applyColour(): void;

            bindInputEvents_(a: any): void;

            configure_(a: any): void;

            doClassValidation_(a: any): any;

            doValueInvalid_(a: any): void;

            doValueUpdate_(a: any): void;

            getEditorText_(a: any): any;

            getText_(): any;

            getValueFromEditorText_(a: any): any;

            initView(): void;

            isTabNavigable(): any;

            onHtmlInputChange_(a: any): void;

            onHtmlInputKeyDown_(a: any): void;

            render_(): void;

            resizeEditor_(): void;

            setEditorValue_(a: any): void;

            setSpellcheck(a: any): void;

            showEditor_(a: any, b: any): void;

            showInlineEditor_(a: any): void;

            showPromptEditor_(): void;

            unbindInputEvents_(): void;

            widgetCreate_(): any;

            widgetDispose_(): void;

            static BORDERRADIUS: number;

            static fromJson(a: any): any;

            static nonnegativeIntegerValidator(a: any): any;

            static numberValidator(a: any): any;

        }

        class field_label {
            constructor(a: any, b: any, c: any);

            configure_(a: any): void;

            doClassValidation_(a: any): any;

            initView(): void;

            setClass(a: any): void;

            static fromJson(a: any): any;

        }

        class field_label_serializable {
            constructor(a: any, b: any, c: any);

            static fromJson(a: any): any;

        }

        class field_multilinetext {
            constructor(a: any, b: any, c: any);

            getDisplayText_(): any;

            initView(): void;

            onHtmlInputKeyDown_(a: any): void;

            render_(): void;

            resizeEditor_(): void;

            updateSize_(): void;

            widgetCreate_(): any;

            static LINE_HEIGHT: number;

            static fromJson(a: any): any;

        }

        class field_number {
            constructor(a: any, b: any, c: any, d: any, e: any, f: any);

            configure_(a: any): void;

            doClassValidation_(a: any): any;

            getMax(): any;

            getMin(): any;

            getPrecision(): any;

            setConstraints(a: any, b: any, c: any): void;

            setMax(a: any): void;

            setMaxInternal_(a: any): void;

            setMin(a: any): void;

            setMinInternal_(a: any): void;

            setPrecision(a: any): void;

            setPrecisionInternal_(a: any): void;

            widgetCreate_(): any;

            static fromJson(a: any): any;

        }

        class field_variable {
            constructor(a: any, b: any, c: any, d: any, e: any);

            configure_(a: any): void;

            doClassValidation_(a: any): any;

            doValueUpdate_(a: any): void;

            fromXml(a: any): void;

            getText(): any;

            getValidator(): any;

            getValue(): any;

            getVariable(): any;

            getVariableTypes_(): any;

            initModel(): void;

            onItemSelected_(a: any, b: any): void;

            referencesVariables(): any;

            refreshVariableName(): void;

            setSourceBlock(a: any): void;

            setTypes_(a: any, b: any): void;

            shouldAddBorderRect_(): any;

            toXml(a: any): any;

            typeIsAllowed_(a: any): any;

            static dropdownCreate(): any;

            static fromJson(a: any): any;

        }

        namespace field_angle {
            namespace superClass_ {
                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const CURSOR: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const EDITABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const SERIALIZABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const applyColour: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const bindEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const bindInputEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const callValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const classValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const clickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const configure_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const createBorderRect_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const createTextElement_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const dispose: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const disposed: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const doClassValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const doValueInvalid_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const doValueUpdate_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const forceRerender: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const fromXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const getAbsoluteXY_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const getClickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const getDisplayText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const getEditorText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const getFlipRtl: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const getParentInput: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const getScaledBBox: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const getSize: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const getSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const getSvgRoot: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const getText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const getText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const getValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const getValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const getValueFromEditorText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const init: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const initModel: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const initView: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const isClickable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const isCurrentlyEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const isDirty_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const isSerializable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const isTabNavigable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const isVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const markDirty: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const maxDisplayLength: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const name: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const onBlocklyAction: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const onHtmlInputChange_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const onHtmlInputKeyDown_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const onMouseDown_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const processValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const referencesVariables: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const render_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const resizeEditor_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const setCursorSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const setEditorValue_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const setMarkerSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const setSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const setSpellcheck: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const setText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const setTooltip: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const setValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const setValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const setVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const showEditor: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const showEditor_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const showInlineEditor_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const showPromptEditor_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const sourceBlock_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const toXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const unbindInputEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const updateEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const updateSize_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const updateWidth: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const visible_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const widgetCreate_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_angle.superClass_
                const widgetDispose_: any;

            }

        }

        namespace field_checkbox {
            namespace superClass_ {
                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const EDITABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const SERIALIZABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const applyColour: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const bindEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const callValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const classValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const clickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const configure_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const createBorderRect_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const createTextElement_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const dispose: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const disposed: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const doClassValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const doValueInvalid_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const doValueUpdate_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const forceRerender: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const fromXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const getAbsoluteXY_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const getClickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const getDisplayText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const getFlipRtl: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const getParentInput: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const getScaledBBox: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const getSize: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const getSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const getSvgRoot: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const getText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const getValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const getValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const init: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const initModel: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const initView: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const isClickable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const isCurrentlyEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const isDirty_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const isSerializable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const isTabNavigable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const isVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const markDirty: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const maxDisplayLength: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const name: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const onBlocklyAction: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const onMouseDown_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const processValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const referencesVariables: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const render_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const setCursorSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const setMarkerSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const setSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const setText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const setTooltip: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const setValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const setValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const setVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const showEditor: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const sourceBlock_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const toXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const updateEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const updateSize_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const updateWidth: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_checkbox.superClass_
                const visible_: any;

            }

        }

        namespace field_colour {
            namespace superClass_ {
                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const EDITABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const SERIALIZABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const applyColour: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const bindEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const callValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const classValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const clickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const configure_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const createBorderRect_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const createTextElement_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const dispose: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const disposed: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const doClassValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const doValueInvalid_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const doValueUpdate_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const forceRerender: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const fromXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const getAbsoluteXY_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const getClickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const getDisplayText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const getFlipRtl: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const getParentInput: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const getScaledBBox: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const getSize: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const getSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const getSvgRoot: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const getText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const getValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const getValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const init: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const initModel: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const initView: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const isClickable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const isCurrentlyEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const isDirty_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const isSerializable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const isTabNavigable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const isVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const markDirty: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const maxDisplayLength: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const name: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const onBlocklyAction: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const onMouseDown_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const processValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const referencesVariables: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const render_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const setCursorSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const setMarkerSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const setSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const setText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const setTooltip: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const setValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const setValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const setVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const showEditor: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const sourceBlock_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const toXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const updateEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const updateSize_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const updateWidth: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_colour.superClass_
                const visible_: any;

            }

        }

        namespace field_dropdown {
            namespace superClass_ {
                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const EDITABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const SERIALIZABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const applyColour: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const bindEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const callValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const classValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const clickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const configure_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const createBorderRect_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const createTextElement_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const dispose: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const disposed: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const doClassValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const doValueInvalid_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const doValueUpdate_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const forceRerender: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const fromXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const getAbsoluteXY_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const getClickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const getDisplayText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const getFlipRtl: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const getParentInput: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const getScaledBBox: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const getSize: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const getSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const getSvgRoot: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const getText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const getValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const getValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const init: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const initModel: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const initView: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const isClickable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const isCurrentlyEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const isDirty_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const isSerializable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const isTabNavigable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const isVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const markDirty: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const maxDisplayLength: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const name: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const onBlocklyAction: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const onMouseDown_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const processValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const referencesVariables: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const render_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const setCursorSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const setMarkerSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const setSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const setText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const setTooltip: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const setValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const setValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const setVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const showEditor: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const sourceBlock_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const toXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const updateEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const updateSize_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const updateWidth: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_dropdown.superClass_
                const visible_: any;

            }

        }

        namespace field_image {
            namespace superClass_ {
                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const EDITABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const SERIALIZABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const applyColour: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const bindEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const callValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const classValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const clickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const configure_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const createBorderRect_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const createTextElement_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const dispose: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const disposed: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const doClassValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const doValueInvalid_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const doValueUpdate_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const forceRerender: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const fromXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const getAbsoluteXY_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const getClickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const getDisplayText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const getFlipRtl: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const getParentInput: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const getScaledBBox: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const getSize: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const getSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const getSvgRoot: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const getText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const getValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const getValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const init: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const initModel: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const initView: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const isClickable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const isCurrentlyEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const isDirty_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const isSerializable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const isTabNavigable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const isVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const markDirty: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const maxDisplayLength: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const name: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const onBlocklyAction: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const onMouseDown_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const processValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const referencesVariables: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const render_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const setCursorSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const setMarkerSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const setSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const setText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const setTooltip: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const setValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const setValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const setVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const showEditor: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const sourceBlock_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const toXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const updateEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const updateSize_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const updateWidth: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_image.superClass_
                const visible_: any;

            }

        }

        namespace field_input {
            namespace superClass_ {
                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const EDITABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const SERIALIZABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const applyColour: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const bindEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const callValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const classValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const clickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const configure_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const createBorderRect_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const createTextElement_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const dispose: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const disposed: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const doClassValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const doValueInvalid_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const doValueUpdate_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const forceRerender: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const fromXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const getAbsoluteXY_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const getClickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const getDisplayText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const getFlipRtl: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const getParentInput: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const getScaledBBox: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const getSize: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const getSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const getSvgRoot: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const getText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const getValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const getValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const init: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const initModel: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const initView: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const isClickable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const isCurrentlyEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const isDirty_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const isSerializable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const isTabNavigable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const isVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const markDirty: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const maxDisplayLength: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const name: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const onBlocklyAction: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const onMouseDown_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const processValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const referencesVariables: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const render_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const setCursorSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const setMarkerSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const setSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const setText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const setTooltip: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const setValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const setValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const setVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const showEditor: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const sourceBlock_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const toXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const updateEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const updateSize_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const updateWidth: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_input.superClass_
                const visible_: any;

            }

        }

        namespace field_label {
            namespace superClass_ {
                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const EDITABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const SERIALIZABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const applyColour: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const bindEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const callValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const classValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const clickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const configure_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const createBorderRect_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const createTextElement_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const dispose: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const disposed: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const doClassValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const doValueInvalid_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const doValueUpdate_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const forceRerender: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const fromXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const getAbsoluteXY_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const getClickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const getDisplayText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const getFlipRtl: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const getParentInput: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const getScaledBBox: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const getSize: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const getSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const getSvgRoot: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const getText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const getValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const getValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const init: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const initModel: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const initView: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const isClickable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const isCurrentlyEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const isDirty_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const isSerializable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const isTabNavigable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const isVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const markDirty: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const maxDisplayLength: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const name: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const onBlocklyAction: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const onMouseDown_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const processValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const referencesVariables: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const render_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const setCursorSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const setMarkerSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const setSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const setText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const setTooltip: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const setValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const setValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const setVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const showEditor: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const sourceBlock_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const toXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const updateEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const updateSize_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const updateWidth: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label.superClass_
                const visible_: any;

            }

        }

        namespace field_label_serializable {
            namespace superClass_ {
                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const EDITABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const SERIALIZABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const applyColour: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const bindEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const callValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const classValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const clickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const configure_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const createBorderRect_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const createTextElement_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const dispose: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const disposed: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const doClassValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const doValueInvalid_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const doValueUpdate_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const forceRerender: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const fromXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const getAbsoluteXY_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const getClickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const getDisplayText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const getFlipRtl: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const getParentInput: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const getScaledBBox: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const getSize: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const getSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const getSvgRoot: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const getText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const getValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const getValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const init: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const initModel: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const initView: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const isClickable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const isCurrentlyEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const isDirty_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const isSerializable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const isTabNavigable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const isVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const markDirty: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const maxDisplayLength: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const name: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const onBlocklyAction: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const onMouseDown_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const processValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const referencesVariables: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const render_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const setClass: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const setCursorSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const setMarkerSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const setSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const setText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const setTooltip: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const setValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const setValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const setVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const showEditor: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const sourceBlock_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const toXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const updateEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const updateSize_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const updateWidth: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_label_serializable.superClass_
                const visible_: any;

            }

        }

        namespace field_multilinetext {
            namespace superClass_ {
                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const CURSOR: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const EDITABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const SERIALIZABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const applyColour: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const bindEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const bindInputEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const callValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const classValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const clickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const configure_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const createBorderRect_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const createTextElement_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const dispose: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const disposed: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const doClassValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const doValueInvalid_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const doValueUpdate_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const forceRerender: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const fromXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const getAbsoluteXY_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const getClickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const getDisplayText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const getEditorText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const getFlipRtl: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const getParentInput: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const getScaledBBox: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const getSize: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const getSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const getSvgRoot: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const getText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const getText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const getValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const getValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const getValueFromEditorText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const init: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const initModel: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const initView: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const isClickable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const isCurrentlyEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const isDirty_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const isSerializable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const isTabNavigable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const isVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const markDirty: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const maxDisplayLength: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const name: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const onBlocklyAction: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const onHtmlInputChange_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const onHtmlInputKeyDown_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const onMouseDown_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const processValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const referencesVariables: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const render_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const resizeEditor_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const setCursorSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const setEditorValue_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const setMarkerSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const setSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const setSpellcheck: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const setText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const setTooltip: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const setValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const setValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const setVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const showEditor: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const showEditor_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const showInlineEditor_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const showPromptEditor_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const sourceBlock_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const toXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const unbindInputEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const updateEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const updateSize_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const updateWidth: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const visible_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const widgetCreate_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_multilinetext.superClass_
                const widgetDispose_: any;

            }

        }

        namespace field_number {
            namespace superClass_ {
                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const CURSOR: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const EDITABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const SERIALIZABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const applyColour: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const bindEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const bindInputEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const callValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const classValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const clickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const configure_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const createBorderRect_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const createTextElement_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const dispose: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const disposed: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const doClassValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const doValueInvalid_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const doValueUpdate_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const forceRerender: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const fromXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const getAbsoluteXY_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const getClickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const getDisplayText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const getEditorText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const getFlipRtl: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const getParentInput: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const getScaledBBox: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const getSize: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const getSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const getSvgRoot: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const getText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const getText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const getValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const getValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const getValueFromEditorText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const init: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const initModel: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const initView: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const isClickable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const isCurrentlyEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const isDirty_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const isSerializable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const isTabNavigable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const isVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const markDirty: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const maxDisplayLength: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const name: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const onBlocklyAction: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const onHtmlInputChange_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const onHtmlInputKeyDown_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const onMouseDown_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const processValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const referencesVariables: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const render_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const resizeEditor_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const setCursorSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const setEditorValue_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const setMarkerSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const setSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const setSpellcheck: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const setText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const setTooltip: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const setValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const setValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const setVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const showEditor: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const showEditor_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const showInlineEditor_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const showPromptEditor_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const sourceBlock_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const toXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const unbindInputEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const updateEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const updateSize_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const updateWidth: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const visible_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const widgetCreate_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_number.superClass_
                const widgetDispose_: any;

            }

        }

        namespace field_variable {
            namespace superClass_ {
                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const CURSOR: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const EDITABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const SERIALIZABLE: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const applyColour: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const bindEvents_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const callValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const classValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const clickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const configure_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const createBorderRect_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const createSVGArrow_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const createTextArrow_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const createTextElement_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const dispose: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const disposed: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const doClassValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const doValueInvalid_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const doValueUpdate_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const dropdownCreate_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const dropdownDispose_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const forceRerender: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const fromXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const getAbsoluteXY_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const getClickTarget_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const getDisplayText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const getFlipRtl: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const getOptions: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const getParentInput: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const getScaledBBox: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const getSize: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const getSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const getSvgRoot: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const getText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const getText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const getValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const getValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const handleMenuActionEvent_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const init: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const initModel: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const initView: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const isClickable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const isCurrentlyEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const isDirty_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const isOptionListDynamic: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const isSerializable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const isTabNavigable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const isVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const markDirty: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const maxDisplayLength: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const name: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const onBlocklyAction: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const onItemSelected_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const onMouseDown_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const positionSVGArrow_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const processValidation_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const referencesVariables: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const renderSelectedImage_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const renderSelectedText_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const render_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const setCursorSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const setMarkerSvg: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const setSourceBlock: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const setText: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const setTooltip: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const setValidator: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const setValue: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const setVisible: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const shouldAddBorderRect_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const showEditor: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const showEditor_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const sourceBlock_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const toXml: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const trimOptions_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const updateEditable: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const updateSize_: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const updateWidth: any;

                // Too-deep object hierarchy from node_blockly.fieldRegistry.typeMap_.field_variable.superClass_
                const visible_: any;

            }

        }

    }

}

export namespace geras {
    class Drawer {
        constructor(a: any, b: any);

        draw(): void;

        drawBottom_(): void;

        drawInlineInput_(a: any): void;

        drawJaggedEdge_(a: any): void;

        drawLeft_(): void;

        drawRightSideRow_(a: any): void;

        drawStatementInput_(a: any): void;

        drawTop_(): void;

        drawValueInput_(a: any): void;

        positionExternalValueConnection_(a: any): void;

        positionInlineInputConnection_(a: any): void;

        positionNextConnection_(): void;

        positionStatementInputConnection_(a: any): void;

    }

    class HighlightConstantProvider {
        constructor(a: any);

        makeInsideCorner(): any;

        makeJaggedTeeth(): any;

        makeNotch(): any;

        makeOutsideCorner(): any;

        makePuzzleTab(): any;

        makeStartHat(): any;

    }

    class Highlighter {
        constructor(a: any);

        drawBottomRow(a: any): void;

        drawInlineInput(a: any): void;

        drawJaggedEdge_(a: any): void;

        drawLeft(): void;

        drawRightSideRow(a: any): void;

        drawStatementInput(a: any): void;

        drawTopCorner(a: any): void;

        drawValueInput(a: any): void;

        getPath(): any;

    }

    class PathObject {
        constructor(a: any, b: any, c: any);

        applyColour(a: any): void;

        flipRTL(): void;

        setHighlightPath(a: any): void;

        setPath(a: any): void;

        setStyle(a: any): void;

        updateDisabled_(a: any): void;

        updateHighlighted(a: any): void;

        updateShadow_(a: any): void;

    }

    class RenderInfo {
        constructor(a: any, b: any);

        addElemSpacing_(): void;

        addInput_(a: any, b: any): void;

        alignRowElements_(): void;

        finalize_(): void;

        getDesiredRowWidth_(a: any): any;

        getElemCenterline_(a: any, b: any): any;

        getInRowSpacing_(a: any, b: any): any;

        getRenderer(): any;

        getSpacerRowHeight_(a: any, b: any): any;

        populateBottomRow_(): void;

    }

    class Renderer {
        constructor(a: any);

        getHighlightConstants(): any;

        init(): void;

        makeConstants_(): any;

        makeDrawer_(a: any, b: any): any;

        makeHighlightConstants_(): any;

        makePathObject(a: any, b: any): any;

        makeRenderInfo_(a: any): any;

    }

    function ConstantProvider(): void;

    function InlineInput(a: any, b: any): void;

    function StatementInput(a: any, b: any): void;

    namespace ConstantProvider {
        namespace superClass_ {
            function createBlockStyle_(a: any): any;

            function createDom(a: any): void;

            function dispose(): void;

            function generateSecondaryColour_(a: any): any;

            function generateTertiaryColour_(a: any): any;

            function getBlockStyle(a: any): any;

            function getBlockStyleForColour(a: any): any;

            function getCSS_(a: any): any;

            function init(): void;

            function injectCSS(a: any): void;

            function makeInsideCorners(): any;

            function makeJaggedTeeth(): any;

            function makeNotch(): any;

            function makeOutsideCorners(): any;

            function makePuzzleTab(): any;

            function makeStartHat(): any;

            function refreshTheme(a: any): void;

            function shapeFor(a: any): any;

            function validatedBlockStyle_(a: any): any;

        }

    }

    namespace Drawer {
        namespace superClass_ {
            function draw(): void;

            function drawBottom_(): void;

            function drawInlineInput_(a: any): void;

            function drawInternals_(): void;

            function drawJaggedEdge_(a: any): void;

            function drawLeft_(): void;

            function drawOutline_(): void;

            function drawRightSideRow_(a: any): void;

            function drawStatementInput_(a: any): void;

            function drawTop_(): void;

            function drawValueInput_(a: any): void;

            function hideHiddenIcons_(): void;

            function layoutField_(a: any): void;

            function positionExternalValueConnection_(a: any): void;

            function positionInlineInputConnection_(a: any): void;

            function positionNextConnection_(): void;

            function positionOutputConnection_(): void;

            function positionPreviousConnection_(): void;

            function positionStatementInputConnection_(a: any): void;

            function recordSizeOnBlock_(): void;

        }

    }

    namespace InlineInput {
        const superClass_: {
        };

    }

    namespace PathObject {
        namespace superClass_ {
            function applyColour(a: any): void;

            function flipRTL(): void;

            function setClass_(a: any, b: any): void;

            function setCursorSvg(a: any): void;

            function setMarkerSvg(a: any): void;

            function setPath(a: any): void;

            function setStyle(a: any): void;

            function updateDisabled_(a: any): void;

            function updateDraggingDelete(a: any): void;

            function updateHighlighted(a: any): void;

            function updateInsertionMarker(a: any): void;

            function updateMovable(a: any): void;

            function updateReplacementHighlight(a: any): void;

            function updateSelected(a: any): void;

            function updateShadow_(a: any): void;

            function updateShapeForInputHighlight(a: any, b: any): void;

        }

    }

    namespace RenderInfo {
        namespace superClass_ {
            function addAlignmentPadding_(a: any, b: any): void;

            function addElemSpacing_(): void;

            function addInput_(a: any, b: any): void;

            function addRowSpacing_(): void;

            function alignRowElements_(): void;

            function alignStatementRow_(a: any): void;

            function computeBounds_(): void;

            function createRows_(): void;

            function finalize_(): void;

            function getDesiredRowWidth_(a: any): any;

            function getElemCenterline_(a: any, b: any): any;

            function getInRowSpacing_(a: any, b: any): any;

            function getRenderer(): any;

            function getSpacerRowHeight_(a: any, b: any): any;

            function getSpacerRowWidth_(a: any, b: any): any;

            function makeSpacerRow_(a: any, b: any): any;

            function measure(): void;

            function populateBottomRow_(): void;

            function populateTopRow_(): void;

            function recordElemPositions_(a: any): void;

            function shouldStartNewRow_(a: any, b: any): any;

        }

    }

    namespace Renderer {
        namespace superClass_ {
            function getConstants(): any;

            function init(): void;

            function makeConstants_(): any;

            function makeDebugger_(): any;

            function makeDrawer_(a: any, b: any): any;

            function makeMarkerDrawer(a: any, b: any): any;

            function makePathObject(a: any, b: any): any;

            function makeRenderInfo_(a: any): any;

            function render(a: any): void;

            function shouldHighlightConnection(a: any): any;

            function shouldInsertDraggedBlock(a: any, b: any): any;

        }

    }

    namespace StatementInput {
        const superClass_: {
        };

    }

}

export namespace inject {
    function bindDocumentEvents_(): void;

    function loadSounds_(a: any, b: any): void;

}

export namespace navigation {
    const ACTION_DISCONNECT: {
        desc: string;
        name: string;
    };

    const ACTION_EXIT: {
        desc: string;
        name: string;
    };

    const ACTION_IN: {
        desc: string;
        name: string;
    };

    const ACTION_INSERT: {
        desc: string;
        name: string;
    };

    const ACTION_MARK: {
        desc: string;
        name: string;
    };

    const ACTION_MOVE_WS_CURSOR_DOWN: {
        desc: string;
        name: string;
    };

    const ACTION_MOVE_WS_CURSOR_LEFT: {
        desc: string;
        name: string;
    };

    const ACTION_MOVE_WS_CURSOR_RIGHT: {
        desc: string;
        name: string;
    };

    const ACTION_MOVE_WS_CURSOR_UP: {
        desc: string;
        name: string;
    };

    const ACTION_NEXT: {
        desc: string;
        name: string;
    };

    const ACTION_OUT: {
        desc: string;
        name: string;
    };

    const ACTION_PREVIOUS: {
        desc: string;
        name: string;
    };

    const ACTION_TOGGLE_KEYBOARD_NAV: {
        desc: string;
        name: string;
    };

    const ACTION_TOOLBOX: {
        desc: string;
        name: string;
    };

    const MARKER_NAME: string;

    const READONLY_ACTION_LIST: {
        desc: string;
        name: string;
    }[];

    const STATE_FLYOUT: number;

    const STATE_TOOLBOX: number;

    const STATE_WS: number;

    const WS_MOVE_DISTANCE: number;

    const actionNames: {
        DISCONNECT: string;
        EXIT: string;
        IN: string;
        INSERT: string;
        MARK: string;
        MOVE_WS_CURSOR_DOWN: string;
        MOVE_WS_CURSOR_LEFT: string;
        MOVE_WS_CURSOR_RIGHT: string;
        MOVE_WS_CURSOR_UP: string;
        NEXT: string;
        OUT: string;
        PREVIOUS: string;
        TOGGLE_KEYBOARD_NAV: string;
        TOOLBOX: string;
    };

    const currentState_: number;

    const loggingCallback: any;

    function connect_(a: any, b: any): any;

    function disableKeyboardAccessibility(): void;

    function disconnectBlocks_(): void;

    function disconnectChild_(a: any, b: any): void;

    function enableKeyboardAccessibility(): void;

    function error_(a: any): void;

    function flyoutOnAction_(a: any): any;

    function focusFlyout_(): void;

    function focusToolbox_(): void;

    function focusWorkspace_(): void;

    function getFlyoutCursor_(): any;

    function getInferiorConnection_(a: any): any;

    function getMarker(): any;

    function getSuperiorConnection_(a: any): any;

    function getTopNode(a: any): any;

    function handleActions_(a: any): any;

    function handleEnterForWS_(): void;

    function insertBlock(a: any, b: any): any;

    function insertFromFlyout(): void;

    function log_(a: any): void;

    function markAtCursor_(): void;

    function modifyWarn_(): any;

    function modify_(): any;

    function moveAndConnect_(a: any, b: any): any;

    function moveBlockToWorkspace_(a: any, b: any): any;

    function moveCursorOnBlockDelete(a: any): void;

    function moveCursorOnBlockMutation(a: any): void;

    function moveWSCursor_(a: any, b: any): any;

    function onBlocklyAction(a: any): any;

    function onKeyPress(a: any): any;

    function removeMark_(): void;

    function resetFlyout_(a: any): void;

    function setState(a: any): void;

    function toolboxOnAction_(a: any): any;

    function warn_(a: any): void;

    function workspaceOnAction_(a: any): any;

}

export namespace thrasos {
    class RenderInfo {
        constructor(a: any, b: any);

        addElemSpacing_(): void;

        finalize_(): void;

        getElemCenterline_(a: any, b: any): any;

        getInRowSpacing_(a: any, b: any): any;

        getRenderer(): any;

        getSpacerRowHeight_(a: any, b: any): any;

    }

    class Renderer {
        constructor(a: any);

        makeRenderInfo_(a: any): any;

    }

    namespace RenderInfo {
        namespace superClass_ {
            function addAlignmentPadding_(a: any, b: any): void;

            function addElemSpacing_(): void;

            function addInput_(a: any, b: any): void;

            function addRowSpacing_(): void;

            function alignRowElements_(): void;

            function alignStatementRow_(a: any): void;

            function computeBounds_(): void;

            function createRows_(): void;

            function finalize_(): void;

            function getDesiredRowWidth_(a: any): any;

            function getElemCenterline_(a: any, b: any): any;

            function getInRowSpacing_(a: any, b: any): any;

            function getRenderer(): any;

            function getSpacerRowHeight_(a: any, b: any): any;

            function getSpacerRowWidth_(a: any, b: any): any;

            function makeSpacerRow_(a: any, b: any): any;

            function measure(): void;

            function populateBottomRow_(): void;

            function populateTopRow_(): void;

            function recordElemPositions_(a: any): void;

            function shouldStartNewRow_(a: any, b: any): any;

        }

    }

    namespace Renderer {
        namespace superClass_ {
            function getConstants(): any;

            function init(): void;

            function makeConstants_(): any;

            function makeDebugger_(): any;

            function makeDrawer_(a: any, b: any): any;

            function makeMarkerDrawer(a: any, b: any): any;

            function makePathObject(a: any, b: any): any;

            function makeRenderInfo_(a: any): any;

            function render(a: any): void;

            function shouldHighlightConnection(a: any): any;

            function shouldInsertDraggedBlock(a: any, b: any): any;

        }

    }

}

export namespace tree {
    class BaseNode {
        constructor(a: any, b: any);

        add(a: any): void;

        addChildAt(a: any, b: any): void;

        computeDepth_(): any;

        contains(a: any): any;

        createDom(): void;

        disposeInternal(): void;

        doNodeCollapsed(): void;

        doNodeExpanded(): void;

        enterDocument(): void;

        exitDocument(): void;

        getBackgroundPosition(): any;

        getCalculatedIconClass(): void;

        getChildren(): any;

        getChildrenElement(): any;

        getConfig(): any;

        getDepth(): any;

        getElement(): any;

        getExpanded(): any;

        getExpandedIconClass(): any;

        getFirstChild(): any;

        getIconClass(): any;

        getIconDom(): any;

        getIconElement(): any;

        getLabelDom(): any;

        getLabelElement(): any;

        getLastChild(): any;

        getLastShownDescendant(): any;

        getNextShownNode(): any;

        getNextSibling(): any;

        getPixelIndent_(): any;

        getPreviousShownNode(): any;

        getPreviousSibling(): any;

        getRowClassName(): any;

        getRowDom(): any;

        getRowElement(): any;

        getText(): any;

        getTree(): any;

        initAccessibility(): void;

        isLastSibling(): any;

        isSelected(): any;

        isUserCollapsible(): any;

        onClick_(a: any): void;

        onKeyDown(a: any): any;

        onMouseDown(a: any): void;

        select(): void;

        selectChild(): any;

        selectFirst(): void;

        selectNext(): any;

        selectParent(): any;

        selectPrevious(): any;

        setDepth_(a: any): void;

        setExpanded(a: any): void;

        setExpandedInternal(a: any): void;

        setSelectedInternal(a: any): void;

        setText(a: any): void;

        setTreeInternal(a: any): void;

        toDom(): any;

        toggle(): void;

        updateExpandIcon(): void;

        updateIcon_(): void;

        updateRow(): void;

        static allNodes: {
        };

    }

    class TreeControl {
        constructor(a: any, b: any);

        attachEvents_(): void;

        createNode(a: any): any;

        detachEvents_(): void;

        enterDocument(): void;

        exitDocument(): void;

        getCalculatedIconClass(): any;

        getDepth(): any;

        getExpanded(): any;

        getIconElement(): any;

        getNodeFromEvent_(a: any): any;

        getRowClassName(): any;

        getSelectedItem(): any;

        getToolbox(): any;

        getTree(): any;

        handleBlur_(a: any): void;

        handleFocus_(a: any): void;

        handleKeyEvent_(a: any): any;

        handleMouseEvent_(a: any): void;

        hasFocus(): any;

        initAccessibility(): void;

        onAfterSelected(a: any): void;

        onBeforeSelected(a: any): void;

        setExpanded(a: any): void;

        setSelectedItem(a: any): void;

        updateExpandIcon(): void;

    }

    class TreeNode {
        constructor(a: any, b: any, c: any);

        doNodeCollapsed(): void;

        doNodeExpanded(): void;

        getCalculatedIconClass(): any;

        getTree(): any;

        onClick_(a: any): void;

        onKeyDown(a: any): any;

        onMouseDown(a: any): void;

        onSizeChanged(a: any): void;

        resizeToolbox_(): void;

    }

    namespace BaseNode {
        namespace superClass_ {
            function addChild(a: any, b: any): void;

            function addChildAt(a: any, b: any, c: any): void;

            function createDom(): void;

            function dispose(): void;

            function disposeInternal(): void;

            function enterDocument(): void;

            function exitDocument(): void;

            function forEachChild(a: any, b: any): void;

            function getChild(a: any): any;

            function getChildAt(a: any): any;

            function getChildCount(): any;

            function getContentElement(): any;

            function getElement(): any;

            function getId(): any;

            function getParent(): any;

            function hasChildren(): any;

            function indexOfChild(a: any): any;

            function isInDocument(): any;

            function isRightToLeft(): any;

            function render(a: any): void;

            function renderBefore(a: any): void;

            function render_(a: any, b: any): void;

            function setElementInternal(a: any): void;

            function setParent(a: any): void;

            function setRightToLeft(a: any): void;

        }

    }

    namespace TreeControl {
        namespace superClass_ {
            function add(a: any): void;

            function addChild(a: any, b: any): void;

            function addChildAt(a: any, b: any): void;

            function computeDepth_(): any;

            function contains(a: any): any;

            function createDom(): void;

            function dispose(): void;

            function disposeInternal(): void;

            function doNodeCollapsed(): void;

            function doNodeExpanded(): void;

            function enterDocument(): void;

            function exitDocument(): void;

            function forEachChild(a: any, b: any): void;

            function getBackgroundPosition(): any;

            function getCalculatedIconClass(): void;

            function getChild(a: any): any;

            function getChildAt(a: any): any;

            function getChildCount(): any;

            function getChildren(): any;

            function getChildrenElement(): any;

            function getConfig(): any;

            function getContentElement(): any;

            function getDepth(): any;

            function getElement(): any;

            function getExpanded(): any;

            function getExpandedIconClass(): any;

            function getFirstChild(): any;

            function getIconClass(): any;

            function getIconDom(): any;

            function getIconElement(): any;

            function getId(): any;

            function getLabelDom(): any;

            function getLabelElement(): any;

            function getLastChild(): any;

            function getLastShownDescendant(): any;

            function getNextShownNode(): any;

            function getNextSibling(): any;

            function getParent(): any;

            function getPixelIndent_(): any;

            function getPreviousShownNode(): any;

            function getPreviousSibling(): any;

            function getRowClassName(): any;

            function getRowDom(): any;

            function getRowElement(): any;

            function getText(): any;

            function getTree(): any;

            function hasChildren(): any;

            function indexOfChild(a: any): any;

            function initAccessibility(): void;

            function isInDocument(): any;

            function isLastSibling(): any;

            function isRightToLeft(): any;

            function isSelected(): any;

            function isUserCollapsible(): any;

            function onClick_(a: any): void;

            function onKeyDown(a: any): any;

            function onMouseDown(a: any): void;

            function render(a: any): void;

            function renderBefore(a: any): void;

            function render_(a: any, b: any): void;

            function select(): void;

            function selectChild(): any;

            function selectFirst(): void;

            function selectNext(): any;

            function selectParent(): any;

            function selectPrevious(): any;

            function setDepth_(a: any): void;

            function setElementInternal(a: any): void;

            function setExpanded(a: any): void;

            function setExpandedInternal(a: any): void;

            function setParent(a: any): void;

            function setRightToLeft(a: any): void;

            function setSelectedInternal(a: any): void;

            function setText(a: any): void;

            function setTreeInternal(a: any): void;

            function toDom(): any;

            function toggle(): void;

            function updateExpandIcon(): void;

            function updateIcon_(): void;

            function updateRow(): void;

        }

    }

    namespace TreeNode {
        namespace superClass_ {
            function add(a: any): void;

            function addChild(a: any, b: any): void;

            function addChildAt(a: any, b: any): void;

            function computeDepth_(): any;

            function contains(a: any): any;

            function createDom(): void;

            function dispose(): void;

            function disposeInternal(): void;

            function doNodeCollapsed(): void;

            function doNodeExpanded(): void;

            function enterDocument(): void;

            function exitDocument(): void;

            function forEachChild(a: any, b: any): void;

            function getBackgroundPosition(): any;

            function getCalculatedIconClass(): void;

            function getChild(a: any): any;

            function getChildAt(a: any): any;

            function getChildCount(): any;

            function getChildren(): any;

            function getChildrenElement(): any;

            function getConfig(): any;

            function getContentElement(): any;

            function getDepth(): any;

            function getElement(): any;

            function getExpanded(): any;

            function getExpandedIconClass(): any;

            function getFirstChild(): any;

            function getIconClass(): any;

            function getIconDom(): any;

            function getIconElement(): any;

            function getId(): any;

            function getLabelDom(): any;

            function getLabelElement(): any;

            function getLastChild(): any;

            function getLastShownDescendant(): any;

            function getNextShownNode(): any;

            function getNextSibling(): any;

            function getParent(): any;

            function getPixelIndent_(): any;

            function getPreviousShownNode(): any;

            function getPreviousSibling(): any;

            function getRowClassName(): any;

            function getRowDom(): any;

            function getRowElement(): any;

            function getText(): any;

            function getTree(): any;

            function hasChildren(): any;

            function indexOfChild(a: any): any;

            function initAccessibility(): void;

            function isInDocument(): any;

            function isLastSibling(): any;

            function isRightToLeft(): any;

            function isSelected(): any;

            function isUserCollapsible(): any;

            function onClick_(a: any): void;

            function onKeyDown(a: any): any;

            function onMouseDown(a: any): void;

            function render(a: any): void;

            function renderBefore(a: any): void;

            function render_(a: any, b: any): void;

            function select(): void;

            function selectChild(): any;

            function selectFirst(): void;

            function selectNext(): any;

            function selectParent(): any;

            function selectPrevious(): any;

            function setDepth_(a: any): void;

            function setElementInternal(a: any): void;

            function setExpanded(a: any): void;

            function setExpandedInternal(a: any): void;

            function setParent(a: any): void;

            function setRightToLeft(a: any): void;

            function setSelectedInternal(a: any): void;

            function setText(a: any): void;

            function setTreeInternal(a: any): void;

            function toDom(): any;

            function toggle(): void;

            function updateExpandIcon(): void;

            function updateIcon_(): void;

            function updateRow(): void;

        }

    }

}

export namespace utils {
    class Coordinate {
        constructor(a: any, b: any);

        scale(a: any): any;

        translate(a: any, b: any): any;

        static difference(a: any, b: any): any;

        static distance(a: any, b: any): any;

        static equals(a: any, b: any): any;

        static magnitude(a: any): any;

        static sum(a: any, b: any): any;

    }

    class Rect {
        constructor(a: any, b: any, c: any, d: any);

        contains(a: any, b: any): any;

    }

    const KeyCodes: {
        A: number;
        ALT: number;
        APOSTROPHE: number;
        AT_SIGN: number;
        B: number;
        BACKSLASH: number;
        BACKSPACE: number;
        C: number;
        CAPS_LOCK: number;
        CLOSE_SQUARE_BRACKET: number;
        COMMA: number;
        CONTEXT_MENU: number;
        CTRL: number;
        D: number;
        DASH: number;
        DELETE: number;
        DOWN: number;
        E: number;
        EIGHT: number;
        END: number;
        ENTER: number;
        EQUALS: number;
        ESC: number;
        F: number;
        F1: number;
        F10: number;
        F11: number;
        F12: number;
        F2: number;
        F3: number;
        F4: number;
        F5: number;
        F6: number;
        F7: number;
        F8: number;
        F9: number;
        FF_DASH: number;
        FF_EQUALS: number;
        FF_HASH: number;
        FF_SEMICOLON: number;
        FIRST_MEDIA_KEY: number;
        FIVE: number;
        FOUR: number;
        G: number;
        H: number;
        HOME: number;
        I: number;
        INSERT: number;
        J: number;
        K: number;
        L: number;
        LAST_MEDIA_KEY: number;
        LEFT: number;
        M: number;
        MAC_ENTER: number;
        MAC_FF_META: number;
        MAC_WK_CMD_LEFT: number;
        MAC_WK_CMD_RIGHT: number;
        META: number;
        N: number;
        NINE: number;
        NUMLOCK: number;
        NUM_CENTER: number;
        NUM_DIVISION: number;
        NUM_EIGHT: number;
        NUM_FIVE: number;
        NUM_FOUR: number;
        NUM_MINUS: number;
        NUM_MULTIPLY: number;
        NUM_NINE: number;
        NUM_ONE: number;
        NUM_PERIOD: number;
        NUM_PLUS: number;
        NUM_SEVEN: number;
        NUM_SIX: number;
        NUM_THREE: number;
        NUM_TWO: number;
        NUM_ZERO: number;
        O: number;
        ONE: number;
        OPEN_SQUARE_BRACKET: number;
        P: number;
        PAGE_DOWN: number;
        PAGE_UP: number;
        PAUSE: number;
        PERIOD: number;
        PHANTOM: number;
        PLUS_SIGN: number;
        PRINT_SCREEN: number;
        Q: number;
        QUESTION_MARK: number;
        R: number;
        RIGHT: number;
        S: number;
        SCROLL_LOCK: number;
        SEMICOLON: number;
        SEVEN: number;
        SHIFT: number;
        SINGLE_QUOTE: number;
        SIX: number;
        SLASH: number;
        SPACE: number;
        T: number;
        TAB: number;
        THREE: number;
        TILDE: number;
        TWO: number;
        U: number;
        UP: number;
        V: number;
        VK_NONAME: number;
        W: number;
        WIN_IME: number;
        WIN_KEY: number;
        WIN_KEY_FF_LINUX: number;
        WIN_KEY_RIGHT: number;
        X: number;
        Y: number;
        Z: number;
        ZERO: number;
    };

    const global: {
        Blockly: {
            Msg: {
            };
        };
    };

    const userAgent: {
        ANDROID: boolean;
        CHROME: boolean;
        EDGE: boolean;
        GECKO: boolean;
        IE: boolean;
        IPAD: boolean;
        IPHONE: boolean;
        IPOD: boolean;
        JAVA_FX: boolean;
        MAC: boolean;
        MOBILE: boolean;
        TABLET: boolean;
        WEBKIT: boolean;
        raw: string;
    };

    function Size(a: any, b: any): void;

    function arrayRemove(a: any, b: any): any;

    function checkMessageReferences(a: any): any;

    function genUid(): any;

    function getBlockTypeCounts(a: any, b: any): any;

    function getDocumentScroll(): any;

    function getInjectionDivXY_(a: any): any;

    function getMessageArray_(): any;

    function getRelativeXY(a: any): any;

    function getScrollDeltaPixels(a: any): any;

    function getViewportBBox(): any;

    function is3dSupported(): any;

    function isRightButton(a: any): any;

    function isTargetInput(a: any): any;

    function mouseToSvg(a: any, b: any, c: any): any;

    function noEvent(a: any): void;

    function parseBlockColour(a: any): any;

    function replaceMessageReferences(a: any): any;

    function runAfterPageLoad(a: any): void;

    function screenToWsCoordinates(a: any, b: any): any;

    function tokenizeInterpolation(a: any): any;

    function tokenizeInterpolation_(a: any, b: any): any;

    namespace IdGenerator {
        const nextId_: number;

        function getNextUniqueId(): any;

    }

    namespace Size {
        function equals(a: any, b: any): any;

    }

    namespace aria {
        const ARIA_PREFIX_: string;

        const ROLE_ATTRIBUTE_: string;

        const Role: {
            GRID: string;
            GRIDCELL: string;
            GROUP: string;
            LISTBOX: string;
            MENU: string;
            MENUITEM: string;
            MENUITEMCHECKBOX: string;
            OPTION: string;
            PRESENTATION: string;
            ROW: string;
            TREE: string;
            TREEITEM: string;
        };

        const State: {
            ACTIVEDESCENDANT: string;
            COLCOUNT: string;
            EXPANDED: string;
            INVALID: string;
            LABEL: string;
            LABELLEDBY: string;
            LEVEL: string;
            ORIENTATION: string;
            POSINSET: string;
            ROWCOUNT: string;
            SELECTED: string;
            SETSIZE: string;
            VALUEMAX: string;
            VALUEMIN: string;
        };

        function setRole(a: any, b: any): void;

        function setState(a: any, b: any, c: any): void;

    }

    namespace colour {
        const names: {
            aqua: string;
            black: string;
            blue: string;
            fuchsia: string;
            gray: string;
            green: string;
            lime: string;
            maroon: string;
            navy: string;
            olive: string;
            purple: string;
            red: string;
            silver: string;
            teal: string;
            white: string;
            yellow: string;
        };

        function blend(a: any, b: any, c: any): any;

        function hexToRgb(a: any): any;

        function hsvToHex(a: any, b: any, c: any): any;

        function parse(a: any): any;

        function rgbToHex(a: any, b: any, c: any): any;

    }

    namespace dom {
        const HTML_NS: string;

        const Node: {
            COMMENT_NODE: number;
            DOCUMENT_POSITION_CONTAINED_BY: number;
            ELEMENT_NODE: number;
            TEXT_NODE: number;
        };

        const SVG_NS: string;

        const XLINK_NS: string;

        const cacheReference_: number;

        const cacheWidths_: any;

        const canvasContext_: any;

        function addClass(a: any, b: any): any;

        function containsNode(a: any, b: any): any;

        function createSvgElement(a: any, b: any, c: any): any;

        function getFastTextWidth(a: any, b: any, c: any, d: any): any;

        function getTextWidth(a: any): any;

        function hasClass(a: any, b: any): any;

        function insertAfter(a: any, b: any): void;

        function removeClass(a: any, b: any): any;

        function removeNode(a: any): any;

        function setCssTransform(a: any, b: any): void;

        function startTextWidthCache(): void;

        function stopTextWidthCache(): void;

    }

    namespace genUid {
        const soup_: string;

    }

    namespace getRelativeXY {
        const XY_REGEX_: RegExp;

        const XY_STYLE_REGEX_: RegExp;

    }

    namespace math {
        function clamp(a: any, b: any, c: any): any;

        function toDegrees(a: any): any;

        function toRadians(a: any): any;

    }

    namespace object {
        function inherits(a: any, b: any): void;

        function mixin(a: any, b: any): void;

        function values(a: any): any;

    }

    namespace string {
        function commonWordPrefix(a: any, b: any): any;

        function commonWordSuffix(a: any, b: any): any;

        function shortestStringLength(a: any): any;

        function startsWith(a: any, b: any): any;

        function wrap(a: any, b: any): any;

        function wrapLine_(a: any, b: any): any;

        function wrapMutate_(a: any, b: any, c: any): any;

        function wrapScore_(a: any, b: any, c: any): any;

        function wrapToText_(a: any, b: any): any;

    }

    namespace style {
        function getBorderBox(a: any): any;

        function getCascadedStyle(a: any, b: any): any;

        function getComputedStyle(a: any, b: any): any;

        function getContainerOffsetToScrollInto(a: any, b: any, c: any): any;

        function getPageOffset(a: any): any;

        function getSize(a: any): any;

        function getSizeWithDisplay_(a: any): any;

        function getStyle_(a: any, b: any): any;

        function getViewportPageOffset(): any;

        function isRightToLeft(a: any): any;

        function scrollIntoContainerView(a: any, b: any, c: any): void;

        function setElementShown(a: any, b: any): void;

    }

    namespace svgPaths {
        function arc(a: any, b: any, c: any, d: any): any;

        function curve(a: any, b: any): any;

        function line(a: any): any;

        function lineOnAxis(a: any, b: any): any;

        function lineTo(a: any, b: any): any;

        function moveBy(a: any, b: any): any;

        function moveTo(a: any, b: any): any;

        function point(a: any, b: any): any;

    }

    namespace uiMenu {
        function adjustBBoxesForRTL(a: any, b: any, c: any): void;

        function getSize(a: any): any;

    }

    namespace xml {
        const NAME_SPACE: string;

        function createElement(a: any): any;

        function createTextNode(a: any): any;

        function document(): any;

        function domToText(a: any): any;

        function textToDomDocument(a: any): any;

    }

}

export namespace zelos {
    class BottomRow {
        constructor(a: any);

        endsWithElemSpacer(): any;

        hasLeftSquareCorner(a: any): any;

        hasRightSquareCorner(a: any): any;

    }

    class ConstantProvider {
        constructor();

        createDom(a: any): void;

        dispose(): void;

        generateSecondaryColour_(a: any): any;

        generateTertiaryColour_(a: any): any;

        getCSS_(a: any): any;

        init(): void;

        makeHexagonal(): any;

        makeInsideCorners(): any;

        makeNotch(): any;

        makeRounded(): any;

        makeSquared(): any;

        makeStartHat(): any;

        shapeFor(a: any): any;

    }

    class Drawer {
        constructor(a: any, b: any);

        draw(): void;

        drawFlatBottom_(): void;

        drawFlatTop_(): void;

        drawInlineInput_(a: any): void;

        drawLeftDynamicConnection_(): void;

        drawOutline_(): void;

        drawRightDynamicConnection_(): void;

        drawRightSideRow_(a: any): void;

        drawStatementInput_(a: any): void;

    }

    class MarkerSvg {
        constructor(a: any, b: any, c: any);

        createDomInternal_(): any;

        hide(): void;

        positionCircle_(a: any, b: any): void;

        showAtLocation_(a: any): void;

        showWithBlock_(a: any): void;

        showWithInput_(a: any): void;

    }

    class PathObject {
        constructor(a: any, b: any, c: any);

        applyColour(a: any): void;

        beginDrawing(): void;

        endDrawing(): void;

        flipRTL(): void;

        getOutlinePath_(a: any): any;

        removeOutlinePath_(a: any): void;

        setOutlinePath(a: any, b: any): void;

        setPath(a: any): void;

        updateReplacementHighlight(a: any): void;

        updateSelected(a: any): void;

        updateShapeForInputHighlight(a: any, b: any): void;

    }

    class RenderInfo {
        constructor(a: any, b: any);

        addAlignmentPadding_(a: any, b: any): void;

        addInput_(a: any, b: any): void;

        adjustXPosition_(): void;

        finalizeHorizontalAlignment_(): void;

        finalizeOutputConnection_(): void;

        finalizeVerticalAlignment_(): void;

        finalize_(): void;

        getDesiredRowWidth_(a: any): any;

        getElemCenterline_(a: any, b: any): any;

        getInRowSpacing_(a: any, b: any): any;

        getNegativeSpacing_(a: any): any;

        getRenderer(): any;

        getSpacerRowHeight_(a: any, b: any): any;

        getSpacerRowWidth_(a: any, b: any): any;

        measure(): void;

        shouldStartNewRow_(a: any, b: any): any;

    }

    class Renderer {
        constructor(a: any);

        makeConstants_(): any;

        makeDrawer_(a: any, b: any): any;

        makeMarkerDrawer(a: any, b: any): any;

        makePathObject(a: any, b: any): any;

        makeRenderInfo_(a: any): any;

        shouldHighlightConnection(a: any): any;

        shouldInsertDraggedBlock(a: any, b: any): any;

    }

    class TopRow {
        constructor(a: any);

        endsWithElemSpacer(): any;

        hasLeftSquareCorner(a: any): any;

        hasRightSquareCorner(a: any): any;

    }

    function RightConnectionShape(a: any): void;

    function StatementInput(a: any, b: any): void;

    namespace BottomRow {
        namespace superClass_ {
            function endsWithElemSpacer(): any;

            function getFirstSpacer(): any;

            function getLastInput(): any;

            function getLastSpacer(): any;

            function hasLeftSquareCorner(a: any): any;

            function hasRightSquareCorner(a: any): any;

            function measure(): void;

            function startsWithElemSpacer(): any;

        }

    }

    namespace ConstantProvider {
        namespace superClass_ {
            function createBlockStyle_(a: any): any;

            function createDom(a: any): void;

            function dispose(): void;

            function generateSecondaryColour_(a: any): any;

            function generateTertiaryColour_(a: any): any;

            function getBlockStyle(a: any): any;

            function getBlockStyleForColour(a: any): any;

            function getCSS_(a: any): any;

            function init(): void;

            function injectCSS(a: any): void;

            function makeInsideCorners(): any;

            function makeJaggedTeeth(): any;

            function makeNotch(): any;

            function makeOutsideCorners(): any;

            function makePuzzleTab(): any;

            function makeStartHat(): any;

            function refreshTheme(a: any): void;

            function shapeFor(a: any): any;

            function validatedBlockStyle_(a: any): any;

        }

    }

    namespace Drawer {
        namespace superClass_ {
            function draw(): void;

            function drawBottom_(): void;

            function drawInlineInput_(a: any): void;

            function drawInternals_(): void;

            function drawJaggedEdge_(a: any): void;

            function drawLeft_(): void;

            function drawOutline_(): void;

            function drawRightSideRow_(a: any): void;

            function drawStatementInput_(a: any): void;

            function drawTop_(): void;

            function drawValueInput_(a: any): void;

            function hideHiddenIcons_(): void;

            function layoutField_(a: any): void;

            function positionExternalValueConnection_(a: any): void;

            function positionInlineInputConnection_(a: any): void;

            function positionNextConnection_(): void;

            function positionOutputConnection_(): void;

            function positionPreviousConnection_(): void;

            function positionStatementInputConnection_(a: any): void;

            function recordSizeOnBlock_(): void;

        }

    }

    namespace MarkerSvg {
        namespace superClass_ {
            function createDom(): any;

            function createDomInternal_(): any;

            function dispose(): void;

            function draw(a: any, b: any): void;

            function firemarkerEvent_(a: any, b: any): void;

            function flipRtl_(a: any): void;

            function getBlinkProperties_(): any;

            function getSvgRoot(): any;

            function hide(): void;

            function isCursor(): any;

            function positionBlock_(a: any, b: any, c: any): void;

            function positionInput_(a: any): void;

            function positionLine_(a: any, b: any, c: any): void;

            function positionOutput_(a: any, b: any, c: any): void;

            function positionPrevious_(a: any, b: any, c: any, d: any): void;

            function positionRect_(a: any, b: any, c: any, d: any): void;

            function setParent_(a: any): void;

            function showAtLocation_(a: any): void;

            function showCurrent_(): void;

            function showWithBlockPrevOutput_(a: any): void;

            function showWithCoordinates_(a: any): void;

            function showWithField_(a: any): void;

            function showWithInput_(a: any): void;

            function showWithNext_(a: any): void;

            function showWithStack_(a: any): void;

        }

    }

    namespace PathObject {
        namespace superClass_ {
            function applyColour(a: any): void;

            function flipRTL(): void;

            function setClass_(a: any, b: any): void;

            function setCursorSvg(a: any): void;

            function setMarkerSvg(a: any): void;

            function setPath(a: any): void;

            function setStyle(a: any): void;

            function updateDisabled_(a: any): void;

            function updateDraggingDelete(a: any): void;

            function updateHighlighted(a: any): void;

            function updateInsertionMarker(a: any): void;

            function updateMovable(a: any): void;

            function updateReplacementHighlight(a: any): void;

            function updateSelected(a: any): void;

            function updateShadow_(a: any): void;

            function updateShapeForInputHighlight(a: any, b: any): void;

        }

    }

    namespace RenderInfo {
        namespace superClass_ {
            function addAlignmentPadding_(a: any, b: any): void;

            function addElemSpacing_(): void;

            function addInput_(a: any, b: any): void;

            function addRowSpacing_(): void;

            function alignRowElements_(): void;

            function alignStatementRow_(a: any): void;

            function computeBounds_(): void;

            function createRows_(): void;

            function finalize_(): void;

            function getDesiredRowWidth_(a: any): any;

            function getElemCenterline_(a: any, b: any): any;

            function getInRowSpacing_(a: any, b: any): any;

            function getRenderer(): any;

            function getSpacerRowHeight_(a: any, b: any): any;

            function getSpacerRowWidth_(a: any, b: any): any;

            function makeSpacerRow_(a: any, b: any): any;

            function measure(): void;

            function populateBottomRow_(): void;

            function populateTopRow_(): void;

            function recordElemPositions_(a: any): void;

            function shouldStartNewRow_(a: any, b: any): any;

        }

    }

    namespace Renderer {
        namespace superClass_ {
            function getConstants(): any;

            function init(): void;

            function makeConstants_(): any;

            function makeDebugger_(): any;

            function makeDrawer_(a: any, b: any): any;

            function makeMarkerDrawer(a: any, b: any): any;

            function makePathObject(a: any, b: any): any;

            function makeRenderInfo_(a: any): any;

            function render(a: any): void;

            function shouldHighlightConnection(a: any): any;

            function shouldInsertDraggedBlock(a: any, b: any): any;

        }

    }

    namespace RightConnectionShape {
        const superClass_: {
        };

    }

    namespace StatementInput {
        const superClass_: {
        };

    }

    namespace TopRow {
        namespace superClass_ {
            function endsWithElemSpacer(): any;

            function getFirstSpacer(): any;

            function getLastInput(): any;

            function getLastSpacer(): any;

            function hasLeftSquareCorner(a: any): any;

            function hasRightSquareCorner(a: any): any;

            function measure(): void;

            function startsWithElemSpacer(): any;

        }

    }

}

